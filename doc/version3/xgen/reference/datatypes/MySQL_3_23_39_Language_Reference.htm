<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>MySQL Reference Manual for version 3.23.39. - 7 MySQL Language Reference</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252"><!-- This HTML file has been created by texi2html 1.52 (hacked by david@detron.se)
     from /users/mwagner/work/bk/mysql/Docs/manual.texi on 14 June 2001 -->
<STYLE>CODE {
	COLOR: purple
}
TT {
	COLOR: green
}
SAMP {
	COLOR: navy
}
PRE {
	COLOR: maroon
}
</STYLE>

<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY text=#000000 vLink=#7030b0 link=#101090 bgColor=silver>Go to the <A 
href="file:///D:/work/mysql/manual-split/manual_Introduction.html">first</A>, <A 
href="file:///D:/work/mysql/manual-split/manual_Privilege_system.html">previous</A>, 
<A href="file:///D:/work/mysql/manual-split/manual_Table_types.html">next</A>, 
<A href="file:///D:/work/mysql/manual-split/manual_Concept_Index.html">last</A> 
section, <A href="file:///D:/work/mysql/manual-split/manual_toc.html">table of 
contents</A>. 
<P>
<HR>

<P>
<H1><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Reference" 
name=Reference>7 MySQL Language Reference</A></H1>
<P><STRONG>MySQL</STRONG> has a very complex, but intuitive and easy to learn 
SQL interface. This chapter describes the various commands, types, and functions 
you will need to know in order to use <STRONG>MySQL</STRONG> efficiently and 
effectively. This chapter also serves as a reference to all functionality 
included in <STRONG>MySQL</STRONG>. In order to use this chapter effectively, 
you may find it useful to refer to the various indexes. </P>
<P><A name=IDX440></A><A name=IDX441></A><A name=IDX442></A><A 
name=IDX443></A><A name=IDX444></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Literals" 
name=Literals>7.1 Literals: How to Write Strings and Numbers</A></H2>
<P>This section describes the various ways to write strings and numbers in 
<STRONG>MySQL</STRONG>. It also covers the various nuances and ``gotchas'' that 
you may run into when dealing with these basic types in <STRONG>MySQL</STRONG>. 
</P>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#String_syntax" 
name=String_syntax>7.1.1 Strings</A></H3>
<P>A string is a sequence of characters, surrounded by either single quote 
(<SAMP>`''</SAMP>) or double quote (<SAMP>`"'</SAMP>) characters (only the 
single quote if you run in ANSI mode). Examples: </P><PRE>'a string'
"another string"
</PRE>
<P>Within a string, certain sequences have special meaning. Each of these 
sequences begins with a backslash (<SAMP>`\'</SAMP>), known as the <EM>escape 
character</EM>. <STRONG>MySQL</STRONG> recognizes the following escape 
sequences: </P>
<DL compact>
  <DT><CODE>\0</CODE> 
  <DD><A name=IDX445></A><A name=IDX446></A>An ASCII 0 (<CODE>NUL</CODE>) 
  character. <A name=IDX447></A><A name=IDX448></A>
  <DT><CODE>\'</CODE> 
  <DD>A single quote (<SAMP>`''</SAMP>) character. <A name=IDX449></A><A 
  name=IDX450></A>
  <DT><CODE>\"</CODE> 
  <DD>A double quote (<SAMP>`"'</SAMP>) character. <A name=IDX451></A><A 
  name=IDX452></A>
  <DT><CODE>\b</CODE> 
  <DD>A backspace character. <A name=IDX453></A><A name=IDX454></A>
  <DT><CODE>\n</CODE> 
  <DD>A newline character. <A name=IDX455></A><A name=IDX456></A><A 
  name=IDX457></A>
  <DT><CODE>\r</CODE> 
  <DD>A carriage return character. <A name=IDX458></A><A name=IDX459></A>
  <DT><CODE>\t</CODE> 
  <DD>A tab character. <A name=IDX460></A><A name=IDX461></A>
  <DT><CODE>\z</CODE> 
  <DD>ASCII(26) (Control-Z). This character can be encoded to allow you to go 
  around the problem that ASCII(26) stands for END-OF-FILE on Windows. 
  (ASCII(26) will cause problems if you try to use <CODE>mysql database &lt; 
  filename</CODE>). <A name=IDX462></A><A name=IDX463></A>
  <DT><CODE>\\</CODE> 
  <DD>A backslash (<SAMP>`\'</SAMP>) character. <A name=IDX464></A><A 
  name=IDX465></A>
  <DT><CODE>\%</CODE> 
  <DD>A <SAMP>`%'</SAMP> character. This is used to search for literal instances 
  of <SAMP>`%'</SAMP> in contexts where <SAMP>`%'</SAMP> would otherwise be 
  interpreted as a wild-card character. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#String_comparison_functions">7.4.6 
  String Comparison Functions</A>. <A name=IDX466></A><A name=IDX467></A>
  <DT><CODE>\_</CODE> 
  <DD>A <SAMP>`_'</SAMP> character. This is used to search for literal instances 
  of <SAMP>`_'</SAMP> in contexts where <SAMP>`_'</SAMP> would otherwise be 
  interpreted as a wild-card character. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#String_comparison_functions">7.4.6 
  String Comparison Functions</A>. </DD></DL>
<P>Note that if you use <SAMP>`\%'</SAMP> or <SAMP>`\_'</SAMP> in some string 
contexts, these will return the strings <SAMP>`\%'</SAMP> and <SAMP>`\_'</SAMP> 
and not <SAMP>`%'</SAMP> and <SAMP>`_'</SAMP>. </P>
<P><A name=IDX468></A>There are several ways to include quotes within a string: 
</P>
<UL>
  <LI>A <SAMP>`''</SAMP> inside a string quoted with <SAMP>`''</SAMP> may be 
  written as <SAMP>`'''</SAMP>. 
  <LI>A <SAMP>`"'</SAMP> inside a string quoted with <SAMP>`"'</SAMP> may be 
  written as <SAMP>`""'</SAMP>. 
  <LI>You can precede the quote character with an escape character 
  (<SAMP>`\'</SAMP>). 
  <LI>A <SAMP>`''</SAMP> inside a string quoted with <SAMP>`"'</SAMP> needs no 
  special treatment and need not be doubled or escaped. In the same way, 
  <SAMP>`"'</SAMP> inside a string quoted with <SAMP>`''</SAMP> needs no special 
  treatment. </LI></UL>
<P>The <CODE>SELECT</CODE> statements shown below demonstrate how quoting and 
escaping work: </P><PRE>mysql&gt; SELECT 'hello', '"hello"', '""hello""', 'hel''lo', '\'hello';
+-------+---------+-----------+--------+--------+
| hello | "hello" | ""hello"" | hel'lo | 'hello |
+-------+---------+-----------+--------+--------+

mysql&gt; SELECT "hello", "'hello'", "''hello''", "hel""lo", "\"hello";
+-------+---------+-----------+--------+--------+
| hello | 'hello' | ''hello'' | hel"lo | "hello |
+-------+---------+-----------+--------+--------+

mysql&gt; SELECT "This\nIs\nFour\nlines";
+--------------------+
| This
Is
Four
lines |
+--------------------+
</PRE>
<P><A name=IDX469></A></P>
<P>If you want to insert binary data into a <CODE>BLOB</CODE> column, the 
following characters must be represented by escape sequences: 
<DL compact>
  <DT><CODE>NUL</CODE> 
  <DD>ASCII 0. You should represent this by <SAMP>`\0'</SAMP> (a backslash and 
  an ASCII <SAMP>`0'</SAMP> character). 
  <DT><CODE>\</CODE> 
  <DD>ASCII 92, backslash. Represent this by <SAMP>`\\'</SAMP>. 
  <DT><CODE>'</CODE> 
  <DD>ASCII 39, single quote. Represent this by <SAMP>`\''</SAMP>. 
  <DT><CODE>"</CODE> 
  <DD>ASCII 34, double quote. Represent this by <SAMP>`\"'</SAMP>. </DD></DL>
<P><A name=IDX470></A><A name=IDX471></A><A name=IDX472></A><A 
name=IDX473></A>If you write C code, you can use the C API function 
<CODE>mysql_escape_string()</CODE> to escape characters for the 
<CODE>INSERT</CODE> statement. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Clients.html#C_API_function_overview">24.1.2 
C API Function Overview</A>. In Perl, you can use the <CODE>quote</CODE> method 
of the <CODE>DBI</CODE> package to convert special characters to the proper 
escape sequences. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Clients.html#Perl_DBI_Class">24.2.2 
The <CODE>DBI</CODE> Interface</A>. </P>
<P>You should use an escape function on any string that might contain any of the 
special characters listed above! </P>
<P><A name=IDX474></A><A name=IDX475></A><A name=IDX476></A><A 
name=IDX477></A><A name=IDX478></A>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Number_syntax" 
name=Number_syntax>7.1.2 Numbers</A></H3>
<P>Integers are represented as a sequence of digits. Floats use <SAMP>`.'</SAMP> 
as a decimal separator. Either type of number may be preceded by 
<SAMP>`-'</SAMP> to indicate a negative value. </P>
<P>Examples of valid integers: </P><PRE>1221
0
-32
</PRE>
<P>Examples of valid floating-point numbers: </P><PRE>294.42
-32032.6809e+10
148.00
</PRE>
<P>An integer may be used in a floating-point context; it is interpreted as the 
equivalent floating-point number. </P>
<P><A name=IDX479></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Hexadecimal_values" 
name=Hexadecimal_values>7.1.3 Hexadecimal Values</A></H3>
<P><STRONG>MySQL</STRONG> supports hexadecimal values. In number context these 
act like an integer (64-bit precision). In string context these act like a 
binary string where each pair of hex digits is converted to a character: </P><PRE>mysql&gt; SELECT 0xa+0;
       -&gt; 10
mysql&gt; select 0x5061756c;
       -&gt; Paul
</PRE>
<P>Hexadecimal strings are often used by ODBC to give values for BLOB columns. 
</P>
<P><A name=IDX480></A>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#NULL_values" 
name=NULL_values>7.1.4 <CODE>NULL</CODE> Values</A></H3>
<P>The <CODE>NULL</CODE> value means ``no data'' and is different from values 
such as <CODE>0</CODE> for numeric types or the empty string for string types. 
See section <A 
href="file:///D:/work/mysql/manual-split/manual_Problems.html#Problems_with_NULL">21.16 
Problems with <CODE>NULL</CODE> Values</A>. </P>
<P><CODE>NULL</CODE> may be represented by <CODE>\N</CODE> when using the text 
file import or export formats (<CODE>LOAD DATA INFILE</CODE>, <CODE>SELECT ... 
INTO OUTFILE</CODE>). See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#LOAD_DATA">7.23 
<CODE>LOAD DATA INFILE</CODE> Syntax</A>. </P>
<P><A name=IDX481></A><A name=IDX482></A><A name=IDX483></A><A 
name=IDX484></A><A name=IDX485></A><A name=IDX486></A><A name=IDX487></A>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Legal_names" 
name=Legal_names>7.1.5 Database, Table, Index, Column, and Alias Names</A></H3>
<P>Database, table, index, column, and alias names all follow the same rules in 
<STRONG>MySQL</STRONG>. </P>
<P><A name=IDX488></A><A name=IDX489></A><A name=IDX490></A><A 
name=IDX491></A>Note that the rules changed starting with <STRONG>MySQL</STRONG> 
Version 3.23.6 when we introduced quoting of identifiers (database, table, and 
column names) with <SAMP>``'</SAMP>. <SAMP>`"'</SAMP> will also work to quote 
identifiers if you run in ANSI mode. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Compatibility.html#ANSI_mode">5.2 
Running MySQL in ANSI Mode</A>. </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Identifier</STRONG> </TD>
    <TD><STRONG>Max length</STRONG> </TD>
    <TD><STRONG>Allowed characters</STRONG> </TD>
  <TR>
    <TD>Database </TD>
    <TD>64 </TD>
    <TD>Any character that is allowed in a directory name except 
      <SAMP>`/'</SAMP> or <SAMP>`.'</SAMP>. </TD>
  <TR>
    <TD>Table </TD>
    <TD>64 </TD>
    <TD>Any character that is allowed in a file name, except <SAMP>`/'</SAMP> 
      or <SAMP>`.'</SAMP>. </TD>
  <TR>
    <TD>Column </TD>
    <TD>64 </TD>
    <TD>All characters. </TD>
  <TR>
    <TD>Alias </TD>
    <TD>255 </TD>
    <TD>All characters. </TD></TR></TBODY></TABLE>
<P>Note that in addition to the above, you can't have ASCII(0) or ASCII(255) or 
the quoting character in an identifier. </P>
<P>Note that if the identifier is a restricted word or contains special 
characters you must always quote it with <CODE>`</CODE> when you use it: </P><PRE>SELECT * from `select` where `select`.id &gt; 100;
</PRE>
<P>In previous versions of <STRONG>MySQL</STRONG>, the name rules are as 
follows: </P>
<UL>
  <LI>A name may consist of alphanumeric characters from the current character 
  set and also <SAMP>`_'</SAMP> and <SAMP>`$'</SAMP>. The default character set 
  is ISO-8859-1 Latin1; this may be changed with the 
  <CODE>--default-character-set</CODE> option to <CODE>mysqld</CODE>. See 
  section <A 
  href="file:///D:/work/mysql/manual-split/manual_Server.html#Character_sets">10.1.1 
  The Character Set Used for Data and Sorting</A>. 
  <LI>A name may start with any character that is legal in a name. In 
  particular, a name may start with a number (this differs from many other 
  database systems!). However, a name cannot consist <EM>only</EM> of numbers. 
  <LI>You cannot use the <SAMP>`.'</SAMP> character in names because it is used 
  to extend the format by which you can refer to columns (see immediately 
  below). </LI></UL>
<P>It is recommended that you do not use names like <CODE>1e</CODE>, because an 
expression like <CODE>1e+1</CODE> is ambiguous. It may be interpreted as the 
expression <CODE>1e + 1</CODE> or as the number <CODE>1e+1</CODE>. </P>
<P>In <STRONG>MySQL</STRONG> you can refer to a column using any of the 
following forms: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column reference</STRONG> </TD>
    <TD><STRONG>Meaning</STRONG> </TD>
  <TR>
    <TD><CODE>col_name</CODE> </TD>
    <TD>Column <CODE>col_name</CODE> from whichever table used in the query 
      contains a column of that name. </TD>
  <TR>
    <TD><CODE>tbl_name.col_name</CODE> </TD>
    <TD>Column <CODE>col_name</CODE> from table <CODE>tbl_name</CODE> of the 
      current database. </TD>
  <TR>
    <TD><CODE>db_name.tbl_name.col_name</CODE> </TD>
    <TD>Column <CODE>col_name</CODE> from table <CODE>tbl_name</CODE> of the 
      database <CODE>db_name</CODE>. This form is available in 
      <STRONG>MySQL</STRONG> Version 3.22 or later. </TD>
  <TR>
    <TD><CODE>`column_name`</CODE> </TD>
    <TD>A column that is a keyword or contains special characters. 
  </TD></TR></TBODY></TABLE>
<P>You need not specify a <CODE>tbl_name</CODE> or <CODE>db_name.tbl_name</CODE> 
prefix for a column reference in a statement unless the reference would be 
ambiguous. For example, suppose tables <CODE>t1</CODE> and <CODE>t2</CODE> each 
contain a column <CODE>c</CODE>, and you retrieve <CODE>c</CODE> in a 
<CODE>SELECT</CODE> statement that uses both <CODE>t1</CODE> and 
<CODE>t2</CODE>. In this case, <CODE>c</CODE> is ambiguous because it is not 
unique among the tables used in the statement, so you must indicate which table 
you mean by writing <CODE>t1.c</CODE> or <CODE>t2.c</CODE>. Similarly, if you 
are retrieving from a table <CODE>t</CODE> in database <CODE>db1</CODE> and from 
a table <CODE>t</CODE> in database <CODE>db2</CODE>, you must refer to columns 
in those tables as <CODE>db1.t.col_name</CODE> and <CODE>db2.t.col_name</CODE>. 
</P>
<P><A name=IDX492></A><A name=IDX493></A>The syntax <CODE>.tbl_name</CODE> means 
the table <CODE>tbl_name</CODE> in the current database. This syntax is accepted 
for ODBC compatibility, because some ODBC programs prefix table names with a 
<SAMP>`.'</SAMP> character. </P>
<P><A name=IDX494></A><A name=IDX495></A>
<H4><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Name_case_sensitivity" 
name=Name_case_sensitivity>7.1.5.1 Case Sensitivity in Names</A></H4>
<P><A name=IDX496></A><A name=IDX497></A><A name=IDX498></A><A 
name=IDX499></A></P>
<P>In <STRONG>MySQL</STRONG>, databases and tables correspond to directories and 
files within those directories. Consequently, the case sensitivity of the 
underlying operating system determines the case sensitivity of database and 
table names. This means database and table names are case sensitive in Unix and 
case insensitive in Windows. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Compatibility.html#Extensions_to_ANSI">5.1 
MySQL Extensions to ANSI SQL92</A>. </P>
<P><STRONG>NOTE:</STRONG> Although database and table names are case insensitive 
for Windows, you should not refer to a given database or table using different 
cases within the same query. The following query would not work because it 
refers to a table both as <CODE>my_table</CODE> and as <CODE>MY_TABLE</CODE>: 
</P><PRE>mysql&gt; SELECT * FROM my_table WHERE MY_TABLE.col=1;
</PRE>
<P>Column names are case insensitive in all cases. </P>
<P>Aliases on tables are case sensitive. The following query would not work 
because it refers to the alias both as <CODE>a</CODE> and as <CODE>A</CODE>: 
</P><PRE>mysql&gt; SELECT col_name FROM tbl_name AS a
           WHERE a.col_name = 1 OR A.col_name = 2;
</PRE>
<P>Aliases on columns are case insensitive. </P>
<P>If you have a problem remembering the used cases for a table names, adopt a 
consistent convention, such as always creating databases and tables using 
lowercase names. </P>
<P>One way to avoid this problem is to start <CODE>mysqld</CODE> with <CODE>-O 
lower_case_table_names=1</CODE>. By default this option is 1 on Windows and 0 on 
Unix. </P>
<P>If <CODE>lower_case_table_names</CODE> is 1 <STRONG>MySQL</STRONG> will 
convert all table names to lower case on storage and lookup. Note that if you 
change this option, you need to first convert your old table names to lower case 
before starting <CODE>mysqld</CODE>. </P>
<P><A name=IDX500></A><A name=IDX501></A><A name=IDX502></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Variables" 
name=Variables>7.2 User Variables</A></H2>
<P><STRONG>MySQL</STRONG> supports thread-specific variables with the 
<CODE>@variablename</CODE> syntax. A variable name may consist of alphanumeric 
characters from the current character set and also <SAMP>`_'</SAMP>, 
<SAMP>`$'</SAMP>, and <SAMP>`.'</SAMP> . The default character set is ISO-8859-1 
Latin1; this may be changed with the <CODE>--default-character-set</CODE> option 
to <CODE>mysqld</CODE>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Server.html#Character_sets">10.1.1 
The Character Set Used for Data and Sorting</A>. </P>
<P>Variables don't have to be initialized. They contain <CODE>NULL</CODE> by 
default and can store an integer, real, or string value. All variables for a 
thread are automatically freed when the thread exits. </P>
<P>You can set a variable with the <CODE>SET</CODE> syntax: </P><PRE>SET @variable= { integer expression | real expression | string expression }
[,@variable= ...].
</PRE>
<P>You can also set a variable in an expression with the 
<CODE>@variable:=expr</CODE> syntax: </P><PRE>select @t1:=(@t2:=1)+@t3:=4,@t1,@t2,@t3;
+----------------------+------+------+------+
| @t1:=(@t2:=1)+@t3:=4 | @t1  | @t2  | @t3  |
+----------------------+------+------+------+
|                    5 |    5 |    1 |    4 |
+----------------------+------+------+------+
</PRE>
<P>(We had to use the <CODE>:=</CODE> syntax here, because <CODE>=</CODE> was 
reserved for comparisons.) </P>
<P>User variables may be used where expressions are allowed. Note that this does 
not currently include use in contexts where a number is explicitly required, 
such as in the <CODE>LIMIT</CODE> clause of a <CODE>SELECT</CODE> statement, or 
the <CODE>IGNORE number LINES</CODE> clause of a <CODE>LOAD DATA</CODE> 
statement. </P>
<P><STRONG>NOTE:</STRONG> In a <CODE>SELECT</CODE> statement, each expression is 
only evaluated when it's sent to the client. This means that in the 
<CODE>HAVING</CODE>, <CODE>GROUP BY</CODE>, or <CODE>ORDER BY</CODE> clause, you 
can't refer to an expression that involves variables that are set in the 
<CODE>SELECT</CODE> part. For example, the following statement will NOT work as 
expected: </P><PRE>SELECT (@aa:=id) AS a, (@aa+3) AS b FROM table_name HAVING b=5;
</PRE>
<P>The reason is that <CODE>@aa</CODE> will not contain the value of the current 
row, but the value of <CODE>id</CODE> for the previous accepted row. </P>
<P><A name=IDX503></A><A name=IDX504></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Column_types" 
name=Column_types>7.3 Column Types</A></H2>
<P><STRONG>MySQL</STRONG> supports a number of column types, which may be 
grouped into three categories: numeric types, date and time types, and string 
(character) types. This section first gives an overview of the types available 
and summarizes the storage requirements for each column type, then provides a 
more detailed description of the properties of the types in each category. The 
overview is intentionally brief. The more detailed descriptions should be 
consulted for additional information about particular column types, such as the 
allowable formats in which you can specify values. </P>
<P>The column types supported by <STRONG>MySQL</STRONG> are listed below. The 
following code letters are used in the descriptions: </P>
<P><A name=IDX505></A><A name=IDX506></A><A name=IDX507></A><A 
name=IDX508></A><A name=IDX509></A><A name=IDX510></A>
<DL compact>
  <DT><CODE>M</CODE> 
  <DD>Indicates the maximum display size. The maximum legal display size is 255. 

  <DT><CODE>D</CODE> 
  <DD>Applies to floating-point types and indicates the number of digits 
  following the decimal point. The maximum possible value is 30, but should be 
  no greater than <CODE>M</CODE>-2. </DD></DL>
<P>Square brackets (<SAMP>`['</SAMP> and <SAMP>`]'</SAMP>) indicate parts of 
type specifiers that are optional. </P>
<P><A name=IDX511></A></P>
<P>Note that if you specify <CODE>ZEROFILL</CODE> for a column, 
<STRONG>MySQL</STRONG> will automatically add the <CODE>UNSIGNED</CODE> 
attribute to the column. </P>
<DL compact>
  <DT><CODE>TINYINT[(M)] [UNSIGNED] [ZEROFILL]</CODE> 
  <DD><A name=IDX512></A>A very small integer. The signed range is 
  <CODE>-128</CODE> to <CODE>127</CODE>. The unsigned range is <CODE>0</CODE> to 
  <CODE>255</CODE>. <A name=IDX513></A>
  <DT><CODE>SMALLINT[(M)] [UNSIGNED] [ZEROFILL]</CODE> 
  <DD>A small integer. The signed range is <CODE>-32768</CODE> to 
  <CODE>32767</CODE>. The unsigned range is <CODE>0</CODE> to 
  <CODE>65535</CODE>. <A name=IDX514></A>
  <DT><CODE>MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]</CODE> 
  <DD>A medium-size integer. The signed range is <CODE>-8388608</CODE> to 
  <CODE>8388607</CODE>. The unsigned range is <CODE>0</CODE> to 
  <CODE>16777215</CODE>. <A name=IDX515></A>
  <DT><CODE>INT[(M)] [UNSIGNED] [ZEROFILL]</CODE> 
  <DD>A normal-size integer. The signed range is <CODE>-2147483648</CODE> to 
  <CODE>2147483647</CODE>. The unsigned range is <CODE>0</CODE> to 
  <CODE>4294967295</CODE>. <A name=IDX516></A>
  <DT><CODE>INTEGER[(M)] [UNSIGNED] [ZEROFILL]</CODE> 
  <DD>This is a synonym for <CODE>INT</CODE>. <A name=IDX517></A>
  <DT><CODE>BIGINT[(M)] [UNSIGNED] [ZEROFILL]</CODE> 
  <DD>A large integer. The signed range is <CODE>-9223372036854775808</CODE> to 
  <CODE>9223372036854775807</CODE>. The unsigned range is <CODE>0</CODE> to 
  <CODE>18446744073709551615</CODE>. Some things you should be aware about 
  <CODE>BIGINT</CODE> columns: 
  <UL>
    <LI><A name=IDX518></A>As all arithmetic is done using signed 
    <CODE>BIGINT</CODE> or <CODE>DOUBLE</CODE> values, so you shouldn't use 
    unsigned big integers larger than <CODE>9223372036854775807</CODE> (63 bits) 
    except with bit functions! If you do that, some of the last digits in the 
    result may be wrong because of rounding errors when converting the 
    <CODE>BIGINT</CODE> to a <CODE>DOUBLE</CODE>. 
    <LI>You can always store an exact integer value in a <CODE>BIGINT</CODE> 
    column by storing it as a string, as there is in this case there will be no 
    intermediate double representation. 
    <LI><SAMP>`-'</SAMP>, <SAMP>`+'</SAMP>, and <SAMP>`*'</SAMP> will use 
    <CODE>BIGINT</CODE> arithmetic when both arguments are <CODE>INTEGER</CODE> 
    values! This means that if you multiply two big integers (or results from 
    functions that return integers) you may get unexpected results when the 
    result is larger than <CODE>9223372036854775807</CODE>. </LI></UL><A 
  name=IDX519></A><A name=IDX520></A><A name=IDX521></A>
  <DT><CODE>FLOAT(precision) [ZEROFILL]</CODE> 
  <DD>A floating-point number. Cannot be unsigned. <CODE>precision</CODE> can be 
  <CODE>&lt;=24</CODE> for a single-precision floating-point number and between 
  25 and 53 for a double-precision floating-point number. These types are like 
  the <CODE>FLOAT</CODE> and <CODE>DOUBLE</CODE> types described immediately 
  below. <CODE>FLOAT(X)</CODE> has the same range as the corresponding 
  <CODE>FLOAT</CODE> and <CODE>DOUBLE</CODE> types, but the display size and 
  number of decimals is undefined. In <STRONG>MySQL</STRONG> Version 3.23, this 
  is a true floating-point value. In earlier <STRONG>MySQL</STRONG> versions, 
  <CODE>FLOAT(precision)</CODE> always has 2 decimals. Note that using 
  <CODE>FLOAT</CODE> may give you some unexpected problems as all calculation in 
  <STRONG>MySQL</STRONG> is done with double precision. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Problems.html#No_matching_rows">21.19 
  Solving Problems with No Matching Rows</A>. <A name=IDX522></A><A 
  name=IDX523></A>This syntax is provided for ODBC compatibility. <A 
  name=IDX524></A><A name=IDX525></A>
  <DT><CODE>FLOAT[(M,D)] [ZEROFILL]</CODE> 
  <DD>A small (single-precision) floating-point number. Cannot be unsigned. 
  Allowable values are <CODE>-3.402823466E+38</CODE> to 
  <CODE>-1.175494351E-38</CODE>, <CODE>0</CODE>, and 
  <CODE>1.175494351E-38</CODE> to <CODE>3.402823466E+38</CODE>. The M is the 
  display width and D is the number of decimals. <CODE>FLOAT</CODE> without an 
  argument or with an argument of &lt;= 24 stands for a single-precision 
  floating-point number. <A name=IDX526></A><A name=IDX527></A>
  <DT><CODE>DOUBLE[(M,D)] [ZEROFILL]</CODE> 
  <DD>A normal-size (double-precision) floating-point number. Cannot be 
  unsigned. Allowable values are <CODE>-1.7976931348623157E+308</CODE> to 
  <CODE>-2.2250738585072014E-308</CODE>, <CODE>0</CODE>, and 
  <CODE>2.2250738585072014E-308</CODE> to <CODE>1.7976931348623157E+308</CODE>. 
  The M is the display width and D is the number of decimals. 
  <CODE>DOUBLE</CODE> without an argument or <CODE>FLOAT(X)</CODE> where 25 
  &lt;= X &lt;= 53 stands for a double-precision floating-point number. <A 
  name=IDX528></A><A name=IDX529></A>
  <DT><CODE>DOUBLE PRECISION[(M,D)] [ZEROFILL]</CODE> 
  <DD>
  <DT><CODE>REAL[(M,D)] [ZEROFILL]</CODE> 
  <DD>These are synonyms for <CODE>DOUBLE</CODE>. <A name=IDX530></A>
  <DT><CODE>DECIMAL[(M[,D])] [ZEROFILL]</CODE> 
  <DD>An unpacked floating-point number. Cannot be unsigned. Behaves like a 
  <CODE>CHAR</CODE> column: ``unpacked'' means the number is stored as a string, 
  using one character for each digit of the value. The decimal point and, for 
  negative numbers, the <SAMP>`-'</SAMP> sign, are not counted in M (but space 
  for these are reserved). If <CODE>D</CODE> is 0, values will have no decimal 
  point or fractional part. The maximum range of <CODE>DECIMAL</CODE> values is 
  the same as for <CODE>DOUBLE</CODE>, but the actual range for a given 
  <CODE>DECIMAL</CODE> column may be constrained by the choice of <CODE>M</CODE> 
  and <CODE>D</CODE>. If <CODE>D</CODE> is left out it's set to 0. If 
  <CODE>M</CODE> is left out it's set to 10. Note that in <STRONG>MySQL</STRONG> 
  Version 3.22 the <CODE>M</CODE> argument had to includes the space needed for 
  the sign and the decimal point. <A name=IDX531></A>
  <DT><CODE>NUMERIC(M,D) [ZEROFILL]</CODE> 
  <DD>This is a synonym for <CODE>DECIMAL</CODE>. <A name=IDX532></A>
  <DT><CODE>DATE</CODE> 
  <DD>A date. The supported range is <CODE>'1000-01-01'</CODE> to 
  <CODE>'9999-12-31'</CODE>. <STRONG>MySQL</STRONG> displays <CODE>DATE</CODE> 
  values in <CODE>'YYYY-MM-DD'</CODE> format, but allows you to assign values to 
  <CODE>DATE</CODE> columns using either strings or numbers. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#DATETIME">7.3.3.2 
  The <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, and <CODE>TIMESTAMP</CODE> 
  Types</A>. <A name=IDX533></A>
  <DT><CODE>DATETIME</CODE> 
  <DD>A date and time combination. The supported range is <CODE>'1000-01-01 
  00:00:00'</CODE> to <CODE>'9999-12-31 23:59:59'</CODE>. <STRONG>MySQL</STRONG> 
  displays <CODE>DATETIME</CODE> values in <CODE>'YYYY-MM-DD HH:MM:SS'</CODE> 
  format, but allows you to assign values to <CODE>DATETIME</CODE> columns using 
  either strings or numbers. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#DATETIME">7.3.3.2 
  The <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, and <CODE>TIMESTAMP</CODE> 
  Types</A>. <A name=IDX534></A>
  <DT><CODE>TIMESTAMP[(M)]</CODE> 
  <DD>A timestamp. The range is <CODE>'1970-01-01 00:00:00'</CODE> to sometime 
  in the year <CODE>2037</CODE>. <STRONG>MySQL</STRONG> displays 
  <CODE>TIMESTAMP</CODE> values in <CODE>YYYYMMDDHHMMSS</CODE>, 
  <CODE>YYMMDDHHMMSS</CODE>, <CODE>YYYYMMDD</CODE>, or <CODE>YYMMDD</CODE> 
  format, depending on whether <CODE>M</CODE> is <CODE>14</CODE> (or missing), 
  <CODE>12</CODE>, <CODE>8</CODE>, or <CODE>6</CODE>, but allows you to assign 
  values to <CODE>TIMESTAMP</CODE> columns using either strings or numbers. A 
  <CODE>TIMESTAMP</CODE> column is useful for recording the date and time of an 
  <CODE>INSERT</CODE> or <CODE>UPDATE</CODE> operation because it is 
  automatically set to the date and time of the most recent operation if you 
  don't give it a value yourself. You can also set it to the current date and 
  time by assigning it a <CODE>NULL</CODE> value. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Date_and_time_types">7.3.3 
  Date and Time Types</A>. A <CODE>TIMESTAMP</CODE> is always stored in 4 bytes. 
  The <CODE>M</CODE> argument only affects how the <CODE>TIMESTAMP</CODE> column 
  is displayed. Note that <CODE>TIMESTAMP(X)</CODE> columns where X is 8 or 14 
  are reported to be numbers while other <CODE>TIMESTAMP(X)</CODE> columns are 
  reported to be strings. This is just to ensure that one can reliably dump and 
  restore the table with these types! See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#DATETIME">7.3.3.2 
  The <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, and <CODE>TIMESTAMP</CODE> 
  Types</A>. <A name=IDX535></A>
  <DT><CODE>TIME</CODE> 
  <DD>A time. The range is <CODE>'-838:59:59'</CODE> to 
  <CODE>'838:59:59'</CODE>. <STRONG>MySQL</STRONG> displays <CODE>TIME</CODE> 
  values in <CODE>'HH:MM:SS'</CODE> format, but allows you to assign values to 
  <CODE>TIME</CODE> columns using either strings or numbers. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#TIME">7.3.3.3 
  The <CODE>TIME</CODE> Type</A>. <A name=IDX536></A>
  <DT><CODE>YEAR[(2|4)]</CODE> 
  <DD>A year in 2- or 4-digit format (default is 4-digit). The allowable values 
  are <CODE>1901</CODE> to <CODE>2155</CODE>, <CODE>0000</CODE> in the 4-digit 
  year format, and 1970-2069 if you use the 2-digit format (70-69). 
  <STRONG>MySQL</STRONG> displays <CODE>YEAR</CODE> values in <CODE>YYYY</CODE> 
  format, but allows you to assign values to <CODE>YEAR</CODE> columns using 
  either strings or numbers. (The <CODE>YEAR</CODE> type is new in 
  <STRONG>MySQL</STRONG> Version 3.22.). See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#YEAR">7.3.3.4 
  The <CODE>YEAR</CODE> Type</A>. <A name=IDX537></A><A name=IDX538></A><A 
  name=IDX539></A><A name=IDX540></A>
  <DT><CODE>[NATIONAL] CHAR(M) [BINARY]</CODE> 
  <DD>A fixed-length string that is always right-padded with spaces to the 
  specified length when stored. The range of <CODE>M</CODE> is 1 to 255 
  characters. Trailing spaces are removed when the value is retrieved. 
  <CODE>CHAR</CODE> values are sorted and compared in case-insensitive fashion 
  according to the default character set unless the <CODE>BINARY</CODE> keyword 
  is given. <CODE>NATIONAL CHAR</CODE> (short form <CODE>NCHAR</CODE>) is the 
  ANSI SQL way to define that a CHAR column should use the default CHARACTER 
  set. This is the default in <STRONG>MySQL</STRONG>. <CODE>CHAR</CODE> is a 
  shorthand for <CODE>CHARACTER</CODE>. <STRONG>MySQL</STRONG> allows you to 
  create a column of type <CODE>CHAR(0)</CODE>. This is mainly useful when you 
  have to be compliant with some old applications that depend on the existence 
  of a column but that do not actually use the value. This is also quite nice 
  when you need a column that only can take 2 values: A <CODE>CHAR(0)</CODE>, 
  that is not defined as <CODE>NOT NULL</CODE>, will only occupy one bit and can 
  only take 2 values: <CODE>NULL</CODE> or <CODE>""</CODE>. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#CHAR">7.3.4.1 
  The <CODE>CHAR</CODE> and <CODE>VARCHAR</CODE> Types</A>. <A 
  name=IDX541></A><A name=IDX542></A><A name=IDX543></A>
  <DT><CODE>[NATIONAL] VARCHAR(M) [BINARY]</CODE> 
  <DD>A variable-length string. <STRONG>NOTE:</STRONG> Trailing spaces are 
  removed when the value is stored (this differs from the ANSI SQL 
  specification). The range of <CODE>M</CODE> is 1 to 255 characters. 
  <CODE>VARCHAR</CODE> values are sorted and compared in case-insensitive 
  fashion unless the <CODE>BINARY</CODE> keyword is given. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Silent_column_changes">7.7.1 
  Silent Column Specification Changes</A>. <CODE>VARCHAR</CODE> is a shorthand 
  for <CODE>CHARACTER VARYING</CODE>. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#CHAR">7.3.4.1 
  The <CODE>CHAR</CODE> and <CODE>VARCHAR</CODE> Types</A>. <A 
  name=IDX544></A><A name=IDX545></A>
  <DT><CODE>TINYBLOB</CODE> 
  <DD>
  <DT><CODE>TINYTEXT</CODE> 
  <DD>A <CODE>BLOB</CODE> or <CODE>TEXT</CODE> column with a maximum length of 
  255 (2^8 - 1) characters. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Silent_column_changes">7.7.1 
  Silent Column Specification Changes</A>. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#BLOB">7.3.4.2 
  The <CODE>BLOB</CODE> and <CODE>TEXT</CODE> Types</A>. <A name=IDX546></A><A 
  name=IDX547></A>
  <DT><CODE>BLOB</CODE> 
  <DD>
  <DT><CODE>TEXT</CODE> 
  <DD>A <CODE>BLOB</CODE> or <CODE>TEXT</CODE> column with a maximum length of 
  65535 (2^16 - 1) characters. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Silent_column_changes">7.7.1 
  Silent Column Specification Changes</A>. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#BLOB">7.3.4.2 
  The <CODE>BLOB</CODE> and <CODE>TEXT</CODE> Types</A>. <A name=IDX548></A><A 
  name=IDX549></A>
  <DT><CODE>MEDIUMBLOB</CODE> 
  <DD>
  <DT><CODE>MEDIUMTEXT</CODE> 
  <DD>A <CODE>BLOB</CODE> or <CODE>TEXT</CODE> column with a maximum length of 
  16777215 (2^24 - 1) characters. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Silent_column_changes">7.7.1 
  Silent Column Specification Changes</A>. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#BLOB">7.3.4.2 
  The <CODE>BLOB</CODE> and <CODE>TEXT</CODE> Types</A>. <A name=IDX550></A><A 
  name=IDX551></A>
  <DT><CODE>LONGBLOB</CODE> 
  <DD>
  <DT><CODE>LONGTEXT</CODE> 
  <DD>A <CODE>BLOB</CODE> or <CODE>TEXT</CODE> column with a maximum length of 
  4294967295 (2^32 - 1) characters. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Silent_column_changes">7.7.1 
  Silent Column Specification Changes</A>. Note that because the server/client 
  protocol and MyISAM tables has currently a limit of 16M per communication 
  packet / table row, you can't yet use this the whole range of this type. See 
  section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#BLOB">7.3.4.2 
  The <CODE>BLOB</CODE> and <CODE>TEXT</CODE> Types</A>. <A name=IDX552></A>
  <DT><CODE>ENUM('value1','value2',...)</CODE> 
  <DD>An enumeration. A string object that can have only one value, chosen from 
  the list of values <CODE>'value1'</CODE>, <CODE>'value2'</CODE>, 
  <CODE>...</CODE>, <CODE>NULL</CODE> or the special <CODE>""</CODE> error 
  value. An <CODE>ENUM</CODE> can have a maximum of 65535 distinct values. See 
  section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#ENUM">7.3.4.3 
  The <CODE>ENUM</CODE> Type</A>. <A name=IDX553></A>
  <DT><CODE>SET('value1','value2',...)</CODE> 
  <DD>A set. A string object that can have zero or more values, each of which 
  must be chosen from the list of values <CODE>'value1'</CODE>, 
  <CODE>'value2'</CODE>, <CODE>...</CODE> A <CODE>SET</CODE> can have a maximum 
  of 64 members. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#SET">7.3.4.4 
  The <CODE>SET</CODE> Type</A>. </DD></DL>
<P><A name=IDX554></A><A name=IDX555></A></P>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Storage_requirements" 
name=Storage_requirements>7.3.1 Column Type Storage Requirements</A></H3>
<P>The storage requirements for each of the column types supported by 
<STRONG>MySQL</STRONG> are listed below by category. </P>
<P><A name=IDX556></A><A name=IDX557></A></P>
<H4>7.3.1.1 Storage requirements for numeric types</H4>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column type</STRONG> </TD>
    <TD><STRONG>Storage required</STRONG> </TD>
  <TR>
    <TD><CODE>TINYINT</CODE> </TD>
    <TD>1 byte </TD>
  <TR>
    <TD><CODE>SMALLINT</CODE> </TD>
    <TD>2 bytes </TD>
  <TR>
    <TD><CODE>MEDIUMINT</CODE> </TD>
    <TD>3 bytes </TD>
  <TR>
    <TD><CODE>INT</CODE> </TD>
    <TD>4 bytes </TD>
  <TR>
    <TD><CODE>INTEGER</CODE> </TD>
    <TD>4 bytes </TD>
  <TR>
    <TD><CODE>BIGINT</CODE> </TD>
    <TD>8 bytes </TD>
  <TR>
    <TD><CODE>FLOAT(X)</CODE> </TD>
    <TD>4 if X &lt;= 24 or 8 if 25 &lt;= X &lt;= 53 </TD>
  <TR>
    <TD><CODE>FLOAT</CODE> </TD>
    <TD>4 bytes </TD>
  <TR>
    <TD><CODE>DOUBLE</CODE> </TD>
    <TD>8 bytes </TD>
  <TR>
    <TD><CODE>DOUBLE PRECISION</CODE> </TD>
    <TD>8 bytes </TD>
  <TR>
    <TD><CODE>REAL</CODE> </TD>
    <TD>8 bytes </TD>
  <TR>
    <TD><CODE>DECIMAL(M,D)</CODE> </TD>
    <TD><CODE>M+2</CODE> bytes if D &gt; 0, <CODE>M+1</CODE> bytes if D = 0 
      (<CODE>D</CODE>+2, if <CODE>M &lt; D</CODE>) </TD>
  <TR>
    <TD><CODE>NUMERIC(M,D)</CODE> </TD>
    <TD><CODE>M+2</CODE> bytes if D &gt; 0, <CODE>M+1</CODE> bytes if D = 0 
      (<CODE>D</CODE>+2, if <CODE>M &lt; D</CODE>) </TD></TR></TBODY></TABLE>
<P><A name=IDX558></A><A name=IDX559></A><A name=IDX560></A><A 
name=IDX561></A></P>
<H4>7.3.1.2 Storage requirements for date and time types</H4>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column type</STRONG> </TD>
    <TD><STRONG>Storage required</STRONG> </TD>
  <TR>
    <TD><CODE>DATE</CODE> </TD>
    <TD>3 bytes </TD>
  <TR>
    <TD><CODE>DATETIME</CODE> </TD>
    <TD>8 bytes </TD>
  <TR>
    <TD><CODE>TIMESTAMP</CODE> </TD>
    <TD>4 bytes </TD>
  <TR>
    <TD><CODE>TIME</CODE> </TD>
    <TD>3 bytes </TD>
  <TR>
    <TD><CODE>YEAR</CODE> </TD>
    <TD>1 byte </TD></TR></TBODY></TABLE>
<H4>7.3.1.3 Storage requirements for string types</H4>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column type</STRONG> </TD>
    <TD><STRONG>Storage required</STRONG> </TD>
  <TR>
    <TD><CODE>CHAR(M)</CODE> </TD>
    <TD><CODE>M</CODE> bytes, <CODE>1 &lt;= M &lt;= 255</CODE> </TD>
  <TR>
    <TD><CODE>VARCHAR(M)</CODE> </TD>
    <TD><CODE>L</CODE>+1 bytes, where <CODE>L &lt;= M</CODE> and <CODE>1 &lt;= 
      M &lt;= 255</CODE> </TD>
  <TR>
    <TD><CODE>TINYBLOB</CODE>, <CODE>TINYTEXT</CODE> </TD>
    <TD><CODE>L</CODE>+1 bytes, where <CODE>L</CODE> &lt; 2^8 </TD>
  <TR>
    <TD><CODE>BLOB</CODE>, <CODE>TEXT</CODE> </TD>
    <TD><CODE>L</CODE>+2 bytes, where <CODE>L</CODE> &lt; 2^16 </TD>
  <TR>
    <TD><CODE>MEDIUMBLOB</CODE>, <CODE>MEDIUMTEXT</CODE> </TD>
    <TD><CODE>L</CODE>+3 bytes, where <CODE>L</CODE> &lt; 2^24 </TD>
  <TR>
    <TD><CODE>LONGBLOB</CODE>, <CODE>LONGTEXT</CODE> </TD>
    <TD><CODE>L</CODE>+4 bytes, where <CODE>L</CODE> &lt; 2^32 </TD>
  <TR>
    <TD><CODE>ENUM('value1','value2',...)</CODE> </TD>
    <TD>1 or 2 bytes, depending on the number of enumeration values (65535 
      values maximum) </TD>
  <TR>
    <TD><CODE>SET('value1','value2',...)</CODE> </TD>
    <TD>1, 2, 3, 4 or 8 bytes, depending on the number of set members (64 
      members maximum) </TD></TR></TBODY></TABLE>
<P><A name=IDX562></A><A name=IDX563></A><A name=IDX564></A><CODE>VARCHAR</CODE> 
and the <CODE>BLOB</CODE> and <CODE>TEXT</CODE> types are variable-length types, 
for which the storage requirements depend on the actual length of column values 
(represented by <CODE>L</CODE> in the preceding table), rather than on the 
type's maximum possible size. For example, a <CODE>VARCHAR(10)</CODE> column can 
hold a string with a maximum length of 10 characters. The actual storage 
required is the length of the string (<CODE>L</CODE>), plus 1 byte to record the 
length of the string. For the string <CODE>'abcd'</CODE>, <CODE>L</CODE> is 4 
and the storage requirement is 5 bytes. </P>
<P>The <CODE>BLOB</CODE> and <CODE>TEXT</CODE> types require 1, 2, 3, or 4 bytes 
to record the length of the column value, depending on the maximum possible 
length of the type. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#BLOB">7.3.4.2 The 
<CODE>BLOB</CODE> and <CODE>TEXT</CODE> Types</A>. </P>
<P>If a table includes any variable-length column types, the record format will 
also be variable-length. Note that when a table is created, 
<STRONG>MySQL</STRONG> may, under certain conditions, change a column from a 
variable-length type to a fixed-length type, or vice-versa. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Silent_column_changes">7.7.1 
Silent Column Specification Changes</A>. </P>
<P><A name=IDX565></A>The size of an <CODE>ENUM</CODE> object is determined by 
the number of different enumeration values. One byte is used for enumerations 
with up to 255 possible values. Two bytes are used for enumerations with up to 
65535 values. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#ENUM">7.3.4.3 The 
<CODE>ENUM</CODE> Type</A>. </P>
<P><A name=IDX566></A>The size of a <CODE>SET</CODE> object is determined by the 
number of different set members. If the set size is <CODE>N</CODE>, the object 
occupies <CODE>(N+7)/8</CODE> bytes, rounded up to 1, 2, 3, 4, or 8 bytes. A 
<CODE>SET</CODE> can have a maximum of 64 members. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#SET">7.3.4.4 The 
<CODE>SET</CODE> Type</A>. </P>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Numeric_types" 
name=Numeric_types>7.3.2 Numeric Types</A></H3>
<P><STRONG>MySQL</STRONG> supports all of the ANSI/ISO SQL92 numeric types. 
These types include the exact numeric data types (<CODE>NUMERIC</CODE>, 
<CODE>DECIMAL</CODE>, <CODE>INTEGER</CODE>, and <CODE>SMALLINT</CODE>), as well 
as the approximate numeric data types (<CODE>FLOAT</CODE>, <CODE>REAL</CODE>, 
and <CODE>DOUBLE PRECISION</CODE>). The keyword <CODE>INT</CODE> is a synonym 
for <CODE>INTEGER</CODE>, and the keyword <CODE>DEC</CODE> is a synonym for 
<CODE>DECIMAL</CODE>. </P>
<P>The <CODE>NUMERIC</CODE> and <CODE>DECIMAL</CODE> types are implemented as 
the same type by <STRONG>MySQL</STRONG>, as permitted by the SQL92 standard. 
They are used for values for which it is important to preserve exact precision, 
for example with monetary data. When declaring a column of one of these types 
the precision and scale can be (and usually is) specified; for example: </P><PRE>    salary DECIMAL(9,2)
</PRE>
<P>In this example, <CODE>9</CODE> (<CODE>precision</CODE>) represents the 
number of significant decimal digits that will be stored for values, and 
<CODE>2</CODE> (<CODE>scale</CODE>) represents the number of digits that will be 
stored following the decimal point. In this case, therefore, the range of values 
that can be stored in the <CODE>salary</CODE> column is from 
<CODE>-9999999.99</CODE> to <CODE>9999999.99</CODE>. In ANSI/ISO SQL92, the 
syntax <CODE>DECIMAL(p)</CODE> is equivalent to <CODE>DECIMAL(p,0)</CODE>. 
Similarly, the syntax <CODE>DECIMAL</CODE> is equivalent to 
<CODE>DECIMAL(p,0)</CODE>, where the implementation is allowed to decide the 
value of <CODE>p</CODE>. <STRONG>MySQL</STRONG> does not currently support 
either of these variant forms of the <CODE>DECIMAL</CODE>/<CODE>NUMERIC</CODE> 
data types. This is not generally a serious problem, as the principal benefits 
of these types derive from the ability to control both precision and scale 
explicitly. </P>
<P><CODE>DECIMAL</CODE> and <CODE>NUMERIC</CODE> values are stored as strings, 
rather than as binary floating-point numbers, in order to preserve the decimal 
precision of those values. One character is used for each digit of the value, 
the decimal point (if <CODE>scale</CODE> &gt; 0), and the <SAMP>`-'</SAMP> sign 
(for negative numbers). If <CODE>scale</CODE> is 0, <CODE>DECIMAL</CODE> and 
<CODE>NUMERIC</CODE> values contain no decimal point or fractional part. </P>
<P>The maximum range of <CODE>DECIMAL</CODE> and <CODE>NUMERIC</CODE> values is 
the same as for <CODE>DOUBLE</CODE>, but the actual range for a given 
<CODE>DECIMAL</CODE> or <CODE>NUMERIC</CODE> column can be constrained by the 
<CODE>precision</CODE> or <CODE>scale</CODE> for a given column. When such a 
column is assigned a value with more digits following the decimal point than are 
allowed by the specified <CODE>scale</CODE>, the value is rounded to that 
<CODE>scale</CODE>. When a <CODE>DECIMAL</CODE> or <CODE>NUMERIC</CODE> column 
is assigned a value whose magnitude exceeds the range implied by the specified 
(or defaulted) <CODE>precision</CODE> and <CODE>scale</CODE>, 
<STRONG>MySQL</STRONG> stores the value representing the corresponding end point 
of that range. </P>
<P>As an extension to the ANSI/ISO SQL92 standard, <STRONG>MySQL</STRONG> also 
supports the integral types <CODE>TINYINT</CODE>, <CODE>MEDIUMINT</CODE>, and 
<CODE>BIGINT</CODE> as listed in the tables above. Another extension is 
supported by <STRONG>MySQL</STRONG> for optionally specifying the display width 
of an integral value in parentheses following the base keyword for the type (for 
example, <CODE>INT(4)</CODE>). This optional width specification is used to 
left-pad the display of values whose width is less than the width specified for 
the column, but does not constrain the range of values that can be stored in the 
column, nor the number of digits that will be displayed for values whose width 
exceeds that specified for the column. When used in conjunction with the 
optional extension attribute <CODE>ZEROFILL</CODE>, the default padding of 
spaces is replaced with zeroes. For example, for a column declared as 
<CODE>INT(5) ZEROFILL</CODE>, a value of <CODE>4</CODE> is retrieved as 
<CODE>00004</CODE>. Note that if you store larger values than the display width 
in an integer column, you may experience problems when <STRONG>MySQL</STRONG> 
generates temporary tables for some complicated joins, as in these cases 
<STRONG>MySQL</STRONG> trusts that the data did fit into the original column 
width. </P>
<P>All integral types can have an optional (non-standard) attribute 
<CODE>UNSIGNED</CODE>. Unsigned values can be used when you want to allow only 
positive numbers in a column and you need a little bigger numeric range for the 
column. </P>
<P>The <CODE>FLOAT</CODE> type is used to represent approximate numeric data 
types. The ANSI/ISO SQL92 standard allows an optional specification of the 
precision (but not the range of the exponent) in bits following the keyword 
<CODE>FLOAT</CODE> in parentheses. The <STRONG>MySQL</STRONG> implementation 
also supports this optional precision specification. When the keyword 
<CODE>FLOAT</CODE> is used for a column type without a precision specification, 
<STRONG>MySQL</STRONG> uses four bytes to store the values. A variant syntax is 
also supported, with two numbers given in parentheses following the 
<CODE>FLOAT</CODE> keyword. With this option, the first number continues to 
represent the storage requirements for the value in bytes, and the second number 
specifies the number of digits to be stored and displayed following the decimal 
point (as with <CODE>DECIMAL</CODE> and <CODE>NUMERIC</CODE>). When 
<STRONG>MySQL</STRONG> is asked to store a number for such a column with more 
decimal digits following the decimal point than specified for the column, the 
value is rounded to eliminate the extra digits when the value is stored. </P>
<P>The <CODE>REAL</CODE> and <CODE>DOUBLE PRECISION</CODE> types do not accept 
precision specifications. As an extension to the ANSI/ISO SQL92 standard, 
<STRONG>MySQL</STRONG> recognizes <CODE>DOUBLE</CODE> as a synonym for the 
<CODE>DOUBLE PRECISION</CODE> type. In contrast with the standard's requirement 
that the precision for <CODE>REAL</CODE> be smaller than that used for 
<CODE>DOUBLE PRECISION</CODE>, <STRONG>MySQL</STRONG> implements both as 8-byte 
double-precision floating-point values (when not running in ``ANSI mode''). For 
maximum portability, code requiring storage of approximate numeric data values 
should use <CODE>FLOAT</CODE> or <CODE>DOUBLE PRECISION</CODE> with no 
specification of precision or number of decimal points. </P>
<P>When asked to store a value in a numeric column that is outside the column 
type's allowable range, <STRONG>MySQL</STRONG> clips the value to the 
appropriate endpoint of the range and stores the resulting value instead. </P>
<P>For example, the range of an <CODE>INT</CODE> column is 
<CODE>-2147483648</CODE> to <CODE>2147483647</CODE>. If you try to insert 
<CODE>-9999999999</CODE> into an <CODE>INT</CODE> column, the value is clipped 
to the lower endpoint of the range, and <CODE>-2147483648</CODE> is stored 
instead. Similarly, if you try to insert <CODE>9999999999</CODE>, 
<CODE>2147483647</CODE> is stored instead. </P>
<P>If the <CODE>INT</CODE> column is <CODE>UNSIGNED</CODE>, the size of the 
column's range is the same but its endpoints shift up to <CODE>0</CODE> and 
<CODE>4294967295</CODE>. If you try to store <CODE>-9999999999</CODE> and 
<CODE>9999999999</CODE>, the values stored in the column become <CODE>0</CODE> 
and <CODE>4294967296</CODE>. </P>
<P>Conversions that occur due to clipping are reported as ``warnings'' for 
<CODE>ALTER TABLE</CODE>, <CODE>LOAD DATA INFILE</CODE>, <CODE>UPDATE</CODE>, 
and multi-row <CODE>INSERT</CODE> statements. </P>
<P><A name=IDX567></A><A name=IDX568></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Date_and_time_types" 
name=Date_and_time_types>7.3.3 Date and Time Types</A></H3>
<P>The date and time types are <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, 
<CODE>TIMESTAMP</CODE>, <CODE>TIME</CODE>, and <CODE>YEAR</CODE>. Each of these 
has a range of legal values, as well as a ``zero'' value that is used when you 
specify a really illegal value. Note that <STRONG>MySQL</STRONG> allows you to 
store certain 'not strictly' legal date values, for example 
<CODE>1999-11-31</CODE>. The reason for this is that we think it's the 
responsibility of the application to handle date checking, not the SQL servers. 
To make the date checking 'fast', <STRONG>MySQL</STRONG> only checks that the 
month is in the range of 0-12 and the day is in the range of 0-31. The above 
ranges are defined this way because <STRONG>MySQL</STRONG> allows you to store, 
in a <CODE>DATE</CODE> or <CODE>DATETIME</CODE> column, dates where the day or 
month-day is zero. This is extremely useful for applications that need to store 
a birth-date for which you don't know the exact date. In this case you simply 
store the date like <CODE>1999-00-00</CODE> or <CODE>1999-01-00</CODE>. (You 
cannot expect to get a correct value from functions like <CODE>DATE_SUB()</CODE> 
or <CODE>DATE_ADD</CODE> for dates like these.) </P>
<P>Here are some general considerations to keep in mind when working with date 
and time types: </P>
<UL>
  <LI><STRONG>MySQL</STRONG> retrieves values for a given date or time type in a 
  standard format, but it attempts to interpret a variety of formats for values 
  that you supply (for example, when you specify a value to be assigned to or 
  compared to a date or time type). Nevertheless, only the formats described in 
  the following sections are supported. It is expected that you will supply 
  legal values, and unpredictable results may occur if you use values in other 
  formats. 
  <LI>Although <STRONG>MySQL</STRONG> tries to interpret values in several 
  formats, it always expects the year part of date values to be leftmost. Dates 
  must be given in year-month-day order (for example, <CODE>'98-09-04'</CODE>), 
  rather than in the month-day-year or day-month-year orders commonly used 
  elsewhere (for example, <CODE>'09-04-98'</CODE>, <CODE>'04-09-98'</CODE>). 
  <LI><STRONG>MySQL</STRONG> automatically converts a date or time type value to 
  a number if the value is used in a numeric context, and vice versa. 
  <LI>When <STRONG>MySQL</STRONG> encounters a value for a date or time type 
  that is out of range or otherwise illegal for the type (see the start of this 
  section), it converts the value to the ``zero'' value for that type. (The 
  exception is that out-of-range <CODE>TIME</CODE> values are clipped to the 
  appropriate endpoint of the <CODE>TIME</CODE> range.) The table below shows 
  the format of the ``zero'' value for each type: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD><STRONG>Column type</STRONG> </TD>
      <TD><STRONG>``Zero'' value</STRONG> </TD>
    <TR>
      <TD><CODE>DATETIME</CODE> </TD>
      <TD><CODE>'0000-00-00 00:00:00'</CODE> </TD>
    <TR>
      <TD><CODE>DATE</CODE> </TD>
      <TD><CODE>'0000-00-00'</CODE> </TD>
    <TR>
      <TD><CODE>TIMESTAMP</CODE> </TD>
      <TD><CODE>00000000000000</CODE> (length depends on display size) </TD>
    <TR>
      <TD><CODE>TIME</CODE> </TD>
      <TD><CODE>'00:00:00'</CODE> </TD>
    <TR>
      <TD><CODE>YEAR</CODE> </TD>
      <TD><CODE>0000</CODE> </TD></TR></TBODY></TABLE>
  <LI>The ``zero'' values are special, but you can store or refer to them 
  explicitly using the values shown in the table. You can also do this using the 
  values <CODE>'0'</CODE> or <CODE>0</CODE>, which are easier to write. 
  <LI>``Zero'' date or time values used through <STRONG>MyODBC</STRONG> are 
  converted automatically to <CODE>NULL</CODE> in <STRONG>MyODBC</STRONG> 
  Version 2.50.12 and above, because ODBC can't handle such values. </LI></UL>
<P><A name=IDX569></A><A name=IDX570></A>
<H4><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Y2K_issues" 
name=Y2K_issues>7.3.3.1 Y2K Issues and Date Types</A></H4>
<P><STRONG>MySQL</STRONG> itself is Y2K-safe (see section <A 
href="file:///D:/work/mysql/manual-split/manual_Introduction.html#Year_2000_compliance">1.8 
Year 2000 Compliance</A>), but input values presented to <STRONG>MySQL</STRONG> 
may not be. Any input containing 2-digit year values is ambiguous, because the 
century is unknown. Such values must be interpreted into 4-digit form because 
<STRONG>MySQL</STRONG> stores years internally using four digits. </P>
<P>For <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, <CODE>TIMESTAMP</CODE>, and 
<CODE>YEAR</CODE> types, <STRONG>MySQL</STRONG> interprets dates with ambiguous 
year values using the following rules: </P>
<UL>
  <LI>Year values in the range <CODE>00-69</CODE> are converted to 
  <CODE>2000-2069</CODE>. 
  <LI>Year values in the range <CODE>70-99</CODE> are converted to 
  <CODE>1970-1999</CODE>. </LI></UL>
<P>Remember that these rules provide only reasonable guesses as to what your 
data mean. If the heuristics used by <STRONG>MySQL</STRONG> don't produce the 
correct values, you should provide unambiguous input containing 4-digit year 
values. </P>
<P><CODE>ORDER BY</CODE> will sort 2-digit <CODE>YEAR/DATE/DATETIME</CODE> types 
properly. </P>
<P>Note also that some functions like <CODE>MIN()</CODE> and <CODE>MAX()</CODE> 
will convert a <CODE>TIMESTAMP/DATE</CODE> to a number. This means that a 
timestamp with a 2-digit year will not work properly with these functions. The 
fix in this case is to convert the <CODE>TIMESTAMP/DATE</CODE> to 4-digit year 
format or use something like <CODE>MIN(DATE_ADD(timestamp,INTERVAL 0 
DAYS))</CODE>. </P>
<P><A name=IDX571></A><A name=IDX572></A><A name=IDX573></A>
<H4><A href="file:///D:/work/mysql/manual-split/manual_toc.html#DATETIME" 
name=DATETIME>7.3.3.2 The <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, and 
<CODE>TIMESTAMP</CODE> Types</A></H4>
<P>The <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, and <CODE>TIMESTAMP</CODE> 
types are related. This section describes their characteristics, how they are 
similar, and how they differ. </P>
<P>The <CODE>DATETIME</CODE> type is used when you need values that contain both 
date and time information. <STRONG>MySQL</STRONG> retrieves and displays 
<CODE>DATETIME</CODE> values in <CODE>'YYYY-MM-DD HH:MM:SS'</CODE> format. The 
supported range is <CODE>'1000-01-01 00:00:00'</CODE> to <CODE>'9999-12-31 
23:59:59'</CODE>. (``Supported'' means that although earlier values might work, 
there is no guarantee that they will.) </P>
<P>The <CODE>DATE</CODE> type is used when you need only a date value, without a 
time part. <STRONG>MySQL</STRONG> retrieves and displays <CODE>DATE</CODE> 
values in <CODE>'YYYY-MM-DD'</CODE> format. The supported range is 
<CODE>'1000-01-01'</CODE> to <CODE>'9999-12-31'</CODE>. </P>
<P>The <CODE>TIMESTAMP</CODE> column type provides a type that you can use to 
automatically mark <CODE>INSERT</CODE> or <CODE>UPDATE</CODE> operations with 
the current date and time. If you have multiple <CODE>TIMESTAMP</CODE> columns, 
only the first one is updated automatically. </P>
<P>Automatic updating of the first <CODE>TIMESTAMP</CODE> column occurs under 
any of the following conditions: </P>
<UL>
  <LI>The column is not specified explicitly in an <CODE>INSERT</CODE> or 
  <CODE>LOAD DATA INFILE</CODE> statement. 
  <LI>The column is not specified explicitly in an <CODE>UPDATE</CODE> statement 
  and some other column changes value. (Note that an <CODE>UPDATE</CODE> that 
  sets a column to the value it already has will not cause the 
  <CODE>TIMESTAMP</CODE> column to be updated, because if you set a column to 
  its current value, <STRONG>MySQL</STRONG> ignores the update for efficiency.) 
  <LI>You explicitly set the <CODE>TIMESTAMP</CODE> column to <CODE>NULL</CODE>. 
  </LI></UL>
<P><CODE>TIMESTAMP</CODE> columns other than the first may also be set to the 
current date and time. Just set the column to <CODE>NULL</CODE> or to 
<CODE>NOW()</CODE>. </P>
<P>You can set any <CODE>TIMESTAMP</CODE> column to a value different than the 
current date and time by setting it explicitly to the desired value. This is 
true even for the first <CODE>TIMESTAMP</CODE> column. You can use this property 
if, for example, you want a <CODE>TIMESTAMP</CODE> to be set to the current date 
and time when you create a row, but not to be changed whenever the row is 
updated later: </P>
<UL>
  <LI>Let <STRONG>MySQL</STRONG> set the column when the row is created. This 
  will initialize it to the current date and time. 
  <LI>When you perform subsequent updates to other columns in the row, set the 
  <CODE>TIMESTAMP</CODE> column explicitly to its current value. </LI></UL>
<P>On the other hand, you may find it just as easy to use a 
<CODE>DATETIME</CODE> column that you initialize to <CODE>NOW()</CODE> when the 
row is created and leave alone for subsequent updates. </P>
<P><CODE>TIMESTAMP</CODE> values may range from the beginning of 1970 to 
sometime in the year 2037, with a resolution of one second. Values are displayed 
as numbers. </P>
<P>The format in which <STRONG>MySQL</STRONG> retrieves and displays 
<CODE>TIMESTAMP</CODE> values depends on the display size, as illustrated by the 
table below. The `full' <CODE>TIMESTAMP</CODE> format is 14 digits, but 
<CODE>TIMESTAMP</CODE> columns may be created with shorter display sizes: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column type</STRONG> </TD>
    <TD><STRONG>Display format</STRONG> </TD>
  <TR>
    <TD><CODE>TIMESTAMP(14)</CODE> </TD>
    <TD><CODE>YYYYMMDDHHMMSS</CODE> </TD>
  <TR>
    <TD><CODE>TIMESTAMP(12)</CODE> </TD>
    <TD><CODE>YYMMDDHHMMSS</CODE> </TD>
  <TR>
    <TD><CODE>TIMESTAMP(10)</CODE> </TD>
    <TD><CODE>YYMMDDHHMM</CODE> </TD>
  <TR>
    <TD><CODE>TIMESTAMP(8)</CODE> </TD>
    <TD><CODE>YYYYMMDD</CODE> </TD>
  <TR>
    <TD><CODE>TIMESTAMP(6)</CODE> </TD>
    <TD><CODE>YYMMDD</CODE> </TD>
  <TR>
    <TD><CODE>TIMESTAMP(4)</CODE> </TD>
    <TD><CODE>YYMM</CODE> </TD>
  <TR>
    <TD><CODE>TIMESTAMP(2)</CODE> </TD>
    <TD><CODE>YY</CODE> </TD></TR></TBODY></TABLE>
<P>All <CODE>TIMESTAMP</CODE> columns have the same storage size, regardless of 
display size. The most common display sizes are 6, 8, 12, and 14. You can 
specify an arbitrary display size at table creation time, but values of 0 or 
greater than 14 are coerced to 14. Odd-valued sizes in the range from 1 to 13 
are coerced to the next higher even number. </P>
<P>You can specify <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, and 
<CODE>TIMESTAMP</CODE> values using any of a common set of formats: </P>
<UL>
  <LI>As a string in either <CODE>'YYYY-MM-DD HH:MM:SS'</CODE> or 
  <CODE>'YY-MM-DD HH:MM:SS'</CODE> format. A ``relaxed'' syntax is allowed--any 
  punctuation character may be used as the delimiter between date parts or time 
  parts. For example, <CODE>'98-12-31 11:30:45'</CODE>, <CODE>'98.12.31 
  11+30+45'</CODE>, <CODE>'98/12/31 11*30*45'</CODE>, and <CODE>'98@12@31 
  11^30^45'</CODE> are equivalent. 
  <LI>As a string in either <CODE>'YYYY-MM-DD'</CODE> or <CODE>'YY-MM-DD'</CODE> 
  format. A ``relaxed'' syntax is allowed here, too. For example, 
  <CODE>'98-12-31'</CODE>, <CODE>'98.12.31'</CODE>, <CODE>'98/12/31'</CODE>, and 
  <CODE>'98@12@31'</CODE> are equivalent. 
  <LI>As a string with no delimiters in either <CODE>'YYYYMMDDHHMMSS'</CODE> or 
  <CODE>'YYMMDDHHMMSS'</CODE> format, provided that the string makes sense as a 
  date. For example, <CODE>'19970523091528'</CODE> and 
  <CODE>'970523091528'</CODE> are interpreted as <CODE>'1997-05-23 
  09:15:28'</CODE>, but <CODE>'971122129015'</CODE> is illegal (it has a 
  nonsensical minute part) and becomes <CODE>'0000-00-00 00:00:00'</CODE>. 
  <LI>As a string with no delimiters in either <CODE>'YYYYMMDD'</CODE> or 
  <CODE>'YYMMDD'</CODE> format, provided that the string makes sense as a date. 
  For example, <CODE>'19970523'</CODE> and <CODE>'970523'</CODE> are interpreted 
  as <CODE>'1997-05-23'</CODE>, but <CODE>'971332'</CODE> is illegal (it has 
  nonsensical month and day parts) and becomes <CODE>'0000-00-00'</CODE>. 
  <LI>As a number in either <CODE>YYYYMMDDHHMMSS</CODE> or 
  <CODE>YYMMDDHHMMSS</CODE> format, provided that the number makes sense as a 
  date. For example, <CODE>19830905132800</CODE> and <CODE>830905132800</CODE> 
  are interpreted as <CODE>'1983-09-05 13:28:00'</CODE>. 
  <LI>As a number in either <CODE>YYYYMMDD</CODE> or <CODE>YYMMDD</CODE> format, 
  provided that the number makes sense as a date. For example, 
  <CODE>19830905</CODE> and <CODE>830905</CODE> are interpreted as 
  <CODE>'1983-09-05'</CODE>. 
  <LI>As the result of a function that returns a value that is acceptable in a 
  <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, or <CODE>TIMESTAMP</CODE> context, 
  such as <CODE>NOW()</CODE> or <CODE>CURRENT_DATE</CODE>. </LI></UL>
<P>Illegal <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, or <CODE>TIMESTAMP</CODE> 
values are converted to the ``zero'' value of the appropriate type 
(<CODE>'0000-00-00 00:00:00'</CODE>, <CODE>'0000-00-00'</CODE>, or 
<CODE>00000000000000</CODE>). </P>
<P>For values specified as strings that include date part delimiters, it is not 
necessary to specify two digits for month or day values that are less than 
<CODE>10</CODE>. <CODE>'1979-6-9'</CODE> is the same as 
<CODE>'1979-06-09'</CODE>. Similarly, for values specified as strings that 
include time part delimiters, it is not necessary to specify two digits for 
hour, month, or second values that are less than <CODE>10</CODE>. 
<CODE>'1979-10-30 1:2:3'</CODE> is the same as <CODE>'1979-10-30 
01:02:03'</CODE>. </P>
<P>Values specified as numbers should be 6, 8, 12, or 14 digits long. If the 
number is 8 or 14 digits long, it is assumed to be in <CODE>YYYYMMDD</CODE> or 
<CODE>YYYYMMDDHHMMSS</CODE> format and that the year is given by the first 4 
digits. If the number is 6 or 12 digits long, it is assumed to be in 
<CODE>YYMMDD</CODE> or <CODE>YYMMDDHHMMSS</CODE> format and that the year is 
given by the first 2 digits. Numbers that are not one of these lengths are 
interpreted as though padded with leading zeros to the closest length. </P>
<P><A name=IDX574></A><A name=IDX575></A>Values specified as non-delimited 
strings are interpreted using their length as given. If the string is 8 or 14 
characters long, the year is assumed to be given by the first 4 characters. 
Otherwise the year is assumed to be given by the first 2 characters. The string 
is interpreted from left to right to find year, month, day, hour, minute, and 
second values, for as many parts as are present in the string. This means you 
should not use strings that have fewer than 6 characters. For example, if you 
specify <CODE>'9903'</CODE>, thinking that will represent March, 1999, you will 
find that <STRONG>MySQL</STRONG> inserts a ``zero'' date into your table. This 
is because the year and month values are <CODE>99</CODE> and <CODE>03</CODE>, 
but the day part is missing (zero), so the value is not a legal date. </P>
<P><CODE>TIMESTAMP</CODE> columns store legal values using the full precision 
with which the value was specified, regardless of the display size. This has 
several implications: </P>
<UL>
  <LI>Always specify year, month, and day, even if your column types are 
  <CODE>TIMESTAMP(4)</CODE> or <CODE>TIMESTAMP(2)</CODE>. Otherwise, the value 
  will not be a legal date and <CODE>0</CODE> will be stored. 
  <LI>If you use <CODE>ALTER TABLE</CODE> to widen a narrow 
  <CODE>TIMESTAMP</CODE> column, information will be displayed that previously 
  was ``hidden''. 
  <LI>Similarly, narrowing a <CODE>TIMESTAMP</CODE> column does not cause 
  information to be lost, except in the sense that less information is shown 
  when the values are displayed. 
  <LI>Although <CODE>TIMESTAMP</CODE> values are stored to full precision, the 
  only function that operates directly on the underlying stored value is 
  <CODE>UNIX_TIMESTAMP()</CODE>. Other functions operate on the formatted 
  retrieved value. This means you cannot use functions such as 
  <CODE>HOUR()</CODE> or <CODE>SECOND()</CODE> unless the relevant part of the 
  <CODE>TIMESTAMP</CODE> value is included in the formatted value. For example, 
  the <CODE>HH</CODE> part of a <CODE>TIMESTAMP</CODE> column is not displayed 
  unless the display size is at least 10, so trying to use <CODE>HOUR()</CODE> 
  on shorter <CODE>TIMESTAMP</CODE> values produces a meaningless result. 
</LI></UL>
<P>You can to some extent assign values of one date type to an object of a 
different date type. However, there may be some alteration of the value or loss 
of information: </P>
<UL>
  <LI>If you assign a <CODE>DATE</CODE> value to a <CODE>DATETIME</CODE> or 
  <CODE>TIMESTAMP</CODE> object, the time part of the resulting value is set to 
  <CODE>'00:00:00'</CODE>, because the <CODE>DATE</CODE> value contains no time 
  information. 
  <LI>If you assign a <CODE>DATETIME</CODE> or <CODE>TIMESTAMP</CODE> value to a 
  <CODE>DATE</CODE> object, the time part of the resulting value is deleted, 
  because the <CODE>DATE</CODE> type stores no time information. 
  <LI>Remember that although <CODE>DATETIME</CODE>, <CODE>DATE</CODE>, and 
  <CODE>TIMESTAMP</CODE> values all can be specified using the same set of 
  formats, the types do not all have the same range of values. For example, 
  <CODE>TIMESTAMP</CODE> values cannot be earlier than <CODE>1970</CODE> or 
  later than <CODE>2037</CODE>. This means that a date such as 
  <CODE>'1968-01-01'</CODE>, while legal as a <CODE>DATETIME</CODE> or 
  <CODE>DATE</CODE> value, is not a valid <CODE>TIMESTAMP</CODE> value and will 
  be converted to <CODE>0</CODE> if assigned to such an object. </LI></UL>
<P><A name=IDX576></A><A name=IDX577></A>Be aware of certain pitfalls when 
specifying date values: </P>
<UL>
  <LI>The relaxed format allowed for values specified as strings can be 
  deceiving. For example, a value such as <CODE>'10:11:12'</CODE> might look 
  like a time value because of the <SAMP>`:'</SAMP> delimiter, but if used in a 
  date context will be interpreted as the year <CODE>'2010-11-12'</CODE>. The 
  value <CODE>'10:45:15'</CODE> will be converted to <CODE>'0000-00-00'</CODE> 
  because <CODE>'45'</CODE> is not a legal month. 
  <LI>Year values specified as two digits are ambiguous, because the century is 
  unknown. <STRONG>MySQL</STRONG> interprets 2-digit year values using the 
  following rules: 
  <UL>
    <LI>Year values in the range <CODE>00-69</CODE> are converted to 
    <CODE>2000-2069</CODE>. 
    <LI>Year values in the range <CODE>70-99</CODE> are converted to 
    <CODE>1970-1999</CODE>. </LI></UL></LI></UL>
<P><A name=IDX578></A>
<H4><A href="file:///D:/work/mysql/manual-split/manual_toc.html#TIME" 
name=TIME>7.3.3.3 The <CODE>TIME</CODE> Type</A></H4>
<P><STRONG>MySQL</STRONG> retrieves and displays <CODE>TIME</CODE> values in 
<CODE>'HH:MM:SS'</CODE> format (or <CODE>'HHH:MM:SS'</CODE> format for large 
hours values). <CODE>TIME</CODE> values may range from <CODE>'-838:59:59'</CODE> 
to <CODE>'838:59:59'</CODE>. The reason the hours part may be so large is that 
the <CODE>TIME</CODE> type may be used not only to represent a time of day 
(which must be less than 24 hours), but also elapsed time or a time interval 
between two events (which may be much greater than 24 hours, or even negative). 
</P>
<P>You can specify <CODE>TIME</CODE> values in a variety of formats: </P>
<UL>
  <LI>As a string in <CODE>'D HH:MM:SS.fraction'</CODE> format. (Note that 
  <STRONG>MySQL</STRONG> doesn't yet store the fraction for the time column). 
  One can also use one of the following ``relaxed'' syntax: 
  <CODE>HH:MM:SS.fraction</CODE>, <CODE>HH:MM:SS</CODE>, <CODE>HH:MM</CODE>, 
  <CODE>D HH:MM:SS</CODE>, <CODE>D HH:MM</CODE>, <CODE>D HH</CODE> or 
  <CODE>SS</CODE>. Here <CODE>D</CODE> is days between 0-33. 
  <LI>As a string with no delimiters in <CODE>'HHMMSS'</CODE> format, provided 
  that it makes sense as a time. For example, <CODE>'101112'</CODE> is 
  understood as <CODE>'10:11:12'</CODE>, but <CODE>'109712'</CODE> is illegal 
  (it has a nonsensical minute part) and becomes <CODE>'00:00:00'</CODE>. 
  <LI>As a number in <CODE>HHMMSS</CODE> format, provided that it makes sense as 
  a time. For example, <CODE>101112</CODE> is understood as 
  <CODE>'10:11:12'</CODE>. The following alternative formats are also 
  understood: <CODE>SS</CODE>, <CODE>MMSS</CODE>,<CODE>HHMMSS</CODE>, 
  <CODE>HHMMSS.fraction</CODE>. Note that <STRONG>MySQL</STRONG> doesn't yet 
  store the fraction part. 
  <LI>As the result of a function that returns a value that is acceptable in a 
  <CODE>TIME</CODE> context, such as <CODE>CURRENT_TIME</CODE>. </LI></UL>
<P>For <CODE>TIME</CODE> values specified as strings that include a time part 
delimiter, it is not necessary to specify two digits for hours, minutes, or 
seconds values that are less than <CODE>10</CODE>. <CODE>'8:3:2'</CODE> is the 
same as <CODE>'08:03:02'</CODE>. </P>
<P>Be careful about assigning ``short'' <CODE>TIME</CODE> values to a 
<CODE>TIME</CODE> column. Without semicolon, <STRONG>MySQL</STRONG> interprets 
values using the assumption that the rightmost digits represent seconds. 
(<STRONG>MySQL</STRONG> interprets <CODE>TIME</CODE> values as elapsed time 
rather than as time of day.) For example, you might think of <CODE>'1112'</CODE> 
and <CODE>1112</CODE> as meaning <CODE>'11:12:00'</CODE> (12 minutes after 11 
o'clock), but <STRONG>MySQL</STRONG> interprets them as <CODE>'00:11:12'</CODE> 
(11 minutes, 12 seconds). Similarly, <CODE>'12'</CODE> and <CODE>12</CODE> are 
interpreted as <CODE>'00:00:12'</CODE>. <CODE>TIME</CODE> values with semicolon, 
instead, are always treated as time of the day. That is <CODE>'11:12'</CODE> 
will mean <CODE>'11:12:00'</CODE>, not <CODE>'00:11:12'</CODE>. </P>
<P>Values that lie outside the <CODE>TIME</CODE> range but are otherwise legal 
are clipped to the appropriate endpoint of the range. For example, 
<CODE>'-850:00:00'</CODE> and <CODE>'850:00:00'</CODE> are converted to 
<CODE>'-838:59:59'</CODE> and <CODE>'838:59:59'</CODE>. </P>
<P>Illegal <CODE>TIME</CODE> values are converted to <CODE>'00:00:00'</CODE>. 
Note that because <CODE>'00:00:00'</CODE> is itself a legal <CODE>TIME</CODE> 
value, there is no way to tell, from a value of <CODE>'00:00:00'</CODE> stored 
in a table, whether the original value was specified as <CODE>'00:00:00'</CODE> 
or whether it was illegal. </P>
<P><A name=IDX579></A>
<H4><A href="file:///D:/work/mysql/manual-split/manual_toc.html#YEAR" 
name=YEAR>7.3.3.4 The <CODE>YEAR</CODE> Type</A></H4>
<P>The <CODE>YEAR</CODE> type is a 1-byte type used for representing years. </P>
<P><STRONG>MySQL</STRONG> retrieves and displays <CODE>YEAR</CODE> values in 
<CODE>YYYY</CODE> format. The range is <CODE>1901</CODE> to <CODE>2155</CODE>. 
</P>
<P>You can specify <CODE>YEAR</CODE> values in a variety of formats: </P>
<UL>
  <LI>As a four-digit string in the range <CODE>'1901'</CODE> to 
  <CODE>'2155'</CODE>. 
  <LI>As a four-digit number in the range <CODE>1901</CODE> to 
  <CODE>2155</CODE>. 
  <LI>As a two-digit string in the range <CODE>'00'</CODE> to <CODE>'99'</CODE>. 
  Values in the ranges <CODE>'00'</CODE> to <CODE>'69'</CODE> and 
  <CODE>'70'</CODE> to <CODE>'99'</CODE> are converted to <CODE>YEAR</CODE> 
  values in the ranges <CODE>2000</CODE> to <CODE>2069</CODE> and 
  <CODE>1970</CODE> to <CODE>1999</CODE>. 
  <LI>As a two-digit number in the range <CODE>1</CODE> to <CODE>99</CODE>. 
  Values in the ranges <CODE>1</CODE> to <CODE>69</CODE> and <CODE>70</CODE> to 
  <CODE>99</CODE> are converted to <CODE>YEAR</CODE> values in the ranges 
  <CODE>2001</CODE> to <CODE>2069</CODE> and <CODE>1970</CODE> to 
  <CODE>1999</CODE>. Note that the range for two-digit numbers is slightly 
  different than the range for two-digit strings, because you cannot specify 
  zero directly as a number and have it be interpreted as <CODE>2000</CODE>. You 
  <EM>must</EM> specify it as a string <CODE>'0'</CODE> or <CODE>'00'</CODE> or 
  it will be interpreted as <CODE>0000</CODE>. 
  <LI>As the result of a function that returns a value that is acceptable in a 
  <CODE>YEAR</CODE> context, such as <CODE>NOW()</CODE>. </LI></UL>
<P>Illegal <CODE>YEAR</CODE> values are converted to <CODE>0000</CODE>. </P>
<P><A name=IDX580></A><A name=IDX581></A>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#String_types" 
name=String_types>7.3.4 String Types</A></H3>
<P><A name=IDX582></A><A name=IDX583></A></P>
<P>The string types are <CODE>CHAR</CODE>, <CODE>VARCHAR</CODE>, 
<CODE>BLOB</CODE>, <CODE>TEXT</CODE>, <CODE>ENUM</CODE>, and <CODE>SET</CODE>. 
This section describes how these types work, their storage requirements, and how 
to use them in your queries. </P>
<H4><A href="file:///D:/work/mysql/manual-split/manual_toc.html#CHAR" 
name=CHAR>7.3.4.1 The <CODE>CHAR</CODE> and <CODE>VARCHAR</CODE> Types</A></H4>
<P>The <CODE>CHAR</CODE> and <CODE>VARCHAR</CODE> types are similar, but differ 
in the way they are stored and retrieved. </P>
<P>The length of a <CODE>CHAR</CODE> column is fixed to the length that you 
declare when you create the table. The length can be any value between 1 and 
255. (As of <STRONG>MySQL</STRONG> Version 3.23, the length of <CODE>CHAR</CODE> 
may be 0 to 255.) When <CODE>CHAR</CODE> values are stored, they are 
right-padded with spaces to the specified length. When <CODE>CHAR</CODE> values 
are retrieved, trailing spaces are removed. </P>
<P>Values in <CODE>VARCHAR</CODE> columns are variable-length strings. You can 
declare a <CODE>VARCHAR</CODE> column to be any length between 1 and 255, just 
as for <CODE>CHAR</CODE> columns. However, in contrast to <CODE>CHAR</CODE>, 
<CODE>VARCHAR</CODE> values are stored using only as many characters as are 
needed, plus one byte to record the length. Values are not padded; instead, 
trailing spaces are removed when values are stored. (This space removal differs 
from the ANSI SQL specification.) </P>
<P>If you assign a value to a <CODE>CHAR</CODE> or <CODE>VARCHAR</CODE> column 
that exceeds the column's maximum length, the value is truncated to fit. </P>
<P>The table below illustrates the differences between the two types of columns 
by showing the result of storing various string values into <CODE>CHAR(4)</CODE> 
and <CODE>VARCHAR(4)</CODE> columns: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Value</STRONG> </TD>
    <TD><CODE>CHAR(4)</CODE> </TD>
    <TD><STRONG>Storage required</STRONG> </TD>
    <TD><CODE>VARCHAR(4)</CODE> </TD>
    <TD><STRONG>Storage required</STRONG> </TD>
  <TR>
    <TD><CODE>''</CODE> </TD>
    <TD><CODE>' '</CODE> </TD>
    <TD>4 bytes </TD>
    <TD><CODE>''</CODE> </TD>
    <TD>1 byte </TD>
  <TR>
    <TD><CODE>'ab'</CODE> </TD>
    <TD><CODE>'ab '</CODE> </TD>
    <TD>4 bytes </TD>
    <TD><CODE>'ab'</CODE> </TD>
    <TD>3 bytes </TD>
  <TR>
    <TD><CODE>'abcd'</CODE> </TD>
    <TD><CODE>'abcd'</CODE> </TD>
    <TD>4 bytes </TD>
    <TD><CODE>'abcd'</CODE> </TD>
    <TD>5 bytes </TD>
  <TR>
    <TD><CODE>'abcdefgh'</CODE> </TD>
    <TD><CODE>'abcd'</CODE> </TD>
    <TD>4 bytes </TD>
    <TD><CODE>'abcd'</CODE> </TD>
    <TD>5 bytes </TD></TR></TBODY></TABLE>
<P>The values retrieved from the <CODE>CHAR(4)</CODE> and 
<CODE>VARCHAR(4)</CODE> columns will be the same in each case, because trailing 
spaces are removed from <CODE>CHAR</CODE> columns upon retrieval. </P>
<P>Values in <CODE>CHAR</CODE> and <CODE>VARCHAR</CODE> columns are sorted and 
compared in case-insensitive fashion, unless the <CODE>BINARY</CODE> attribute 
was specified when the table was created. The <CODE>BINARY</CODE> attribute 
means that column values are sorted and compared in case-sensitive fashion 
according to the ASCII order of the machine where the <STRONG>MySQL</STRONG> 
server is running. <CODE>BINARY</CODE> doesn't affect how the column is stored 
or retrieved. </P>
<P>The <CODE>BINARY</CODE> attribute is sticky. This means that if a column 
marked <CODE>BINARY</CODE> is used in an expression, the whole expression is 
compared as a <CODE>BINARY</CODE> value. </P>
<P><STRONG>MySQL</STRONG> may silently change the type of a <CODE>CHAR</CODE> or 
<CODE>VARCHAR</CODE> column at table creation time. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Silent_column_changes">7.7.1 
Silent Column Specification Changes</A>. </P>
<P><A name=IDX584></A><A name=IDX585></A>
<H4><A href="file:///D:/work/mysql/manual-split/manual_toc.html#BLOB" 
name=BLOB>7.3.4.2 The <CODE>BLOB</CODE> and <CODE>TEXT</CODE> Types</A></H4>
<P>A <CODE>BLOB</CODE> is a binary large object that can hold a variable amount 
of data. The four <CODE>BLOB</CODE> types <CODE>TINYBLOB</CODE>, 
<CODE>BLOB</CODE>, <CODE>MEDIUMBLOB</CODE>, and <CODE>LONGBLOB</CODE> differ 
only in the maximum length of the values they can hold. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Storage_requirements">7.3.1 
Column Type Storage Requirements</A>. </P>
<P>The four <CODE>TEXT</CODE> types <CODE>TINYTEXT</CODE>, <CODE>TEXT</CODE>, 
<CODE>MEDIUMTEXT</CODE>, and <CODE>LONGTEXT</CODE> correspond to the four 
<CODE>BLOB</CODE> types and have the same maximum lengths and storage 
requirements. The only difference between <CODE>BLOB</CODE> and 
<CODE>TEXT</CODE> types is that sorting and comparison is performed in 
case-sensitive fashion for <CODE>BLOB</CODE> values and case-insensitive fashion 
for <CODE>TEXT</CODE> values. In other words, a <CODE>TEXT</CODE> is a 
case-insensitive <CODE>BLOB</CODE>. </P>
<P>If you assign a value to a <CODE>BLOB</CODE> or <CODE>TEXT</CODE> column that 
exceeds the column type's maximum length, the value is truncated to fit. </P>
<P>In most respects, you can regard a <CODE>TEXT</CODE> column as a 
<CODE>VARCHAR</CODE> column that can be as big as you like. Similarly, you can 
regard a <CODE>BLOB</CODE> column as a <CODE>VARCHAR BINARY</CODE> column. The 
differences are: </P>
<UL>
  <LI>You can have indexes on <CODE>BLOB</CODE> and <CODE>TEXT</CODE> columns 
  with <STRONG>MySQL</STRONG> Version 3.23.2 and newer. Older versions of 
  <STRONG>MySQL</STRONG> did not support this. 
  <LI>There is no trailing-space removal for <CODE>BLOB</CODE> and 
  <CODE>TEXT</CODE> columns when values are stored, as there is for 
  <CODE>VARCHAR</CODE> columns. 
  <LI><A name=IDX586></A><A name=IDX587></A><A name=IDX588></A><CODE>BLOB</CODE> 
  and <CODE>TEXT</CODE> columns cannot have <CODE>DEFAULT</CODE> values. 
</LI></UL>
<P><STRONG>MyODBC</STRONG> defines <CODE>BLOB</CODE> values as 
<CODE>LONGVARBINARY</CODE> and <CODE>TEXT</CODE> values as 
<CODE>LONGVARCHAR</CODE>. </P>
<P>Because <CODE>BLOB</CODE> and <CODE>TEXT</CODE> values may be extremely long, 
you may run up against some constraints when using them: </P>
<UL>
  <LI>If you want to use <CODE>GROUP BY</CODE> or <CODE>ORDER BY</CODE> on a 
  <CODE>BLOB</CODE> or <CODE>TEXT</CODE> column, you must convert the column 
  value into a fixed-length object. The standard way to do this is with the 
  <CODE>SUBSTRING</CODE> function. For example: <PRE>mysql&gt; select comment from tbl_name,substring(comment,20) as substr
       ORDER BY substr;
</PRE>If you don't do this, only the first <CODE>max_sort_length</CODE> bytes 
  of the column are used when sorting. The default value of 
  <CODE>max_sort_length</CODE> is 1024; this value can be changed using the 
  <CODE>-O</CODE> option when starting the <CODE>mysqld</CODE> server. You can 
  group on an expression involving <CODE>BLOB</CODE> or <CODE>TEXT</CODE> values 
  by specifying the column position or by using an alias: <PRE>mysql&gt; select id,substring(blob_col,1,100) from tbl_name
           GROUP BY 2;
mysql&gt; select id,substring(blob_col,1,100) as b from tbl_name
           GROUP BY b;
</PRE>
  <LI>The maximum size of a <CODE>BLOB</CODE> or <CODE>TEXT</CODE> object is 
  determined by its type, but the largest value you can actually transmit 
  between the client and server is determined by the amount of available memory 
  and the size of the communications buffers. You can change the message buffer 
  size, but you must do so on both the server and client ends. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Performance.html#Server_parameters">13.2.4 
  Tuning Server Parameters</A>. </LI></UL>
<P>Note that each <CODE>BLOB</CODE> or <CODE>TEXT</CODE> value is represented 
internally by a separately allocated object. This is in contrast to all other 
column types, for which storage is allocated once per column when the table is 
opened. </P>
<P><A name=IDX589></A>
<H4><A href="file:///D:/work/mysql/manual-split/manual_toc.html#ENUM" 
name=ENUM>7.3.4.3 The <CODE>ENUM</CODE> Type</A></H4>
<P>An <CODE>ENUM</CODE> is a string object whose value normally is chosen from a 
list of allowed values that are enumerated explicitly in the column 
specification at table creation time. </P>
<P>The value may also be the empty string (<CODE>""</CODE>) or <CODE>NULL</CODE> 
under certain circumstances: </P>
<UL>
  <LI>If you insert an invalid value into an <CODE>ENUM</CODE> (that is, a 
  string not present in the list of allowed values), the empty string is 
  inserted instead as a special error value. 
  <LI>If an <CODE>ENUM</CODE> is declared <CODE>NULL</CODE>, <CODE>NULL</CODE> 
  is also a legal value for the column, and the default value is 
  <CODE>NULL</CODE>. If an <CODE>ENUM</CODE> is declared <CODE>NOT NULL</CODE>, 
  the default value is the first element of the list of allowed values. </LI></UL>
<P>Each enumeration value has an index: </P>
<UL>
  <LI>Values from the list of allowable elements in the column specification are 
  numbered beginning with 1. 
  <LI>The index value of the empty string error value is 0. This means that you 
  can use the following <CODE>SELECT</CODE> statement to find rows into which 
  invalid <CODE>ENUM</CODE> values were assigned: <PRE>mysql&gt; SELECT * FROM tbl_name WHERE enum_col=0;
</PRE>
  <LI>The index of the <CODE>NULL</CODE> value is <CODE>NULL</CODE>. </LI></UL>
<P>For example, a column specified as <CODE>ENUM("one", "two", "three")</CODE> 
can have any of the values shown below. The index of each value is also shown: 
</P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Value</STRONG> </TD>
    <TD><STRONG>Index</STRONG> </TD>
  <TR>
    <TD><CODE>NULL</CODE> </TD>
    <TD><CODE>NULL</CODE> </TD>
  <TR>
    <TD><CODE>""</CODE> </TD>
    <TD>0 </TD>
  <TR>
    <TD><CODE>"one"</CODE> </TD>
    <TD>1 </TD>
  <TR>
    <TD><CODE>"two"</CODE> </TD>
    <TD>2 </TD>
  <TR>
    <TD><CODE>"three"</CODE> </TD>
    <TD>3 </TD></TR></TBODY></TABLE>
<P>An enumeration can have a maximum of 65535 elements. </P>
<P>Lettercase is irrelevant when you assign values to an <CODE>ENUM</CODE> 
column. However, values retrieved from the column later have lettercase matching 
the values that were used to specify the allowable values at table creation 
time. </P>
<P>If you retrieve an <CODE>ENUM</CODE> in a numeric context, the column value's 
index is returned. For example, you can retrieve numeric values from an 
<CODE>ENUM</CODE> column like this: </P><PRE>mysql&gt; SELECT enum_col+0 FROM tbl_name;
</PRE>
<P>If you store a number into an <CODE>ENUM</CODE>, the number is treated as an 
index, and the value stored is the enumeration member with that index. (However, 
this will not work with <CODE>LOAD DATA</CODE>, which treats all input as 
strings.) </P>
<P><CODE>ENUM</CODE> values are sorted according to the order in which the 
enumeration members were listed in the column specification. (In other words, 
<CODE>ENUM</CODE> values are sorted according to their index numbers.) For 
example, <CODE>"a"</CODE> sorts before <CODE>"b"</CODE> for <CODE>ENUM("a", 
"b")</CODE>, but <CODE>"b"</CODE> sorts before <CODE>"a"</CODE> for 
<CODE>ENUM("b", "a")</CODE>. The empty string sorts before non-empty strings, 
and <CODE>NULL</CODE> values sort before all other enumeration values. </P>
<P>If you want to get all possible values for an <CODE>ENUM</CODE> column, you 
should use: <CODE>SHOW COLUMNS FROM table_name LIKE enum_column_name</CODE> and 
parse the <CODE>ENUM</CODE> definition in the second column. </P>
<P><A name=IDX590></A>
<H4><A href="file:///D:/work/mysql/manual-split/manual_toc.html#SET" 
name=SET>7.3.4.4 The <CODE>SET</CODE> Type</A></H4>
<P>A <CODE>SET</CODE> is a string object that can have zero or more values, each 
of which must be chosen from a list of allowed values specified when the table 
is created. <CODE>SET</CODE> column values that consist of multiple set members 
are specified with members separated by commas (<SAMP>`,'</SAMP>). A consequence 
of this is that <CODE>SET</CODE> member values cannot themselves contain commas. 
</P>
<P>For example, a column specified as <CODE>SET("one", "two") NOT NULL</CODE> 
can have any of these values: </P><PRE>""
"one"
"two"
"one,two"
</PRE>
<P>A <CODE>SET</CODE> can have a maximum of 64 different members. </P>
<P><STRONG>MySQL</STRONG> stores <CODE>SET</CODE> values numerically, with the 
low-order bit of the stored value corresponding to the first set member. If you 
retrieve a <CODE>SET</CODE> value in a numeric context, the value retrieved has 
bits set corresponding to the set members that make up the column value. For 
example, you can retrieve numeric values from a <CODE>SET</CODE> column like 
this: </P><PRE>mysql&gt; SELECT set_col+0 FROM tbl_name;
</PRE>
<P>If a number is stored into a <CODE>SET</CODE> column, the bits that are set 
in the binary representation of the number determine the set members in the 
column value. Suppose a column is specified as 
<CODE>SET("a","b","c","d")</CODE>. Then the members have the following bit 
values: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><CODE>SET</CODE> <STRONG>member</STRONG> </TD>
    <TD><STRONG>Decimal value</STRONG> </TD>
    <TD><STRONG>Binary value</STRONG> </TD>
  <TR>
    <TD><CODE>a</CODE> </TD>
    <TD><CODE>1</CODE> </TD>
    <TD><CODE>0001</CODE> </TD>
  <TR>
    <TD><CODE>b</CODE> </TD>
    <TD><CODE>2</CODE> </TD>
    <TD><CODE>0010</CODE> </TD>
  <TR>
    <TD><CODE>c</CODE> </TD>
    <TD><CODE>4</CODE> </TD>
    <TD><CODE>0100</CODE> </TD>
  <TR>
    <TD><CODE>d</CODE> </TD>
    <TD><CODE>8</CODE> </TD>
    <TD><CODE>1000</CODE> </TD></TR></TBODY></TABLE>
<P>If you assign a value of <CODE>9</CODE> to this column, that is 
<CODE>1001</CODE> in binary, so the first and fourth <CODE>SET</CODE> value 
members <CODE>"a"</CODE> and <CODE>"d"</CODE> are selected and the resulting 
value is <CODE>"a,d"</CODE>. </P>
<P>For a value containing more than one <CODE>SET</CODE> element, it does not 
matter what order the elements are listed in when you insert the value. It also 
does not matter how many times a given element is listed in the value. When the 
value is retrieved later, each element in the value will appear once, with 
elements listed according to the order in which they were specified at table 
creation time. For example, if a column is specified as 
<CODE>SET("a","b","c","d")</CODE>, then <CODE>"a,d"</CODE>, <CODE>"d,a"</CODE>, 
and <CODE>"d,a,a,d,d"</CODE> will all appear as <CODE>"a,d"</CODE> when 
retrieved. </P>
<P><CODE>SET</CODE> values are sorted numerically. <CODE>NULL</CODE> values sort 
before non-<CODE>NULL</CODE> <CODE>SET</CODE> values. </P>
<P>Normally, you perform a <CODE>SELECT</CODE> on a <CODE>SET</CODE> column 
using the <CODE>LIKE</CODE> operator or the <CODE>FIND_IN_SET()</CODE> function: 
</P><PRE>mysql&gt; SELECT * FROM tbl_name WHERE set_col LIKE '%value%';
mysql&gt; SELECT * FROM tbl_name WHERE FIND_IN_SET('value',set_col)&gt;0;
</PRE>
<P>But the following will also work: </P><PRE>mysql&gt; SELECT * FROM tbl_name WHERE set_col = 'val1,val2';
mysql&gt; SELECT * FROM tbl_name WHERE set_col &amp; 1;
</PRE>
<P>The first of these statements looks for an exact match. The second looks for 
values containing the first set member. </P>
<P>If you want to get all possible values for a <CODE>SET</CODE> column, you 
should use: <CODE>SHOW COLUMNS FROM table_name LIKE set_column_name</CODE> and 
parse the <CODE>SET</CODE> definition in the second column. </P>
<P><A name=IDX591></A><A name=IDX592></A>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Choosing_types" 
name=Choosing_types>7.3.5 Choosing the Right Type for a Column</A></H3>
<P>For the most efficient use of storage, try to use the most precise type in 
all cases. For example, if an integer column will be used for values in the 
range between <CODE>1</CODE> and <CODE>99999</CODE>, <CODE>MEDIUMINT 
UNSIGNED</CODE> is the best type. </P>
<P>Accurate representation of monetary values is a common problem. In 
<STRONG>MySQL</STRONG>, you should use the <CODE>DECIMAL</CODE> type. This is 
stored as a string, so no loss of accuracy should occur. If accuracy is not too 
important, the <CODE>DOUBLE</CODE> type may also be good enough. </P>
<P>For high precision, you can always convert to a fixed-point type stored in a 
<CODE>BIGINT</CODE>. This allows you to do all calculations with integers and 
convert results back to floating-point values only when necessary. </P>
<P><A name=IDX593></A><A name=IDX594></A><A name=IDX595></A>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Indexes" 
name=Indexes>7.3.6 Column Indexes</A></H3>
<P>All <STRONG>MySQL</STRONG> column types can be indexed. Use of indexes on the 
relevant columns is the best way to improve the performance of 
<CODE>SELECT</CODE> operations. </P>
<P>The maximum number of keys and the maximum index length is defined per table 
handler. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Table_types.html#Table_types">8 
MySQL Table Types</A>. You can with all table handlers have at least 16 keys and 
a total index length of at least 256 bytes. </P>
<P>For <CODE>CHAR</CODE> and <CODE>VARCHAR</CODE> columns, you can index a 
prefix of a column. This is much faster and requires less disk space than 
indexing the whole column. The syntax to use in the <CODE>CREATE TABLE</CODE> 
statement to index a column prefix looks like this: </P><PRE>KEY index_name (col_name(length))
</PRE>
<P>The example below creates an index for the first 10 characters of the 
<CODE>name</CODE> column: </P><PRE>mysql&gt; CREATE TABLE test (
           name CHAR(200) NOT NULL,
           KEY index_name (name(10)));
</PRE>
<P>For <CODE>BLOB</CODE> and <CODE>TEXT</CODE> columns, you must index a prefix 
of the column. You cannot index the entire column. </P>
<P>In <STRONG>MySQL</STRONG> Version 3.23.23 or later, you can also create 
special <STRONG>FULLTEXT</STRONG> indexes. They are used for full-text search. 
Only the <CODE>MyISAM</CODE> table type supports <CODE>FULLTEXT</CODE> indexes. 
They can be created only from <CODE>VARCHAR</CODE> and <CODE>TEXT</CODE> 
columns. Indexing always happens over the entire column and partial indexing is 
not supported. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Fulltext_Search.html#Fulltext_Search">12 
MySQL Full-text Search</A> for details. </P>
<P><A name=IDX596></A><A name=IDX597></A><A name=IDX598></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Multiple-column_indexes" 
name=Multiple-column_indexes>7.3.7 Multiple-column Indexes</A></H3>
<P><STRONG>MySQL</STRONG> can create indexes on multiple columns. An index may 
consist of up to 15 columns. (On <CODE>CHAR</CODE> and <CODE>VARCHAR</CODE> 
columns you can also use a prefix of the column as a part of an index). </P>
<P>A multiple-column index can be considered a sorted array containing values 
that are created by concatenating the values of the indexed columns. </P>
<P><STRONG>MySQL</STRONG> uses multiple-column indexes in such a way that 
queries are fast when you specify a known quantity for the first column of the 
index in a <CODE>WHERE</CODE> clause, even if you don't specify values for the 
other columns. </P>
<P>Suppose a table is created using the following specification: </P><PRE>mysql&gt; CREATE TABLE test (
           id INT NOT NULL,
           last_name CHAR(30) NOT NULL,
           first_name CHAR(30) NOT NULL,
           PRIMARY KEY (id),
           INDEX name (last_name,first_name));
</PRE>
<P>Then the index <CODE>name</CODE> is an index over <CODE>last_name</CODE> and 
<CODE>first_name</CODE>. The index will be used for queries that specify values 
in a known range for <CODE>last_name</CODE>, or for both <CODE>last_name</CODE> 
and <CODE>first_name</CODE>. Therefore, the <CODE>name</CODE> index will be used 
in the following queries: </P><PRE>mysql&gt; SELECT * FROM test WHERE last_name="Widenius";

mysql&gt; SELECT * FROM test WHERE last_name="Widenius"
                          AND first_name="Michael";

mysql&gt; SELECT * FROM test WHERE last_name="Widenius"
                          AND (first_name="Michael" OR first_name="Monty");

mysql&gt; SELECT * FROM test WHERE last_name="Widenius"
                          AND first_name &gt;="M" AND first_name &lt; "N";
</PRE>
<P>However, the <CODE>name</CODE> index will NOT be used in the following 
queries: </P><PRE>mysql&gt; SELECT * FROM test WHERE first_name="Michael";

mysql&gt; SELECT * FROM test WHERE last_name="Widenius"
                          OR first_name="Michael";
</PRE>
<P>For more information on the manner in which <STRONG>MySQL</STRONG> uses 
indexes to improve query performance, see section <A 
href="file:///D:/work/mysql/manual-split/manual_Performance.html#MySQL_indexes">13.4 
How MySQL Uses Indexes</A>. </P>
<P><A name=IDX599></A><A name=IDX600></A><A name=IDX601></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Other-vendor_column_types" 
name=Other-vendor_column_types>7.3.8 Using Column Types from Other Database 
Engines</A></H3>
<P>To make it easier to use code written for SQL implementations from other 
vendors, <STRONG>MySQL</STRONG> maps column types as shown in the table below. 
These mappings make it easier to move table definitions from other database 
engines to <STRONG>MySQL</STRONG>: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Other vendor type</STRONG> </TD>
    <TD><STRONG>MySQL type</STRONG> </TD>
  <TR>
    <TD><CODE>BINARY(NUM)</CODE> </TD>
    <TD><CODE>CHAR(NUM) BINARY</CODE> </TD>
  <TR>
    <TD><CODE>CHAR VARYING(NUM)</CODE> </TD>
    <TD><CODE>VARCHAR(NUM)</CODE> </TD>
  <TR>
    <TD><CODE>FLOAT4</CODE> </TD>
    <TD><CODE>FLOAT</CODE> </TD>
  <TR>
    <TD><CODE>FLOAT8</CODE> </TD>
    <TD><CODE>DOUBLE</CODE> </TD>
  <TR>
    <TD><CODE>INT1</CODE> </TD>
    <TD><CODE>TINYINT</CODE> </TD>
  <TR>
    <TD><CODE>INT2</CODE> </TD>
    <TD><CODE>SMALLINT</CODE> </TD>
  <TR>
    <TD><CODE>INT3</CODE> </TD>
    <TD><CODE>MEDIUMINT</CODE> </TD>
  <TR>
    <TD><CODE>INT4</CODE> </TD>
    <TD><CODE>INT</CODE> </TD>
  <TR>
    <TD><CODE>INT8</CODE> </TD>
    <TD><CODE>BIGINT</CODE> </TD>
  <TR>
    <TD><CODE>LONG VARBINARY</CODE> </TD>
    <TD><CODE>MEDIUMBLOB</CODE> </TD>
  <TR>
    <TD><CODE>LONG VARCHAR</CODE> </TD>
    <TD><CODE>MEDIUMTEXT</CODE> </TD>
  <TR>
    <TD><CODE>MIDDLEINT</CODE> </TD>
    <TD><CODE>MEDIUMINT</CODE> </TD>
  <TR>
    <TD><CODE>VARBINARY(NUM)</CODE> </TD>
    <TD><CODE>VARCHAR(NUM) BINARY</CODE> </TD></TR></TBODY></TABLE>
<P>Column type mapping occurs at table creation time. If you create a table with 
types used by other vendors and then issue a <CODE>DESCRIBE tbl_name</CODE> 
statement, <STRONG>MySQL</STRONG> reports the table structure using the 
equivalent <STRONG>MySQL</STRONG> types. </P>
<P><A name=IDX602></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Functions" 
name=Functions>7.4 Functions for Use in <CODE>SELECT</CODE> and 
<CODE>WHERE</CODE> Clauses</A></H2>
<P>A <CODE>select_expression</CODE> or <CODE>where_definition</CODE> in a SQL 
statement can consist of any expression using the functions described below. 
</P>
<P>An expression that contains <CODE>NULL</CODE> always produces a 
<CODE>NULL</CODE> value unless otherwise indicated in the documentation for the 
operators and functions involved in the expression. </P>
<P><STRONG>NOTE:</STRONG> There must be no whitespace between a function name 
and the parenthesis following it. This helps the <STRONG>MySQL</STRONG> parser 
distinguish between function calls and references to tables or columns that 
happen to have the same name as a function. Spaces around arguments are 
permitted, though. </P>
<P>You can force <STRONG>MySQL</STRONG> to accept spaces after the function name 
by starting <CODE>mysqld</CODE> with <CODE>--ansi</CODE> or using the 
<CODE>CLIENT_IGNORE_SPACE</CODE> to <CODE>mysql_connect()</CODE>, but in this 
case all function names will become reserved words. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Compatibility.html#ANSI_mode">5.2 
Running MySQL in ANSI Mode</A>. </P>
<P>For the sake of brevity, examples display the output from the 
<CODE>mysql</CODE> program in abbreviated form. So this: </P><PRE>mysql&gt; select MOD(29,9);
1 rows in set (0.00 sec)

+-----------+
| mod(29,9) |
+-----------+
|         2 |
+-----------+
</PRE>
<P>is displayed like this: </P><PRE>mysql&gt; select MOD(29,9);
        -&gt; 2
</PRE>
<P><A name=IDX603></A><A name=IDX604></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Grouping_functions" 
name=Grouping_functions>7.4.1 Grouping Functions</A></H3>
<DL compact>
  <DT><CODE>( ... )</CODE> 
  <DD><A name=IDX605></A><A name=IDX606></A>Parentheses. Use these to force the 
  order of evaluation in an expression: <PRE>mysql&gt; select 1+2*3;
        -&gt; 7
mysql&gt; select (1+2)*3;
        -&gt; 9
</PRE></DD></DL>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Arithmetic_functions" 
name=Arithmetic_functions>7.4.2 Normal Arithmetic Operations</A></H3>
<P>The usual arithmetic operators are available. Note that in the case of 
<SAMP>`-'</SAMP>, <SAMP>`+'</SAMP>, and <SAMP>`*'</SAMP>, the result is 
calculated with <CODE>BIGINT</CODE> (64-bit) precision if both arguments are 
integers! </P>
<P><A name=IDX607></A><A name=IDX608></A>
<DL compact>
  <DT><CODE>+</CODE> 
  <DD><A name=IDX609></A><A name=IDX610></A>Addition: <PRE>mysql&gt; select 3+5;
        -&gt; 8
</PRE><A name=IDX611></A><A name=IDX612></A>
  <DT><CODE>-</CODE> 
  <DD>Subtraction: <PRE>mysql&gt; select 3-5;
        -&gt; -2
</PRE><A name=IDX613></A><A name=IDX614></A>
  <DT><CODE>*</CODE> 
  <DD>Multiplication: <PRE>mysql&gt; select 3*5;
        -&gt; 15
mysql&gt; select 18014398509481984*18014398509481984.0;
        -&gt; 324518553658426726783156020576256.0
mysql&gt; select 18014398509481984*18014398509481984;
        -&gt; 0
</PRE>The result of the last expression is incorrect because the result of the 
  integer multiplication exceeds the 64-bit range of <CODE>BIGINT</CODE> 
  calculations. <A name=IDX615></A><A name=IDX616></A>
  <DT><CODE>/</CODE> 
  <DD>Division: <PRE>mysql&gt; select 3/5;
        -&gt; 0.60
</PRE>Division by zero produces a <CODE>NULL</CODE> result: <PRE>mysql&gt; select 102/(1-1);
        -&gt; NULL
</PRE>A division will be calculated with <CODE>BIGINT</CODE> arithmetic only 
  if performed in a context where its result is converted to an integer! 
</DD></DL>
<P><A name=IDX617></A><A name=IDX618></A><A name=IDX619></A><A name=IDX620></A>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Bit_functions" 
name=Bit_functions>7.4.3 Bit Functions</A></H3>
<P><STRONG>MySQL</STRONG> uses <CODE>BIGINT</CODE> (64-bit) arithmetic for bit 
operations, so these operators have a maximum range of 64 bits. </P>
<DL compact>
  <DT><CODE>|</CODE> 
  <DD><A name=IDX621></A><A name=IDX622></A>Bitwise OR: <PRE>mysql&gt; select 29 | 15;
        -&gt; 31
</PRE><A name=IDX623></A><A name=IDX624></A>
  <DT><CODE>&amp;</CODE> 
  <DD>Bitwise AND: <PRE>mysql&gt; select 29 &amp; 15;
        -&gt; 13
</PRE><A name=IDX625></A>
  <DT><CODE>&lt;&lt;</CODE> 
  <DD>Shifts a longlong (<CODE>BIGINT</CODE>) number to the left: <PRE>mysql&gt; select 1 &lt;&lt; 2;
        -&gt; 4
</PRE><A name=IDX626></A>
  <DT><CODE>&gt;&gt;</CODE> 
  <DD>Shifts a longlong (<CODE>BIGINT</CODE>) number to the right: <PRE>mysql&gt; select 4 &gt;&gt; 2;
        -&gt; 1
</PRE><A name=IDX627></A>
  <DT><CODE>~</CODE> 
  <DD>Invert all bits: <PRE>mysql&gt; select 5 &amp; ~1;
        -&gt; 4
</PRE><A name=IDX628></A>
  <DT><CODE>BIT_COUNT(N)</CODE> 
  <DD>Returns the number of bits that are set in the argument <CODE>N</CODE>: <PRE>mysql&gt; select BIT_COUNT(29);
        -&gt; 4
</PRE></DD></DL>
<P><A name=IDX629></A><A name=IDX630></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Logical_functions" 
name=Logical_functions>7.4.4 Logical Operations</A></H3>
<P>All logical functions return <CODE>1</CODE> (TRUE), <CODE>0</CODE> (FALSE) or 
<CODE>NULL</CODE> (unknown, which is in most cases the same as FALSE): </P>
<DL compact>
  <DT><CODE>NOT</CODE> 
  <DD><A name=IDX631></A><A name=IDX632></A>
  <DT><CODE>!</CODE> 
  <DD>Logical NOT. Returns <CODE>1</CODE> if the argument is <CODE>0</CODE>, 
  otherwise returns <CODE>0</CODE>. Exception: <CODE>NOT NULL</CODE> returns 
  <CODE>NULL</CODE>: <PRE>mysql&gt; select NOT 1;
        -&gt; 0
mysql&gt; select NOT NULL;
        -&gt; NULL
mysql&gt; select ! (1+1);
        -&gt; 0
mysql&gt; select ! 1+1;
        -&gt; 1
</PRE>The last example returns <CODE>1</CODE> because the expression evaluates 
  the same way as <CODE>(!1)+1</CODE>. <A name=IDX633></A><A name=IDX634></A>
  <DT><CODE>OR</CODE> 
  <DD>
  <DT><CODE>||</CODE> 
  <DD>Logical OR. Returns <CODE>1</CODE> if either argument is not 
  <CODE>0</CODE> and not <CODE>NULL</CODE>: <PRE>mysql&gt; select 1 || 0;
        -&gt; 1
mysql&gt; select 0 || 0;
        -&gt; 0
mysql&gt; select 1 || NULL;
        -&gt; 1

</PRE><A name=IDX635></A><A name=IDX636></A>
  <DT><CODE>AND</CODE> 
  <DD>
  <DT><CODE>&amp;&amp;</CODE> 
  <DD>Logical AND. Returns <CODE>0</CODE> if either argument is <CODE>0</CODE> 
  or <CODE>NULL</CODE>, otherwise returns <CODE>1</CODE>: <PRE>mysql&gt; select 1 &amp;&amp; NULL;
        -&gt; 0
mysql&gt; select 1 &amp;&amp; 0;
        -&gt; 0
</PRE></DD></DL>
<P><A name=IDX637></A><A name=IDX638></A><A name=IDX639></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Comparison_functions" 
name=Comparison_functions>7.4.5 Comparison Operators</A></H3>
<P>Comparison operations result in a value of <CODE>1</CODE> (TRUE), 
<CODE>0</CODE> (FALSE), or <CODE>NULL</CODE>. These functions work for both 
numbers and strings. Strings are automatically converted to numbers and numbers 
to strings as needed (as in Perl). </P>
<P><STRONG>MySQL</STRONG> performs comparisons using the following rules: </P>
<UL>
  <LI>If one or both arguments are <CODE>NULL</CODE>, the result of the 
  comparison is <CODE>NULL</CODE>, except for the <CODE>&lt;=&gt;</CODE> 
  operator. 
  <LI>If both arguments in a comparison operation are strings, they are compared 
  as strings. 
  <LI>If both arguments are integers, they are compared as integers. 
  <LI>Hexadecimal values are treated as binary strings if not compared to a 
  number. 
  <LI><A name=IDX640></A><A name=IDX641></A>If one of the arguments is a 
  <CODE>TIMESTAMP</CODE> or <CODE>DATETIME</CODE> column and the other argument 
  is a constant, the constant is converted to a timestamp before the comparison 
  is performed. This is done to be more ODBC-friendly. 
  <LI>In all other cases, the arguments are compared as floating-point (real) 
  numbers. </LI></UL>
<P>By default, string comparisons are done in case-independent fashion using the 
current character set (ISO-8859-1 Latin1 by default, which also works 
excellently for English). </P>
<P>The examples below illustrate conversion of strings to numbers for comparison 
operations: </P><PRE>mysql&gt; SELECT 1 &gt; '6x';
         -&gt; 0
mysql&gt; SELECT 7 &gt; '6x';
         -&gt; 1
mysql&gt; SELECT 0 &gt; 'x6';
         -&gt; 0
mysql&gt; SELECT 0 = 'x6';
         -&gt; 1
</PRE>
<DL compact>
  <DT><CODE>=</CODE> 
  <DD><A name=IDX642></A><A name=IDX643></A>Equal: <PRE>mysql&gt; select 1 = 0;
        -&gt; 0
mysql&gt; select '0' = 0;
        -&gt; 1
mysql&gt; select '0.0' = 0;
        -&gt; 1
mysql&gt; select '0.01' = 0;
        -&gt; 0
mysql&gt; select '.01' = 0.01;
        -&gt; 1
</PRE><A name=IDX644></A><A name=IDX645></A><A name=IDX646></A><A 
  name=IDX647></A>
  <DT><CODE>&lt;&gt;</CODE> 
  <DD>
  <DT><CODE>!=</CODE> 
  <DD>Not equal: <PRE>mysql&gt; select '.01' &lt;&gt; '0.01';
        -&gt; 1
mysql&gt; select .01 &lt;&gt; '0.01';
        -&gt; 0
mysql&gt; select 'zapp' &lt;&gt; 'zappp';
        -&gt; 1
</PRE><A name=IDX648></A><A name=IDX649></A>
  <DT><CODE>&lt;=</CODE> 
  <DD>Less than or equal: <PRE>mysql&gt; select 0.1 &lt;= 2;
        -&gt; 1
</PRE><A name=IDX650></A><A name=IDX651></A>
  <DT><CODE>&lt;</CODE> 
  <DD>Less than: <PRE>mysql&gt; select 2 &lt;= 2;
        -&gt; 1
</PRE><A name=IDX652></A><A name=IDX653></A>
  <DT><CODE>&gt;=</CODE> 
  <DD>Greater than or equal: <PRE>mysql&gt; select 2 &gt;= 2;
        -&gt; 1
</PRE><A name=IDX654></A><A name=IDX655></A>
  <DT><CODE>&gt;</CODE> 
  <DD>Greater than: <PRE>mysql&gt; select 2 &gt; 2;
        -&gt; 0
</PRE><A name=IDX656></A>
  <DT><CODE>&lt;=&gt;</CODE> 
  <DD>Null safe equal: <PRE>mysql&gt; select 1 &lt;=&gt; 1, NULL &lt;=&gt; NULL, 1 &lt;=&gt; NULL;
        -&gt; 1 1 0
</PRE><A name=IDX657></A><A name=IDX658></A>
  <DT><CODE>IS NULL</CODE> 
  <DD>
  <DT><CODE>IS NOT NULL</CODE> 
  <DD>Test whether or not a value is or is not <CODE>NULL</CODE>: <PRE>mysql&gt; select 1 IS NULL, 0 IS NULL, NULL IS NULL;
        -&gt; 0 0 1
mysql&gt; select 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;
        -&gt; 1 1 0
</PRE><A name=IDX659></A>
  <DT><CODE>expr BETWEEN min AND max</CODE> 
  <DD>If <CODE>expr</CODE> is greater than or equal to <CODE>min</CODE> and 
  <CODE>expr</CODE> is less than or equal to <CODE>max</CODE>, 
  <CODE>BETWEEN</CODE> returns <CODE>1</CODE>, otherwise it returns 
  <CODE>0</CODE>. This is equivalent to the expression <CODE>(min &lt;= expr AND 
  expr &lt;= max)</CODE> if all the arguments are of the same type. The first 
  argument (<CODE>expr</CODE>) determines how the comparison is performed as 
  follows: 
  <UL>
    <LI>If <CODE>expr</CODE> is a <CODE>TIMESTAMP</CODE>, <CODE>DATE</CODE>, or 
    <CODE>DATETIME</CODE> column, <CODE>MIN()</CODE> and <CODE>MAX()</CODE> are 
    formatted to the same format if they are constants. 
    <LI>If <CODE>expr</CODE> is a case-insensitive string expression, a 
    case-insensitive string comparison is done. 
    <LI>If <CODE>expr</CODE> is a case-sensitive string expression, a 
    case-sensitive string comparison is done. 
    <LI>If <CODE>expr</CODE> is an integer expression, an integer comparison is 
    done. 
    <LI>Otherwise, a floating-point (real) comparison is done. </LI></UL><PRE>mysql&gt; select 1 BETWEEN 2 AND 3;
        -&gt; 0
mysql&gt; select 'b' BETWEEN 'a' AND 'c';
        -&gt; 1
mysql&gt; select 2 BETWEEN 2 AND '3';
        -&gt; 1
mysql&gt; select 2 BETWEEN 2 AND 'x-3';
        -&gt; 0
</PRE><A name=IDX660></A>
  <DT><CODE>expr IN (value,...)</CODE> 
  <DD>Returns <CODE>1</CODE> if <CODE>expr</CODE> is any of the values in the 
  <CODE>IN</CODE> list, else returns <CODE>0</CODE>. If all values are 
  constants, then all values are evaluated according to the type of 
  <CODE>expr</CODE> and sorted. The search for the item is then done using a 
  binary search. This means <CODE>IN</CODE> is very quick if the <CODE>IN</CODE> 
  value list consists entirely of constants. If <CODE>expr</CODE> is a 
  case-sensitive string expression, the string comparison is performed in 
  case-sensitive fashion: <PRE>mysql&gt; select 2 IN (0,3,5,'wefwf');
        -&gt; 0
mysql&gt; select 'wefwf' IN (0,3,5,'wefwf');
        -&gt; 1
</PRE><A name=IDX661></A>
  <DT><CODE>expr NOT IN (value,...)</CODE> 
  <DD>Same as <CODE>NOT (expr IN (value,...))</CODE>. <A name=IDX662></A>
  <DT><CODE>ISNULL(expr)</CODE> 
  <DD>If <CODE>expr</CODE> is <CODE>NULL</CODE>, <CODE>ISNULL()</CODE> returns 
  <CODE>1</CODE>, otherwise it returns <CODE>0</CODE>: <PRE>mysql&gt; select ISNULL(1+1);
        -&gt; 0
mysql&gt; select ISNULL(1/0);
        -&gt; 1
</PRE>Note that a comparison of <CODE>NULL</CODE> values using <CODE>=</CODE> 
  will always be false! <A name=IDX663></A>
  <DT><CODE>COALESCE(list)</CODE> 
  <DD>Returns first non-<CODE>NULL</CODE> element in list: <PRE>mysql&gt; select COALESCE(NULL,1);
        -&gt; 1
mysql&gt; select COALESCE(NULL,NULL,NULL);
        -&gt; NULL
</PRE><A name=IDX664></A>
  <DT><CODE>INTERVAL(N,N1,N2,N3,...)</CODE> 
  <DD>Returns <CODE>0</CODE> if <CODE>N</CODE> &lt; <CODE>N1</CODE>, 
  <CODE>1</CODE> if <CODE>N</CODE> &lt; <CODE>N2</CODE> and so on. All arguments 
  are treated as integers. It is required that <CODE>N1</CODE> &lt; 
  <CODE>N2</CODE> &lt; <CODE>N3</CODE> &lt; <CODE>...</CODE> &lt; 
  <CODE>Nn</CODE> for this function to work correctly. This is because a binary 
  search is used (very fast): <PRE>mysql&gt; select INTERVAL(23, 1, 15, 17, 30, 44, 200);
        -&gt; 3
mysql&gt; select INTERVAL(10, 1, 10, 100, 1000);
        -&gt; 2
mysql&gt; select INTERVAL(22, 23, 30, 44, 200);
        -&gt; 0
</PRE></DD></DL>
<P><A name=IDX665></A><A name=IDX666></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#String_comparison_functions" 
name=String_comparison_functions>7.4.6 String Comparison Functions</A></H3>
<P><A name=IDX667></A><A name=IDX668></A>Normally, if any expression in a string 
comparison is case sensitive, the comparison is performed in case-sensitive 
fashion. </P>
<DL compact>
  <DT><CODE>expr LIKE pat [ESCAPE 'escape-char']</CODE> 
  <DD><A name=IDX669></A>Pattern matching using SQL simple regular expression 
  comparison. Returns <CODE>1</CODE> (TRUE) or <CODE>0</CODE> (FALSE). With 
  <CODE>LIKE</CODE> you can use the following two wild-card characters in the 
  pattern: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD><CODE>%</CODE> </TD>
      <TD>Matches any number of characters, even zero characters </TD>
    <TR>
      <TD><CODE>_</CODE> </TD>
      <TD>Matches exactly one character </TD></TR></TBODY></TABLE><PRE>mysql&gt; select 'David!' LIKE 'David_';
        -&gt; 1
mysql&gt; select 'David!' LIKE '%D%v%';
        -&gt; 1
</PRE>To test for literal instances of a wild-card character, precede the 
  character with the escape character. If you don't specify the 
  <CODE>ESCAPE</CODE> character, <SAMP>`\'</SAMP> is assumed: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD><CODE>\%</CODE> </TD>
      <TD>Matches one <CODE>%</CODE> character </TD>
    <TR>
      <TD><CODE>\_</CODE> </TD>
      <TD>Matches one <CODE>_</CODE> character </TD></TR></TBODY></TABLE><PRE>mysql&gt; select 'David!' LIKE 'David\_';
        -&gt; 0
mysql&gt; select 'David_' LIKE 'David\_';
        -&gt; 1
</PRE>To specify a different escape character, use the <CODE>ESCAPE</CODE> 
  clause: <PRE>mysql&gt; select 'David_' LIKE 'David|_' ESCAPE '|';
        -&gt; 1
</PRE><CODE>LIKE</CODE> is allowed on numeric expressions! (This is a 
  <STRONG>MySQL</STRONG> extension to the ANSI SQL <CODE>LIKE</CODE>.) <PRE>mysql&gt; select 10 LIKE '1%';
        -&gt; 1
</PRE>Note: Because <STRONG>MySQL</STRONG> uses the C escape syntax in strings 
  (for example, <SAMP>`\n'</SAMP>), you must double any <SAMP>`\'</SAMP> that 
  you use in your <CODE>LIKE</CODE> strings. For example, to search for 
  <SAMP>`\n'</SAMP>, specify it as <SAMP>`\\n'</SAMP>. To search for 
  <SAMP>`\'</SAMP>, specify it as <SAMP>`\\\\'</SAMP> (the backslashes are 
  stripped once by the parser and another time when the pattern match is done, 
  leaving a single backslash to be matched). <A name=IDX670></A>
  <DT><CODE>expr NOT LIKE pat [ESCAPE 'escape-char']</CODE> 
  <DD>Same as <CODE>NOT (expr LIKE pat [ESCAPE 'escape-char'])</CODE>. <A 
  name=IDX671></A><A name=IDX672></A><A name=IDX673></A><A name=IDX674></A>
  <DT><CODE>expr REGEXP pat</CODE> 
  <DD>
  <DT><CODE>expr RLIKE pat</CODE> 
  <DD>Performs a pattern match of a string expression <CODE>expr</CODE> against 
  a pattern <CODE>pat</CODE>. The pattern can be an extended regular expression. 
  See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Regexp.html#Regexp">J 
  Description of MySQL regular expression syntax</A>. Returns <CODE>1</CODE> if 
  <CODE>expr</CODE> matches <CODE>pat</CODE>, otherwise returns <CODE>0</CODE>. 
  <CODE>RLIKE</CODE> is a synonym for <CODE>REGEXP</CODE>, provided for 
  <CODE>mSQL</CODE> compatibility. Note: Because <STRONG>MySQL</STRONG> uses the 
  C escape syntax in strings (for example, <SAMP>`\n'</SAMP>), you must double 
  any <SAMP>`\'</SAMP> that you use in your <CODE>REGEXP</CODE> strings. As of 
  <STRONG>MySQL</STRONG> Version 3.23.4, <CODE>REGEXP</CODE> is case insensitive 
  for normal (not binary) strings: <PRE>mysql&gt; select 'Monty!' REGEXP 'm%y%%';
        -&gt; 0
mysql&gt; select 'Monty!' REGEXP '.*';
        -&gt; 1
mysql&gt; select 'new*\n*line' REGEXP 'new\\*.\\*line';
        -&gt; 1
mysql&gt; select "a" REGEXP "A", "a" REGEXP BINARY "A";
        -&gt; 1  0
mysql&gt; select "a" REGEXP "^[a-d]";
        -&gt; 1
</PRE>
  <DT><CODE></CODE>
  <DD><CODE>REGEXP</CODE> and <CODE>RLIKE</CODE> use the current character set 
  (ISO-8859-1 Latin1 by default) when deciding the type of a character. <A 
  name=IDX675></A>
  <DT><CODE>expr NOT REGEXP pat</CODE> 
  <DD>
  <DT><CODE>expr NOT RLIKE pat</CODE> 
  <DD>Same as <CODE>NOT (expr REGEXP pat)</CODE>. <A name=IDX676></A>
  <DT><CODE>STRCMP(expr1,expr2)</CODE> 
  <DD><CODE>STRCMP()</CODE> returns <CODE>0</CODE> if the strings are the same, 
  <CODE>-1</CODE> if the first argument is smaller than the second according to 
  the current sort order, and <CODE>1</CODE> otherwise: <PRE>mysql&gt; select STRCMP('text', 'text2');
        -&gt; -1
mysql&gt; select STRCMP('text2', 'text');
        -&gt; 1
mysql&gt; select STRCMP('text', 'text');
        -&gt; 0
</PRE><A name=IDX677></A>
  <DT><CODE>MATCH (col1,col2,...) AGAINST (expr)</CODE> 
  <DD><CODE>MATCH ... AGAINST()</CODE> is used for full-text search and returns 
  relevance - similarity measure between the text in columns 
  <CODE>(col1,col2,...)</CODE> and the query <CODE>expr</CODE>. Relevance is a 
  positive floating-point number. Zero relevance means no similarity. For 
  <CODE>MATCH ... AGAINST()</CODE> to work, a <STRONG>FULLTEXT</STRONG> index 
  must be created first. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#CREATE_TABLE">7.7 
  <CODE>CREATE TABLE</CODE> Syntax</A>. <CODE>MATCH ... AGAINST()</CODE> is 
  available in <STRONG>MySQL</STRONG> Version 3.23.23 or later. For details and 
  usage examples see section <A 
  href="file:///D:/work/mysql/manual-split/manual_Fulltext_Search.html#Fulltext_Search">12 
  MySQL Full-text Search</A>. </DD></DL>
<P><A name=IDX678></A><A name=IDX679></A><A name=IDX680></A>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Casts" 
name=Casts>7.4.7 Cast Operators</A></H3>
<DL compact>
  <DT><CODE><CODE>BINARY</CODE></CODE> 
  <DD><A name=IDX681></A>The <CODE>BINARY</CODE> operator casts the string 
  following it to a binary string. This is an easy way to force a column 
  comparison to be case sensitive even if the column isn't defined as 
  <CODE>BINARY</CODE> or <CODE>BLOB</CODE>: <PRE>mysql&gt; select "a" = "A";
        -&gt; 1
mysql&gt; select BINARY "a" = "A";
        -&gt; 0
</PRE><CODE>BINARY</CODE> was introduced in <STRONG>MySQL</STRONG> Version 
  3.23.0. Note that in some context <STRONG>MySQL</STRONG> will not be able to 
  use the index efficiently when you cast an indexed column to 
  <CODE>BINARY</CODE>. </DD></DL>
<P>If you want to compare a blob case-insensitively you can always convert the 
blob to upper case before doing the comparison: </P><PRE>SELECT 'A' LIKE UPPER(blob_col) FROM table_name;
</PRE>
<P>We plan to soon introduce casting between different character sets to make 
string comparison even more flexible. </P>
<P><A name=IDX682></A><A name=IDX683></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Control_flow_functions" 
name=Control_flow_functions>7.4.8 Control Flow Functions</A></H3>
<DL compact>
  <DT><CODE>IFNULL(expr1,expr2)</CODE> 
  <DD><A name=IDX684></A>If <CODE>expr1</CODE> is not <CODE>NULL</CODE>, 
  <CODE>IFNULL()</CODE> returns <CODE>expr1</CODE>, else it returns 
  <CODE>expr2</CODE>. <CODE>IFNULL()</CODE> returns a numeric or string value, 
  depending on the context in which it is used: <PRE>mysql&gt; select IFNULL(1,0);
        -&gt; 1
mysql&gt; select IFNULL(NULL,10);
        -&gt; 10
mysql&gt; select IFNULL(1/0,10);
        -&gt; 10
mysql&gt; select IFNULL(1/0,'yes');
        -&gt; 'yes'
</PRE><A name=IDX685></A>
  <DT><CODE>NULLIF(expr1,expr2)</CODE> 
  <DD>If <CODE>expr1 = expr2</CODE> is true, return <CODE>NULL</CODE> else 
  return <CODE>expr1</CODE>. This is the same as <CODE>CASE WHEN x = y THEN NULL 
  ELSE x END</CODE>: <PRE>mysql&gt; select NULLIF(1,1);
        -&gt; NULL
mysql&gt; select NULLIF(1,2);
        -&gt; 1
</PRE>Note that <CODE>expr1</CODE> is evaluated twice in 
  <STRONG>MySQL</STRONG> if the arguments are equal. <A name=IDX686></A>
  <DT><CODE>IF(expr1,expr2,expr3)</CODE> 
  <DD>If <CODE>expr1</CODE> is TRUE (<CODE>expr1 &lt;&gt; 0</CODE> and 
  <CODE>expr1 &lt;&gt; NULL</CODE>) then <CODE>IF()</CODE> returns 
  <CODE>expr2</CODE>, else it returns <CODE>expr3</CODE>. <CODE>IF()</CODE> 
  returns a numeric or string value, depending on the context in which it is 
  used: <PRE>mysql&gt; select IF(1&gt;2,2,3);
        -&gt; 3
mysql&gt; select IF(1&lt;2,'yes','no');
        -&gt; 'yes'
mysql&gt; select IF(strcmp('test','test1'),'no','yes');
        -&gt; 'no'
</PRE><CODE>expr1</CODE> is evaluated as an integer value, which means that if 
  you are testing floating-point or string values, you should do so using a 
  comparison operation: <PRE>mysql&gt; select IF(0.1,1,0);
        -&gt; 0
mysql&gt; select IF(0.1&lt;&gt;0,1,0);
        -&gt; 1
</PRE>In the first case above, <CODE>IF(0.1)</CODE> returns <CODE>0</CODE> 
  because <CODE>0.1</CODE> is converted to an integer value, resulting in a test 
  of <CODE>IF(0)</CODE>. This may not be what you expect. In the second case, 
  the comparison tests the original floating-point value to see whether it is 
  non-zero. The result of the comparison is used as an integer. The default 
  return type of <CODE>IF()</CODE> (which may matter when it is stored into a 
  temporary table) is calculated in <STRONG>MySQL</STRONG> Version 3.23 as 
  follows: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD><STRONG>Expression</STRONG> </TD>
      <TD><STRONG>Return value</STRONG> </TD>
    <TR>
      <TD>expr2 or expr3 returns string </TD>
      <TD>string </TD>
    <TR>
      <TD>expr2 or expr3 returns a floating-point value </TD>
      <TD>floating-point </TD>
    <TR>
      <TD>expr2 or expr3 returns an integer </TD>
      <TD>integer </TD></TR></TBODY></TABLE><A name=IDX687></A>
  <DT><CODE>CASE value WHEN [compare-value] THEN result [WHEN [compare-value] 
  THEN result ...] [ELSE result] END</CODE> 
  <DD>
  <DT><CODE>CASE WHEN [condition] THEN result [WHEN [condition] THEN result ...] 
  [ELSE result] END</CODE> 
  <DD>The first version returns the <CODE>result</CODE> where 
  <CODE>value=compare-value</CODE>. The second version returns the result for 
  the first condition, which is true. If there was no matching result value, 
  then the result after <CODE>ELSE</CODE> is returned. If there is no 
  <CODE>ELSE</CODE> part then <CODE>NULL</CODE> is returned: <PRE>mysql&gt; SELECT CASE 1 WHEN 1 THEN "one" WHEN 2 THEN "two" ELSE "more" END;
       -&gt; "one"
mysql&gt; SELECT CASE WHEN 1&gt;0 THEN "true" ELSE "false" END;
       -&gt; "true"
mysql&gt; SELECT CASE BINARY "B" when "a" then 1 when "b" then 2 END;
       -&gt; NULL
</PRE></DD></DL>
<P>The type of the return value (<CODE>INTEGER</CODE>, <CODE>DOUBLE</CODE> or 
<CODE>STRING</CODE>) is the same as the type of the first returned value (the 
expression after the first <CODE>THEN</CODE>). </P>
<P><A name=IDX688></A><A name=IDX689></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Mathematical_functions" 
name=Mathematical_functions>7.4.9 Mathematical Functions</A></H3>
<P>All mathematical functions return <CODE>NULL</CODE> in case of an error. </P>
<DL compact>
  <DT><CODE>-</CODE> 
  <DD><A name=IDX690></A><A name=IDX691></A><A name=IDX692></A>Unary minus. 
  Changes the sign of the argument: <PRE>mysql&gt; select - 2;
        -&gt; -2
</PRE>Note that if this operator is used with a <CODE>BIGINT</CODE>, the 
  return value is a <CODE>BIGINT</CODE>! This means that you should avoid using 
  <CODE>-</CODE> on integers that may have the value of <CODE>-2^63</CODE>! <A 
  name=IDX693></A>
  <DT><CODE>ABS(X)</CODE> 
  <DD>Returns the absolute value of <CODE>X</CODE>: <PRE>mysql&gt; select ABS(2);
        -&gt; 2
mysql&gt; select ABS(-32);
        -&gt; 32
</PRE>This function is safe to use with <CODE>BIGINT</CODE> values. <A 
  name=IDX694></A>
  <DT><CODE>SIGN(X)</CODE> 
  <DD>Returns the sign of the argument as <CODE>-1</CODE>, <CODE>0</CODE>, or 
  <CODE>1</CODE>, depending on whether <CODE>X</CODE> is negative, zero, or 
  positive: <PRE>mysql&gt; select SIGN(-32);
        -&gt; -1
mysql&gt; select SIGN(0);
        -&gt; 0
mysql&gt; select SIGN(234);
        -&gt; 1
</PRE><A name=IDX695></A><A name=IDX696></A><A name=IDX697></A>
  <DT><CODE>MOD(N,M)</CODE> 
  <DD>
  <DT><CODE>%</CODE> 
  <DD>Modulo (like the <CODE>%</CODE> operator in C). Returns the remainder of 
  <CODE>N</CODE> divided by <CODE>M</CODE>: <PRE>mysql&gt; select MOD(234, 10);
        -&gt; 4
mysql&gt; select 253 % 7;
        -&gt; 1
mysql&gt; select MOD(29,9);
        -&gt; 2
</PRE>This function is safe to use with <CODE>BIGINT</CODE> values. <A 
  name=IDX698></A>
  <DT><CODE>FLOOR(X)</CODE> 
  <DD>Returns the largest integer value not greater than <CODE>X</CODE>: <PRE>mysql&gt; select FLOOR(1.23);
        -&gt; 1
mysql&gt; select FLOOR(-1.23);
        -&gt; -2
</PRE>Note that the return value is converted to a <CODE>BIGINT</CODE>! <A 
  name=IDX699></A>
  <DT><CODE>CEILING(X)</CODE> 
  <DD>Returns the smallest integer value not less than <CODE>X</CODE>: <PRE>mysql&gt; select CEILING(1.23);
        -&gt; 2
mysql&gt; select CEILING(-1.23);
        -&gt; -1
</PRE>Note that the return value is converted to a <CODE>BIGINT</CODE>! <A 
  name=IDX700></A>
  <DT><CODE>ROUND(X)</CODE> 
  <DD>Returns the argument <CODE>X</CODE>, rounded to the nearest integer: <PRE>mysql&gt; select ROUND(-1.23);
        -&gt; -1
mysql&gt; select ROUND(-1.58);
        -&gt; -2
mysql&gt; select ROUND(1.58);
        -&gt; 2
</PRE>Note that the behavior of <CODE>ROUND()</CODE> when the argument is half 
  way between two integers depends on the C library implementation. Some round 
  to the nearest even number, always up, always down, or always towards zero. If 
  you need one kind of rounding, you should use a well-defined function like 
  <CODE>TRUNCATE()</CODE> or <CODE>FLOOR()</CODE> instead. <A name=IDX701></A>
  <DT><CODE>ROUND(X,D)</CODE> 
  <DD>Returns the argument <CODE>X</CODE>, rounded to a number with 
  <CODE>D</CODE> decimals. If <CODE>D</CODE> is <CODE>0</CODE>, the result will 
  have no decimal point or fractional part: <PRE>mysql&gt; select ROUND(1.298, 1);
        -&gt; 1.3
mysql&gt; select ROUND(1.298, 0);
        -&gt; 1
</PRE><A name=IDX702></A>
  <DT><CODE>EXP(X)</CODE> 
  <DD>Returns the value of <CODE>e</CODE> (the base of natural logarithms) 
  raised to the power of <CODE>X</CODE>: <PRE>mysql&gt; select EXP(2);
        -&gt; 7.389056
mysql&gt; select EXP(-2);
        -&gt; 0.135335
</PRE><A name=IDX703></A>
  <DT><CODE>LOG(X)</CODE> 
  <DD>Returns the natural logarithm of <CODE>X</CODE>: <PRE>mysql&gt; select LOG(2);
        -&gt; 0.693147
mysql&gt; select LOG(-2);
        -&gt; NULL
</PRE>If you want the log of a number <CODE>X</CODE> to some arbitary base 
  <CODE>B</CODE>, use the formula <CODE>LOG(X)/LOG(B)</CODE>. <A 
name=IDX704></A>
  <DT><CODE>LOG10(X)</CODE> 
  <DD>Returns the base-10 logarithm of <CODE>X</CODE>: <PRE>mysql&gt; select LOG10(2);
        -&gt; 0.301030
mysql&gt; select LOG10(100);
        -&gt; 2.000000
mysql&gt; select LOG10(-100);
        -&gt; NULL
</PRE><A name=IDX705></A><A name=IDX706></A>
  <DT><CODE>POW(X,Y)</CODE> 
  <DD>
  <DT><CODE>POWER(X,Y)</CODE> 
  <DD>Returns the value of <CODE>X</CODE> raised to the power of <CODE>Y</CODE>: 
<PRE>mysql&gt; select POW(2,2);
        -&gt; 4.000000
mysql&gt; select POW(2,-2);
        -&gt; 0.250000
</PRE><A name=IDX707></A>
  <DT><CODE>SQRT(X)</CODE> 
  <DD>Returns the non-negative square root of <CODE>X</CODE>: <PRE>mysql&gt; select SQRT(4);
        -&gt; 2.000000
mysql&gt; select SQRT(20);
        -&gt; 4.472136
</PRE><A name=IDX708></A>
  <DT><CODE>PI()</CODE> 
  <DD>Returns the value of PI: <PRE>mysql&gt; select PI();
        -&gt; 3.141593
</PRE><A name=IDX709></A>
  <DT><CODE>COS(X)</CODE> 
  <DD>Returns the cosine of <CODE>X</CODE>, where <CODE>X</CODE> is given in 
  radians: <PRE>mysql&gt; select COS(PI());
        -&gt; -1.000000
</PRE><A name=IDX710></A>
  <DT><CODE>SIN(X)</CODE> 
  <DD>Returns the sine of <CODE>X</CODE>, where <CODE>X</CODE> is given in 
  radians: <PRE>mysql&gt; select SIN(PI());
        -&gt; 0.000000
</PRE><A name=IDX711></A>
  <DT><CODE>TAN(X)</CODE> 
  <DD>Returns the tangent of <CODE>X</CODE>, where <CODE>X</CODE> is given in 
  radians: <PRE>mysql&gt; select TAN(PI()+1);
        -&gt; 1.557408
</PRE><A name=IDX712></A>
  <DT><CODE>ACOS(X)</CODE> 
  <DD>Returns the arc cosine of <CODE>X</CODE>, that is, the value whose cosine 
  is <CODE>X</CODE>. Returns <CODE>NULL</CODE> if <CODE>X</CODE> is not in the 
  range <CODE>-1</CODE> to <CODE>1</CODE>: <PRE>mysql&gt; select ACOS(1);
        -&gt; 0.000000
mysql&gt; select ACOS(1.0001);
        -&gt; NULL
mysql&gt; select ACOS(0);
        -&gt; 1.570796
</PRE><A name=IDX713></A>
  <DT><CODE>ASIN(X)</CODE> 
  <DD>Returns the arc sine of <CODE>X</CODE>, that is, the value whose sine is 
  <CODE>X</CODE>. Returns <CODE>NULL</CODE> if <CODE>X</CODE> is not in the 
  range <CODE>-1</CODE> to <CODE>1</CODE>: <PRE>mysql&gt; select ASIN(0.2);
        -&gt; 0.201358
mysql&gt; select ASIN('foo');
        -&gt; 0.000000
</PRE><A name=IDX714></A>
  <DT><CODE>ATAN(X)</CODE> 
  <DD>Returns the arc tangent of <CODE>X</CODE>, that is, the value whose 
  tangent is <CODE>X</CODE>: <PRE>mysql&gt; select ATAN(2);
        -&gt; 1.107149
mysql&gt; select ATAN(-2);
        -&gt; -1.107149
</PRE><A name=IDX715></A>
  <DT><CODE>ATAN2(Y,X)</CODE> 
  <DD>Returns the arc tangent of the two variables <CODE>X</CODE> and 
  <CODE>Y</CODE>. It is similar to calculating the arc tangent of <CODE>Y / 
  X</CODE>, except that the signs of both arguments are used to determine the 
  quadrant of the result: <PRE>mysql&gt; select ATAN(-2,2);
        -&gt; -0.785398
mysql&gt; select ATAN(PI(),0);
        -&gt; 1.570796
</PRE><A name=IDX716></A>
  <DT><CODE>COT(X)</CODE> 
  <DD>Returns the cotangent of <CODE>X</CODE>: <PRE>mysql&gt; select COT(12);
        -&gt; -1.57267341
mysql&gt; select COT(0);
        -&gt; NULL
</PRE><A name=IDX717></A>
  <DT><CODE>RAND()</CODE> 
  <DD>
  <DT><CODE>RAND(N)</CODE> 
  <DD>Returns a random floating-point value in the range <CODE>0</CODE> to 
  <CODE>1.0</CODE>. If an integer argument <CODE>N</CODE> is specified, it is 
  used as the seed value: <PRE>mysql&gt; select RAND();
        -&gt; 0.5925
mysql&gt; select RAND(20);
        -&gt; 0.1811
mysql&gt; select RAND(20);
        -&gt; 0.1811
mysql&gt; select RAND();
        -&gt; 0.2079
mysql&gt; select RAND();
        -&gt; 0.7888
</PRE>You can't use a column with <CODE>RAND()</CODE> values in an <CODE>ORDER 
  BY</CODE> clause, because <CODE>ORDER BY</CODE> would evaluate the column 
  multiple times. In <STRONG>MySQL</STRONG> Version 3.23, you can, however, do: 
  <CODE>SELECT * FROM table_name ORDER BY RAND()</CODE> This is useful to get a 
  random sample of a set <CODE>SELECT * FROM table1,table2 WHERE a=b AND c&lt;d 
  ORDER BY RAND() LIMIT 1000</CODE>. Note that a <CODE>RAND()</CODE> in a 
  <CODE>WHERE</CODE> clause will be re-evaluated every time the 
  <CODE>WHERE</CODE> is executed. <A name=IDX718></A>
  <DT><CODE>LEAST(X,Y,...)</CODE> 
  <DD>With two or more arguments, returns the smallest (minimum-valued) 
  argument. The arguments are compared using the following rules: 
  <UL>
    <LI>If the return value is used in an <CODE>INTEGER</CODE> context, or all 
    arguments are integer-valued, they are compared as integers. 
    <LI>If the return value is used in a <CODE>REAL</CODE> context, or all 
    arguments are real-valued, they are compared as reals. 
    <LI>If any argument is a case-sensitive string, the arguments are compared 
    as case-sensitive strings. 
    <LI>In other cases, the arguments are compared as case-insensitive strings: 
    </LI></UL><PRE>mysql&gt; select LEAST(2,0);
        -&gt; 0
mysql&gt; select LEAST(34.0,3.0,5.0,767.0);
        -&gt; 3.0
mysql&gt; select LEAST("B","A","C");
        -&gt; "A"
</PRE>In <STRONG>MySQL</STRONG> versions prior to Version 3.22.5, you can use 
  <CODE>MIN()</CODE> instead of <CODE>LEAST</CODE>. <A name=IDX719></A>
  <DT><CODE>GREATEST(X,Y,...)</CODE> 
  <DD>Returns the largest (maximum-valued) argument. The arguments are compared 
  using the same rules as for <CODE>LEAST</CODE>: <PRE>mysql&gt; select GREATEST(2,0);
        -&gt; 2
mysql&gt; select GREATEST(34.0,3.0,5.0,767.0);
        -&gt; 767.0
mysql&gt; select GREATEST("B","A","C");
        -&gt; "C"
</PRE>In <STRONG>MySQL</STRONG> versions prior to Version 3.22.5, you can use 
  <CODE>MAX()</CODE> instead of <CODE>GREATEST</CODE>. <A name=IDX720></A>
  <DT><CODE>DEGREES(X)</CODE> 
  <DD>Returns the argument <CODE>X</CODE>, converted from radians to degrees: <PRE>mysql&gt; select DEGREES(PI());
        -&gt; 180.000000
</PRE><A name=IDX721></A>
  <DT><CODE>RADIANS(X)</CODE> 
  <DD>Returns the argument <CODE>X</CODE>, converted from degrees to radians: <PRE>mysql&gt; select RADIANS(90);
        -&gt; 1.570796
</PRE><A name=IDX722></A>
  <DT><CODE>TRUNCATE(X,D)</CODE> 
  <DD>Returns the number <CODE>X</CODE>, truncated to <CODE>D</CODE> decimals. 
  If <CODE>D</CODE> is <CODE>0</CODE>, the result will have no decimal point or 
  fractional part: <PRE>mysql&gt; select TRUNCATE(1.223,1);
        -&gt; 1.2
mysql&gt; select TRUNCATE(1.999,1);
        -&gt; 1.9
mysql&gt; select TRUNCATE(1.999,0);
        -&gt; 1
</PRE>Note that as decimal numbers are normally not stored as exact numbers in 
  computers, but as double values, you may be fooled by the following result: <A 
  name=IDX723></A><PRE>mysql&gt; select TRUNCATE(10.28*100,0);
       -&gt; 1027
</PRE>The above happens because 10.28 is actually stored as something like 
  10.2799999999999999. </DD></DL>
<P><A name=IDX724></A><A name=IDX725></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#String_functions" 
name=String_functions>7.4.10 String Functions</A></H3>
<P>String-valued functions return <CODE>NULL</CODE> if the length of the result 
would be greater than the <CODE>max_allowed_packet</CODE> server parameter. See 
section <A 
href="file:///D:/work/mysql/manual-split/manual_Performance.html#Server_parameters">13.2.4 
Tuning Server Parameters</A>. </P>
<P>For functions that operate on string positions, the first position is 
numbered 1. </P>
<DL compact>
  <DT><CODE>ASCII(str)</CODE> 
  <DD><A name=IDX726></A>Returns the ASCII code value of the leftmost character 
  of the string <CODE>str</CODE>. Returns <CODE>0</CODE> if <CODE>str</CODE> is 
  the empty string. Returns <CODE>NULL</CODE> if <CODE>str</CODE> is 
  <CODE>NULL</CODE>: <PRE>mysql&gt; select ASCII('2');
        -&gt; 50
mysql&gt; select ASCII(2);
        -&gt; 50
mysql&gt; select ASCII('dx');
        -&gt; 100
</PRE>See also the <CODE>ORD()</CODE> function. <A name=IDX727></A>
  <DT><CODE>ORD(str)</CODE> 
  <DD>If the leftmost character of the string str is a multi-byte character, 
  returns the code of multi-byte character by returning the ASCII code value of 
  the character in the format of: <CODE>((first byte ASCII code)*256+(second 
  byte ASCII code))[*256+third byte ASCII code...]</CODE>. If the leftmost 
  character is not a multi-byte character, returns the same value as the like 
  <CODE>ASCII()</CODE> function does: <PRE>mysql&gt; select ORD('2');
        -&gt; 50
</PRE><A name=IDX728></A>
  <DT><CODE>CONV(N,from_base,to_base)</CODE> 
  <DD>Converts numbers between different number bases. Returns a string 
  representation of the number <CODE>N</CODE>, converted from base 
  <CODE>from_base</CODE> to base <CODE>to_base</CODE>. Returns <CODE>NULL</CODE> 
  if any argument is <CODE>NULL</CODE>. The argument <CODE>N</CODE> is 
  interpreted as an integer, but may be specified as an integer or a string. The 
  minimum base is <CODE>2</CODE> and the maximum base is <CODE>36</CODE>. If 
  <CODE>to_base</CODE> is a negative number, <CODE>N</CODE> is regarded as a 
  signed number. Otherwise, <CODE>N</CODE> is treated as unsigned. 
  <CODE>CONV</CODE> works with 64-bit precision: <PRE>mysql&gt; select CONV("a",16,2);
        -&gt; '1010'
mysql&gt; select CONV("6E",18,8);
        -&gt; '172'
mysql&gt; select CONV(-17,10,-18);
        -&gt; '-H'
mysql&gt; select CONV(10+"10"+'10'+0xa,10,10);
        -&gt; '40'
</PRE><A name=IDX729></A>
  <DT><CODE>BIN(N)</CODE> 
  <DD>Returns a string representation of the binary value of <CODE>N</CODE>, 
  where <CODE>N</CODE> is a longlong (<CODE>BIGINT</CODE>) number. This is 
  equivalent to <CODE>CONV(N,10,2)</CODE>. Returns <CODE>NULL</CODE> if 
  <CODE>N</CODE> is <CODE>NULL</CODE>: <PRE>mysql&gt; select BIN(12);
        -&gt; '1100'
</PRE><A name=IDX730></A>
  <DT><CODE>OCT(N)</CODE> 
  <DD>Returns a string representation of the octal value of <CODE>N</CODE>, 
  where <CODE>N</CODE> is a longlong number. This is equivalent to 
  <CODE>CONV(N,10,8)</CODE>. Returns <CODE>NULL</CODE> if <CODE>N</CODE> is 
  <CODE>NULL</CODE>: <PRE>mysql&gt; select OCT(12);
        -&gt; '14'
</PRE><A name=IDX731></A>
  <DT><CODE>HEX(N)</CODE> 
  <DD>Returns a string representation of the hexadecimal value of 
  <CODE>N</CODE>, where <CODE>N</CODE> is a longlong (<CODE>BIGINT</CODE>) 
  number. This is equivalent to <CODE>CONV(N,10,16)</CODE>. Returns 
  <CODE>NULL</CODE> if <CODE>N</CODE> is <CODE>NULL</CODE>: <PRE>mysql&gt; select HEX(255);
        -&gt; 'FF'
</PRE><A name=IDX732></A>
  <DT><CODE>CHAR(N,...)</CODE> 
  <DD><CODE>CHAR()</CODE> interprets the arguments as integers and returns a 
  string consisting of the characters given by the ASCII code values of those 
  integers. <CODE>NULL</CODE> values are skipped: <PRE>mysql&gt; select CHAR(77,121,83,81,'76');
        -&gt; 'MySQL'
mysql&gt; select CHAR(77,77.3,'77.3');
        -&gt; 'MMM'
</PRE><A name=IDX733></A>
  <DT><CODE>CONCAT(str1,str2,...)</CODE> 
  <DD>Returns the string that results from concatenating the arguments. Returns 
  <CODE>NULL</CODE> if any argument is <CODE>NULL</CODE>. May have more than 2 
  arguments. A numeric argument is converted to the equivalent string form: <PRE>mysql&gt; select CONCAT('My', 'S', 'QL');
        -&gt; 'MySQL'
mysql&gt; select CONCAT('My', NULL, 'QL');
        -&gt; NULL
mysql&gt; select CONCAT(14.3);
        -&gt; '14.3'
</PRE><A name=IDX734></A>
  <DT><CODE>CONCAT_WS(separator, str1, str2,...)</CODE> 
  <DD><CODE>CONCAT_WS()</CODE> stands for CONCAT With Separator and is a special 
  form of <CODE>CONCAT()</CODE>. The first argument is the separator for the 
  rest of the arguments. The separator can be a string as well as the rest of 
  the arguments. If the separator is <CODE>NULL</CODE>, the result will be 
  <CODE>NULL</CODE>. The function will skip any <CODE>NULL</CODE>s and empty 
  strings, after the separator argument. The separator will be added between the 
  strings to be concatenated: <PRE>mysql&gt; select CONCAT_WS(",","First name","Second name","Last Name");
       -&gt; 'First name,Second name,Last Name'
mysql&gt; select CONCAT_WS(",","First name",NULL,"Last Name");
       -&gt; 'First name,Last Name'
</PRE><A name=IDX735></A><A name=IDX736></A><A name=IDX737></A><A 
  name=IDX738></A>
  <DT><CODE>LENGTH(str)</CODE> 
  <DD>
  <DT><CODE>OCTET_LENGTH(str)</CODE> 
  <DD>
  <DT><CODE>CHAR_LENGTH(str)</CODE> 
  <DD>
  <DT><CODE>CHARACTER_LENGTH(str)</CODE> 
  <DD>Returns the length of the string <CODE>str</CODE>: <PRE>mysql&gt; select LENGTH('text');
        -&gt; 4
mysql&gt; select OCTET_LENGTH('text');
        -&gt; 4
</PRE>Note that for <CODE>CHAR_LENGTH()</CODE>, multi-byte characters are only 
  counted once. <A name=IDX739></A><A name=IDX740></A>
  <DT><CODE>LOCATE(substr,str)</CODE> 
  <DD>
  <DT><CODE>POSITION(substr IN str)</CODE> 
  <DD>Returns the position of the first occurrence of substring 
  <CODE>substr</CODE> in string <CODE>str</CODE>. Returns <CODE>0</CODE> if 
  <CODE>substr</CODE> is not in <CODE>str</CODE>: <PRE>mysql&gt; select LOCATE('bar', 'foobarbar');
        -&gt; 4
mysql&gt; select LOCATE('xbar', 'foobar');
        -&gt; 0
</PRE>This function is multi-byte safe. <A name=IDX741></A>
  <DT><CODE>LOCATE(substr,str,pos)</CODE> 
  <DD>Returns the position of the first occurrence of substring 
  <CODE>substr</CODE> in string <CODE>str</CODE>, starting at position 
  <CODE>pos</CODE>. Returns <CODE>0</CODE> if <CODE>substr</CODE> is not in 
  <CODE>str</CODE>: <PRE>mysql&gt; select LOCATE('bar', 'foobarbar',5);
        -&gt; 7
</PRE>This function is multi-byte safe. <A name=IDX742></A>
  <DT><CODE>INSTR(str,substr)</CODE> 
  <DD>Returns the position of the first occurrence of substring 
  <CODE>substr</CODE> in string <CODE>str</CODE>. This is the same as the 
  two-argument form of <CODE>LOCATE()</CODE>, except that the arguments are 
  swapped: <PRE>mysql&gt; select INSTR('foobarbar', 'bar');
        -&gt; 4
mysql&gt; select INSTR('xbar', 'foobar');
        -&gt; 0
</PRE>This function is multi-byte safe. <A name=IDX743></A>
  <DT><CODE>LPAD(str,len,padstr)</CODE> 
  <DD>Returns the string <CODE>str</CODE>, left-padded with the string 
  <CODE>padstr</CODE> until <CODE>str</CODE> is <CODE>len</CODE> characters 
  long. If <CODE>str</CODE> is longer than <CODE>len'</CODE> then it will be 
  shortened to <CODE>len</CODE> characters. <PRE>mysql&gt; select LPAD('hi',4,'??');
        -&gt; '??hi'
</PRE><A name=IDX744></A>
  <DT><CODE>RPAD(str,len,padstr)</CODE> 
  <DD>Returns the string <CODE>str</CODE>, right-padded with the string 
  <CODE>padstr</CODE> until <CODE>str</CODE> is <CODE>len</CODE> characters 
  long. If <CODE>str</CODE> is longer than <CODE>len'</CODE> then it will be 
  shortened to <CODE>len</CODE> characters. <PRE>mysql&gt; select RPAD('hi',5,'?');
        -&gt; 'hi???'
</PRE><A name=IDX745></A>
  <DT><CODE>LEFT(str,len)</CODE> 
  <DD>Returns the leftmost <CODE>len</CODE> characters from the string 
  <CODE>str</CODE>: <PRE>mysql&gt; select LEFT('foobarbar', 5);
        -&gt; 'fooba'
</PRE>This function is multi-byte safe. <A name=IDX746></A>
  <DT><CODE>RIGHT(str,len)</CODE> 
  <DD>Returns the rightmost <CODE>len</CODE> characters from the string 
  <CODE>str</CODE>: <PRE>mysql&gt; select RIGHT('foobarbar', 4);
        -&gt; 'rbar'
</PRE>This function is multi-byte safe. <A name=IDX747></A><A name=IDX748></A>
  <DT><CODE>SUBSTRING(str,pos,len)</CODE> 
  <DD>
  <DT><CODE>SUBSTRING(str FROM pos FOR len)</CODE> 
  <DD>
  <DT><CODE>MID(str,pos,len)</CODE> 
  <DD>Returns a substring <CODE>len</CODE> characters long from string 
  <CODE>str</CODE>, starting at position <CODE>pos</CODE>. The variant form that 
  uses <CODE>FROM</CODE> is ANSI SQL92 syntax: <PRE>mysql&gt; select SUBSTRING('Quadratically',5,6);
        -&gt; 'ratica'
</PRE>This function is multi-byte safe. <A name=IDX749></A>
  <DT><CODE>SUBSTRING(str,pos)</CODE> 
  <DD>
  <DT><CODE>SUBSTRING(str FROM pos)</CODE> 
  <DD>Returns a substring from string <CODE>str</CODE> starting at position 
  <CODE>pos</CODE>: <PRE>mysql&gt; select SUBSTRING('Quadratically',5);
        -&gt; 'ratically'
mysql&gt; select SUBSTRING('foobarbar' FROM 4);
        -&gt; 'barbar'
</PRE>This function is multi-byte safe. <A name=IDX750></A>
  <DT><CODE>SUBSTRING_INDEX(str,delim,count)</CODE> 
  <DD>Returns the substring from string <CODE>str</CODE> before 
  <CODE>count</CODE> occurrences of the delimiter <CODE>delim</CODE>. If 
  <CODE>count</CODE> is positive, everything to the left of the final delimiter 
  (counting from the left) is returned. If <CODE>count</CODE> is negative, 
  everything to the right of the final delimiter (counting from the right) is 
  returned: <PRE>mysql&gt; select SUBSTRING_INDEX('www.mysql.com', '.', 2);
        -&gt; 'www.mysql'
mysql&gt; select SUBSTRING_INDEX('www.mysql.com', '.', -2);
        -&gt; 'mysql.com'
</PRE>This function is multi-byte safe. <A name=IDX751></A>
  <DT><CODE>LTRIM(str)</CODE> 
  <DD>Returns the string <CODE>str</CODE> with leading space characters removed: 
<PRE>mysql&gt; select LTRIM('  barbar');
        -&gt; 'barbar'
</PRE><A name=IDX752></A>
  <DT><CODE>RTRIM(str)</CODE> 
  <DD>Returns the string <CODE>str</CODE> with trailing space characters 
  removed: <PRE>mysql&gt; select RTRIM('barbar   ');
        -&gt; 'barbar'
</PRE>This function is multi-byte safe. <A name=IDX753></A>
  <DT><CODE>TRIM([[BOTH | LEADING | TRAILING] [remstr] FROM] str)</CODE> 
  <DD>Returns the string <CODE>str</CODE> with all <CODE>remstr</CODE> prefixes 
  and/or suffixes removed. If none of the specifiers <CODE>BOTH</CODE>, 
  <CODE>LEADING</CODE> or <CODE>TRAILING</CODE> are given, <CODE>BOTH</CODE> is 
  assumed. If <CODE>remstr</CODE> is not specified, spaces are removed: <PRE>mysql&gt; select TRIM('  bar   ');
        -&gt; 'bar'
mysql&gt; select TRIM(LEADING 'x' FROM 'xxxbarxxx');
        -&gt; 'barxxx'
mysql&gt; select TRIM(BOTH 'x' FROM 'xxxbarxxx');
        -&gt; 'bar'
mysql&gt; select TRIM(TRAILING 'xyz' FROM 'barxxyz');
        -&gt; 'barx'
</PRE>This function is multi-byte safe. <A name=IDX754></A>
  <DT><CODE>SOUNDEX(str)</CODE> 
  <DD>Returns a soundex string from <CODE>str</CODE>. Two strings that sound 
  almost the same should have identical soundex strings. A standard soundex 
  string is 4 characters long, but the <CODE>SOUNDEX()</CODE> function returns 
  an arbitrarily long string. You can use <CODE>SUBSTRING()</CODE> on the result 
  to get a standard soundex string. All non-alphanumeric characters are ignored 
  in the given string. All international alpha characters outside the A-Z range 
  are treated as vowels: <PRE>mysql&gt; select SOUNDEX('Hello');
        -&gt; 'H400'
mysql&gt; select SOUNDEX('Quadratically');
        -&gt; 'Q36324'
</PRE><A name=IDX755></A>
  <DT><CODE>SPACE(N)</CODE> 
  <DD>Returns a string consisting of <CODE>N</CODE> space characters: <PRE>mysql&gt; select SPACE(6);
        -&gt; '      '
</PRE><A name=IDX756></A>
  <DT><CODE>REPLACE(str,from_str,to_str)</CODE> 
  <DD>Returns the string <CODE>str</CODE> with all all occurrences of the string 
  <CODE>from_str</CODE> replaced by the string <CODE>to_str</CODE>: <PRE>mysql&gt; select REPLACE('www.mysql.com', 'w', 'Ww');
        -&gt; 'WwWwWw.mysql.com'
</PRE>This function is multi-byte safe. <A name=IDX757></A>
  <DT><CODE>REPEAT(str,count)</CODE> 
  <DD>Returns a string consisting of the string <CODE>str</CODE> repeated 
  <CODE>count</CODE> times. If <CODE>count &lt;= 0</CODE>, returns an empty 
  string. Returns <CODE>NULL</CODE> if <CODE>str</CODE> or <CODE>count</CODE> 
  are <CODE>NULL</CODE>: <PRE>mysql&gt; select REPEAT('MySQL', 3);
        -&gt; 'MySQLMySQLMySQL'
</PRE><A name=IDX758></A>
  <DT><CODE>REVERSE(str)</CODE> 
  <DD>Returns the string <CODE>str</CODE> with the order of the characters 
  reversed: <PRE>mysql&gt; select REVERSE('abc');
        -&gt; 'cba'
</PRE>This function is multi-byte safe. <A name=IDX759></A>
  <DT><CODE>INSERT(str,pos,len,newstr)</CODE> 
  <DD>Returns the string <CODE>str</CODE>, with the substring beginning at 
  position <CODE>pos</CODE> and <CODE>len</CODE> characters long replaced by the 
  string <CODE>newstr</CODE>: <PRE>mysql&gt; select INSERT('Quadratic', 3, 4, 'What');
        -&gt; 'QuWhattic'
</PRE>This function is multi-byte safe. <A name=IDX760></A>
  <DT><CODE>ELT(N,str1,str2,str3,...)</CODE> 
  <DD>Returns <CODE>str1</CODE> if <CODE>N</CODE> = <CODE>1</CODE>, 
  <CODE>str2</CODE> if <CODE>N</CODE> = <CODE>2</CODE>, and so on. Returns 
  <CODE>NULL</CODE> if <CODE>N</CODE> is less than <CODE>1</CODE> or greater 
  than the number of arguments. <CODE>ELT()</CODE> is the complement of 
  <CODE>FIELD()</CODE>: <PRE>mysql&gt; select ELT(1, 'ej', 'Heja', 'hej', 'foo');
        -&gt; 'ej'
mysql&gt; select ELT(4, 'ej', 'Heja', 'hej', 'foo');
        -&gt; 'foo'
</PRE><A name=IDX761></A>
  <DT><CODE>FIELD(str,str1,str2,str3,...)</CODE> 
  <DD>Returns the index of <CODE>str</CODE> in the <CODE>str1</CODE>, 
  <CODE>str2</CODE>, <CODE>str3</CODE>, <CODE>...</CODE> list. Returns 
  <CODE>0</CODE> if <CODE>str</CODE> is not found. <CODE>FIELD()</CODE> is the 
  complement of <CODE>ELT()</CODE>: <PRE>mysql&gt; select FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo');
        -&gt; 2
mysql&gt; select FIELD('fo', 'Hej', 'ej', 'Heja', 'hej', 'foo');
        -&gt; 0
</PRE><A name=IDX762></A>
  <DT><CODE>FIND_IN_SET(str,strlist)</CODE> 
  <DD>Returns a value <CODE>1</CODE> to <CODE>N</CODE> if the string 
  <CODE>str</CODE> is in the list <CODE>strlist</CODE> consisting of 
  <CODE>N</CODE> substrings. A string list is a string composed of substrings 
  separated by <SAMP>`,'</SAMP> characters. If the first argument is a constant 
  string and the second is a column of type <CODE>SET</CODE>, the 
  <CODE>FIND_IN_SET()</CODE> function is optimized to use bit arithmetic! 
  Returns <CODE>0</CODE> if <CODE>str</CODE> is not in <CODE>strlist</CODE> or 
  if <CODE>strlist</CODE> is the empty string. Returns <CODE>NULL</CODE> if 
  either argument is <CODE>NULL</CODE>. This function will not work properly if 
  the first argument contains a <SAMP>`,'</SAMP>: <PRE>mysql&gt; SELECT FIND_IN_SET('b','a,b,c,d');
        -&gt; 2
</PRE><A name=IDX763></A>
  <DT><CODE>MAKE_SET(bits,str1,str2,...)</CODE> 
  <DD>Returns a set (a string containing substrings separated by 
  <SAMP>`,'</SAMP> characters) consisting of the strings that have the 
  corresponding bit in <CODE>bits</CODE> set. <CODE>str1</CODE> corresponds to 
  bit 0, <CODE>str2</CODE> to bit 1, etc. <CODE>NULL</CODE> strings in 
  <CODE>str1</CODE>, <CODE>str2</CODE>, <CODE>...</CODE> are not appended to the 
  result: <PRE>mysql&gt; SELECT MAKE_SET(1,'a','b','c');
        -&gt; 'a'
mysql&gt; SELECT MAKE_SET(1 | 4,'hello','nice','world');
        -&gt; 'hello,world'
mysql&gt; SELECT MAKE_SET(0,'a','b','c');
        -&gt; ''
</PRE><A name=IDX764></A>
  <DT><CODE>EXPORT_SET(bits,on,off,[separator,[number_of_bits]])</CODE> 
  <DD>Returns a string where for every bit set in 'bit', you get an 'on' string 
  and for every reset bit you get an 'off' string. Each string is separated with 
  'separator' (default ',') and only 'number_of_bits' (default 64) of 'bits' is 
  used: <PRE>mysql&gt; select EXPORT_SET(5,'Y','N',',',4)
        -&gt; Y,N,Y,N
</PRE><A name=IDX765></A><A name=IDX766></A>
  <DT><CODE>LCASE(str)</CODE> 
  <DD>
  <DT><CODE>LOWER(str)</CODE> 
  <DD>Returns the string <CODE>str</CODE> with all characters changed to 
  lowercase according to the current character set mapping (the default is 
  ISO-8859-1 Latin1): <PRE>mysql&gt; select LCASE('QUADRATICALLY');
        -&gt; 'quadratically'
</PRE>This function is multi-byte safe. <A name=IDX767></A><A name=IDX768></A>
  <DT><CODE>UCASE(str)</CODE> 
  <DD>
  <DT><CODE>UPPER(str)</CODE> 
  <DD>Returns the string <CODE>str</CODE> with all characters changed to 
  uppercase according to the current character set mapping (the default is 
  ISO-8859-1 Latin1): <PRE>mysql&gt; select UCASE('Hej');
        -&gt; 'HEJ'
</PRE>This function is multi-byte safe. <A name=IDX769></A><A name=IDX770></A>
  <DT><CODE>LOAD_FILE(file_name)</CODE> 
  <DD>Reads the file and returns the file contents as a string. The file must be 
  on the server, you must specify the full pathname to the file, and you must 
  have the <STRONG>file</STRONG> privilege. The file must be readable by all and 
  be smaller than <CODE>max_allowed_packet</CODE>. If the file doesn't exist or 
  can't be read due to one of the above reasons, the function returns 
  <CODE>NULL</CODE>: <PRE>mysql&gt; UPDATE table_name
           SET blob_column=LOAD_FILE("/tmp/picture")
           WHERE id=1;
</PRE></DD></DL>
<P>If you are not using <STRONG>MySQL</STRONG> Version 3.23, you have to do the 
reading of the file inside your application and create an <CODE>INSERT</CODE> 
statement to update the database with the file information. One way to do this, 
if you are using the <STRONG>MySQL</STRONG>++ library, can be found at <A 
href="http://www.mysql.com/documentation/mysql++/mysql++-examples.html">http://www.mysql.com/documentation/mysql++/mysql++-examples.html</A>. 
</P>
<P><STRONG>MySQL</STRONG> automatically converts numbers to strings as 
necessary, and vice-versa: </P><PRE>mysql&gt; SELECT 1+"1";
        -&gt; 2
mysql&gt; SELECT CONCAT(2,' test');
        -&gt; '2 test'
</PRE>
<P>If you want to convert a number to a string explicitly, pass it as the 
argument to <CODE>CONCAT()</CODE>. </P>
<P>If a string function is given a binary string as an argument, the resulting 
string is also a binary string. A number converted to a string is treated as a 
binary string. This only affects comparisons. </P>
<P><A name=IDX771></A><A name=IDX772></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Date_and_time_functions" 
name=Date_and_time_functions>7.4.11 Date and Time Functions</A></H3>
<P>See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Date_and_time_types">7.3.3 
Date and Time Types</A> for a description of the range of values each type has 
and the valid formats in which date and time values may be specified. </P>
<P>Here is an example that uses date functions. The query below selects all 
records with a <CODE>date_col</CODE> value from within the last 30 days: </P><PRE>mysql&gt; SELECT something FROM table
           WHERE TO_DAYS(NOW()) - TO_DAYS(date_col) &lt;= 30;
</PRE>
<DL compact>
  <DT><CODE>DAYOFWEEK(date)</CODE> 
  <DD><A name=IDX773></A>Returns the weekday index for <CODE>date</CODE> 
  (<CODE>1</CODE> = Sunday, <CODE>2</CODE> = Monday, ... <CODE>7</CODE> = 
  Saturday). These index values correspond to the ODBC standard: <PRE>mysql&gt; select DAYOFWEEK('1998-02-03');
        -&gt; 3
</PRE><A name=IDX774></A>
  <DT><CODE>WEEKDAY(date)</CODE> 
  <DD>Returns the weekday index for <CODE>date</CODE> (<CODE>0</CODE> = Monday, 
  <CODE>1</CODE> = Tuesday, ... <CODE>6</CODE> = Sunday): <PRE>mysql&gt; select WEEKDAY('1997-10-04 22:23:00');
        -&gt; 5
mysql&gt; select WEEKDAY('1997-11-05');
        -&gt; 2
</PRE><A name=IDX775></A>
  <DT><CODE>DAYOFMONTH(date)</CODE> 
  <DD>Returns the day of the month for <CODE>date</CODE>, in the range 
  <CODE>1</CODE> to <CODE>31</CODE>: <PRE>mysql&gt; select DAYOFMONTH('1998-02-03');
        -&gt; 3
</PRE><A name=IDX776></A>
  <DT><CODE>DAYOFYEAR(date)</CODE> 
  <DD>Returns the day of the year for <CODE>date</CODE>, in the range 
  <CODE>1</CODE> to <CODE>366</CODE>: <PRE>mysql&gt; select DAYOFYEAR('1998-02-03');
        -&gt; 34
</PRE><A name=IDX777></A>
  <DT><CODE>MONTH(date)</CODE> 
  <DD>Returns the month for <CODE>date</CODE>, in the range <CODE>1</CODE> to 
  <CODE>12</CODE>: <PRE>mysql&gt; select MONTH('1998-02-03');
        -&gt; 2
</PRE><A name=IDX778></A>
  <DT><CODE>DAYNAME(date)</CODE> 
  <DD>Returns the name of the weekday for <CODE>date</CODE>: <PRE>mysql&gt; select DAYNAME("1998-02-05");
        -&gt; 'Thursday'
</PRE><A name=IDX779></A>
  <DT><CODE>MONTHNAME(date)</CODE> 
  <DD>Returns the name of the month for <CODE>date</CODE>: <PRE>mysql&gt; select MONTHNAME("1998-02-05");
        -&gt; 'February'
</PRE><A name=IDX780></A>
  <DT><CODE>QUARTER(date)</CODE> 
  <DD>Returns the quarter of the year for <CODE>date</CODE>, in the range 
  <CODE>1</CODE> to <CODE>4</CODE>: <PRE>mysql&gt; select QUARTER('98-04-01');
        -&gt; 2
</PRE><A name=IDX781></A>
  <DT><CODE>WEEK(date)</CODE> 
  <DD>
  <DT><CODE>WEEK(date,first)</CODE> 
  <DD>With a single argument, returns the week for <CODE>date</CODE>, in the 
  range <CODE>0</CODE> to <CODE>53</CODE> (yes, there may be the beginnings of a 
  week 53), for locations where Sunday is the first day of the week. The 
  two-argument form of <CODE>WEEK()</CODE> allows you to specify whether the 
  week starts on Sunday or Monday. The week starts on Sunday if the second 
  argument is <CODE>0</CODE>, on Monday if the second argument is 
  <CODE>1</CODE>: <PRE>mysql&gt; select WEEK('1998-02-20');
        -&gt; 7
mysql&gt; select WEEK('1998-02-20',0);
        -&gt; 7
mysql&gt; select WEEK('1998-02-20',1);
        -&gt; 8
mysql&gt; select WEEK('1998-12-31',1);
        -&gt; 53
</PRE><A name=IDX782></A>
  <DT><CODE>YEAR(date)</CODE> 
  <DD>Returns the year for <CODE>date</CODE>, in the range <CODE>1000</CODE> to 
  <CODE>9999</CODE>: <PRE>mysql&gt; select YEAR('98-02-03');
        -&gt; 1998
</PRE>
  <DT><CODE>YEARWEEK(date)</CODE> 
  <DD>
  <DT><CODE>YEARWEEK(date,first)</CODE> 
  <DD>Returns year and week for a date. The second arguments works exactly like 
  the second argument to <CODE>WEEK()</CODE>. Note that the year may be 
  different from the year in the date argument for the first and the last week 
  of the year: <PRE>mysql&gt; select YEARWEEK('1987-01-01');
        -&gt; 198653
</PRE><A name=IDX783></A>
  <DT><CODE>HOUR(time)</CODE> 
  <DD>Returns the hour for <CODE>time</CODE>, in the range <CODE>0</CODE> to 
  <CODE>23</CODE>: <PRE>mysql&gt; select HOUR('10:05:03');
        -&gt; 10
</PRE><A name=IDX784></A>
  <DT><CODE>MINUTE(time)</CODE> 
  <DD>Returns the minute for <CODE>time</CODE>, in the range <CODE>0</CODE> to 
  <CODE>59</CODE>: <PRE>mysql&gt; select MINUTE('98-02-03 10:05:03');
        -&gt; 5
</PRE><A name=IDX785></A>
  <DT><CODE>SECOND(time)</CODE> 
  <DD>Returns the second for <CODE>time</CODE>, in the range <CODE>0</CODE> to 
  <CODE>59</CODE>: <PRE>mysql&gt; select SECOND('10:05:03');
        -&gt; 3
</PRE><A name=IDX786></A>
  <DT><CODE>PERIOD_ADD(P,N)</CODE> 
  <DD>Adds <CODE>N</CODE> months to period <CODE>P</CODE> (in the format 
  <CODE>YYMM</CODE> or <CODE>YYYYMM</CODE>). Returns a value in the format 
  <CODE>YYYYMM</CODE>. Note that the period argument <CODE>P</CODE> is 
  <EM>not</EM> a date value: <PRE>mysql&gt; select PERIOD_ADD(9801,2);
        -&gt; 199803
</PRE><A name=IDX787></A>
  <DT><CODE>PERIOD_DIFF(P1,P2)</CODE> 
  <DD>Returns the number of months between periods <CODE>P1</CODE> and 
  <CODE>P2</CODE>. <CODE>P1</CODE> and <CODE>P2</CODE> should be in the format 
  <CODE>YYMM</CODE> or <CODE>YYYYMM</CODE>. Note that the period arguments 
  <CODE>P1</CODE> and <CODE>P2</CODE> are <EM>not</EM> date values: <PRE>mysql&gt; select PERIOD_DIFF(9802,199703);
        -&gt; 11
</PRE><A name=IDX788></A><A name=IDX789></A><A name=IDX790></A><A 
  name=IDX791></A><A name=IDX792></A>
  <DT><CODE>DATE_ADD(date,INTERVAL expr type)</CODE> 
  <DD>
  <DT><CODE>DATE_SUB(date,INTERVAL expr type)</CODE> 
  <DD>
  <DT><CODE>ADDDATE(date,INTERVAL expr type)</CODE> 
  <DD>
  <DT><CODE>SUBDATE(date,INTERVAL expr type)</CODE> 
  <DD>These functions perform date arithmetic. They are new for 
  <STRONG>MySQL</STRONG> Version 3.22. <CODE>ADDDATE()</CODE> and 
  <CODE>SUBDATE()</CODE> are synonyms for <CODE>DATE_ADD()</CODE> and 
  <CODE>DATE_SUB()</CODE>. In <STRONG>MySQL</STRONG> Version 3.23, you can use 
  <CODE>+</CODE> and <CODE>-</CODE> instead of <CODE>DATE_ADD()</CODE> and 
  <CODE>DATE_SUB()</CODE> if the expression on the right side is a date or 
  datetime column. (See example) <CODE>date</CODE> is a <CODE>DATETIME</CODE> or 
  <CODE>DATE</CODE> value specifying the starting date. <CODE>expr</CODE> is an 
  expression specifying the interval value to be added or subtracted from the 
  starting date. <CODE>expr</CODE> is a string; it may start with a 
  <SAMP>`-'</SAMP> for negative intervals. <CODE>type</CODE> is a keyword 
  indicating how the expression should be interpreted. The <CODE>EXTRACT(type 
  FROM date)</CODE> function returns the 'type' interval from the date. The 
  following table shows how the <CODE>type</CODE> and <CODE>expr</CODE> 
  arguments are related: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD><CODE>type</CODE> <STRONG>value</STRONG> </TD>
      <TD><STRONG>Expected</STRONG> <CODE>expr</CODE> <STRONG>format</STRONG> 
      </TD>
    <TR>
      <TD><CODE>SECOND</CODE> </TD>
      <TD><CODE>SECONDS</CODE> </TD>
    <TR>
      <TD><CODE>MINUTE</CODE> </TD>
      <TD><CODE>MINUTES</CODE> </TD>
    <TR>
      <TD><CODE>HOUR</CODE> </TD>
      <TD><CODE>HOURS</CODE> </TD>
    <TR>
      <TD><CODE>DAY</CODE> </TD>
      <TD><CODE>DAYS</CODE> </TD>
    <TR>
      <TD><CODE>MONTH</CODE> </TD>
      <TD><CODE>MONTHS</CODE> </TD>
    <TR>
      <TD><CODE>YEAR</CODE> </TD>
      <TD><CODE>YEARS</CODE> </TD>
    <TR>
      <TD><CODE>MINUTE_SECOND</CODE> </TD>
      <TD><CODE>"MINUTES:SECONDS"</CODE> </TD>
    <TR>
      <TD><CODE>HOUR_MINUTE</CODE> </TD>
      <TD><CODE>"HOURS:MINUTES"</CODE> </TD>
    <TR>
      <TD><CODE>DAY_HOUR</CODE> </TD>
      <TD><CODE>"DAYS HOURS"</CODE> </TD>
    <TR>
      <TD><CODE>YEAR_MONTH</CODE> </TD>
      <TD><CODE>"YEARS-MONTHS"</CODE> </TD>
    <TR>
      <TD><CODE>HOUR_SECOND</CODE> </TD>
      <TD><CODE>"HOURS:MINUTES:SECONDS"</CODE> </TD>
    <TR>
      <TD><CODE>DAY_MINUTE</CODE> </TD>
      <TD><CODE>"DAYS HOURS:MINUTES"</CODE> </TD>
    <TR>
      <TD><CODE>DAY_SECOND</CODE> </TD>
      <TD><CODE>"DAYS HOURS:MINUTES:SECONDS"</CODE> 
  </TD></TR></TBODY></TABLE><STRONG>MySQL</STRONG> allows any punctuation 
  delimiter in the <CODE>expr</CODE> format. Those shown in the table are the 
  suggested delimiters. If the <CODE>date</CODE> argument is a <CODE>DATE</CODE> 
  value and your calculations involve only <CODE>YEAR</CODE>, 
  <CODE>MONTH</CODE>, and <CODE>DAY</CODE> parts (that is, no time parts), the 
  result is a <CODE>DATE</CODE> value. Otherwise the result is a 
  <CODE>DATETIME</CODE> value: <PRE>mysql&gt; SELECT "1997-12-31 23:59:59" + INTERVAL 1 SECOND;
        -&gt; 1998-01-01 00:00:00
mysql&gt; SELECT INTERVAL 1 DAY + "1997-12-31";
        -&gt; 1998-01-01
mysql&gt; SELECT "1998-01-01" - INTERVAL 1 SECOND;
       -&gt; 1997-12-31 23:59:59
mysql&gt; SELECT DATE_ADD("1997-12-31 23:59:59",
                       INTERVAL 1 SECOND);
        -&gt; 1998-01-01 00:00:00
mysql&gt; SELECT DATE_ADD("1997-12-31 23:59:59",
                       INTERVAL 1 DAY);
        -&gt; 1998-01-01 23:59:59
mysql&gt; SELECT DATE_ADD("1997-12-31 23:59:59",
                       INTERVAL "1:1" MINUTE_SECOND);
        -&gt; 1998-01-01 00:01:00
mysql&gt; SELECT DATE_SUB("1998-01-01 00:00:00",
                       INTERVAL "1 1:1:1" DAY_SECOND);
        -&gt; 1997-12-30 22:58:59
mysql&gt; SELECT DATE_ADD("1998-01-01 00:00:00",
                       INTERVAL "-1 10" DAY_HOUR);
        -&gt; 1997-12-30 14:00:00
mysql&gt; SELECT DATE_SUB("1998-01-02", INTERVAL 31 DAY);
        -&gt; 1997-12-02
mysql&gt; SELECT EXTRACT(YEAR FROM "1999-07-02");
       -&gt; 1999
mysql&gt; SELECT EXTRACT(YEAR_MONTH FROM "1999-07-02 01:02:03");
       -&gt; 199907
mysql&gt; SELECT EXTRACT(DAY_MINUTE FROM "1999-07-02 01:02:03");
       -&gt; 20102
</PRE>If you specify an interval value that is too short (does not include all 
  the interval parts that would be expected from the <CODE>type</CODE> keyword), 
  <STRONG>MySQL</STRONG> assumes you have left out the leftmost parts of the 
  interval value. For example, if you specify a <CODE>type</CODE> of 
  <CODE>DAY_SECOND</CODE>, the value of <CODE>expr</CODE> is expected to have 
  days, hours, minutes, and seconds parts. If you specify a value like 
  <CODE>"1:10"</CODE>, <STRONG>MySQL</STRONG> assumes that the days and hours 
  parts are missing and the value represents minutes and seconds. In other 
  words, <CODE>"1:10" DAY_SECOND</CODE> is interpreted in such a way that it is 
  equivalent to <CODE>"1:10" MINUTE_SECOND</CODE>. This is analogous to the way 
  that <STRONG>MySQL</STRONG> interprets <CODE>TIME</CODE> values as 
  representing elapsed time rather than as time of day. Note that if you add or 
  subtract a date value against something that contains a time part, the date 
  value will be automatically converted to a datetime value: <PRE>mysql&gt; select date_add("1999-01-01", interval 1 day);
       -&gt; 1999-01-02
mysql&gt; select date_add("1999-01-01", interval 1 hour);
       -&gt; 1999-01-01 01:00:00
</PRE>If you use really incorrect dates, the result is <CODE>NULL</CODE>. If 
  you add <CODE>MONTH</CODE>, <CODE>YEAR_MONTH</CODE>, or <CODE>YEAR</CODE> and 
  the resulting date has a day that is larger than the maximum day for the new 
  month, the day is adjusted to the maximum days in the new month: <PRE>mysql&gt; select DATE_ADD('1998-01-30', Interval 1 month);
        -&gt; 1998-02-28
</PRE>Note from the preceding example that the word <CODE>INTERVAL</CODE> and 
  the <CODE>type</CODE> keyword are not case sensitive. <A name=IDX793></A>
  <DT><CODE>TO_DAYS(date)</CODE> 
  <DD>Given a date <CODE>date</CODE>, returns a daynumber (the number of days 
  since year 0): <PRE>mysql&gt; select TO_DAYS(950501);
        -&gt; 728779
mysql&gt; select TO_DAYS('1997-10-07');
        -&gt; 729669
</PRE><CODE>TO_DAYS()</CODE> is not intended for use with values that precede 
  the advent of the Gregorian calendar (1582), because it doesn't take into 
  account the days that were lost when the calendar was changed. <A 
  name=IDX794></A>
  <DT><CODE>FROM_DAYS(N)</CODE> 
  <DD>Given a daynumber <CODE>N</CODE>, returns a <CODE>DATE</CODE> value: <PRE>mysql&gt; select FROM_DAYS(729669);
        -&gt; '1997-10-07'
</PRE><CODE>FROM_DAYS()</CODE> is not intended for use with values that 
  precede the advent of the Gregorian calendar (1582), because it doesn't take 
  into account the days that were lost when the calendar was changed. <A 
  name=IDX795></A>
  <DT><CODE>DATE_FORMAT(date,format)</CODE> 
  <DD>Formats the <CODE>date</CODE> value according to the <CODE>format</CODE> 
  string. The following specifiers may be used in the <CODE>format</CODE> 
  string: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD><CODE>%M</CODE> </TD>
      <TD>Month name (<CODE>January</CODE>..<CODE>December</CODE>) </TD>
    <TR>
      <TD><CODE>%W</CODE> </TD>
      <TD>Weekday name (<CODE>Sunday</CODE>..<CODE>Saturday</CODE>) </TD>
    <TR>
      <TD><CODE>%D</CODE> </TD>
      <TD>Day of the month with English suffix (<CODE>1st</CODE>, 
        <CODE>2nd</CODE>, <CODE>3rd</CODE>, etc.) </TD>
    <TR>
      <TD><CODE>%Y</CODE> </TD>
      <TD>Year, numeric, 4 digits </TD>
    <TR>
      <TD><CODE>%y</CODE> </TD>
      <TD>Year, numeric, 2 digits </TD>
    <TR>
      <TD><CODE>%X</CODE> </TD>
      <TD>Year for the week where Sunday is the first day of the week, 
        numeric, 4 digits, used with '%V' </TD>
    <TR>
      <TD><CODE>%x</CODE> </TD>
      <TD>Year for the week, where Monday is the first day of the week, 
        numeric, 4 digits, used with '%v' </TD>
    <TR>
      <TD><CODE>%a</CODE> </TD>
      <TD>Abbreviated weekday name (<CODE>Sun</CODE>..<CODE>Sat</CODE>) </TD>
    <TR>
      <TD><CODE>%d</CODE> </TD>
      <TD>Day of the month, numeric (<CODE>00</CODE>..<CODE>31</CODE>) </TD>
    <TR>
      <TD><CODE>%e</CODE> </TD>
      <TD>Day of the month, numeric (<CODE>0</CODE>..<CODE>31</CODE>) </TD>
    <TR>
      <TD><CODE>%m</CODE> </TD>
      <TD>Month, numeric (<CODE>01</CODE>..<CODE>12</CODE>) </TD>
    <TR>
      <TD><CODE>%c</CODE> </TD>
      <TD>Month, numeric (<CODE>1</CODE>..<CODE>12</CODE>) </TD>
    <TR>
      <TD><CODE>%b</CODE> </TD>
      <TD>Abbreviated month name (<CODE>Jan</CODE>..<CODE>Dec</CODE>) </TD>
    <TR>
      <TD><CODE>%j</CODE> </TD>
      <TD>Day of year (<CODE>001</CODE>..<CODE>366</CODE>) </TD>
    <TR>
      <TD><CODE>%H</CODE> </TD>
      <TD>Hour (<CODE>00</CODE>..<CODE>23</CODE>) </TD>
    <TR>
      <TD><CODE>%k</CODE> </TD>
      <TD>Hour (<CODE>0</CODE>..<CODE>23</CODE>) </TD>
    <TR>
      <TD><CODE>%h</CODE> </TD>
      <TD>Hour (<CODE>01</CODE>..<CODE>12</CODE>) </TD>
    <TR>
      <TD><CODE>%I</CODE> </TD>
      <TD>Hour (<CODE>01</CODE>..<CODE>12</CODE>) </TD>
    <TR>
      <TD><CODE>%l</CODE> </TD>
      <TD>Hour (<CODE>1</CODE>..<CODE>12</CODE>) </TD>
    <TR>
      <TD><CODE>%i</CODE> </TD>
      <TD>Minutes, numeric (<CODE>00</CODE>..<CODE>59</CODE>) </TD>
    <TR>
      <TD><CODE>%r</CODE> </TD>
      <TD>Time, 12-hour (<CODE>hh:mm:ss [AP]M</CODE>) </TD>
    <TR>
      <TD><CODE>%T</CODE> </TD>
      <TD>Time, 24-hour (<CODE>hh:mm:ss</CODE>) </TD>
    <TR>
      <TD><CODE>%S</CODE> </TD>
      <TD>Seconds (<CODE>00</CODE>..<CODE>59</CODE>) </TD>
    <TR>
      <TD><CODE>%s</CODE> </TD>
      <TD>Seconds (<CODE>00</CODE>..<CODE>59</CODE>) </TD>
    <TR>
      <TD><CODE>%p</CODE> </TD>
      <TD><CODE>AM</CODE> or <CODE>PM</CODE> </TD>
    <TR>
      <TD><CODE>%w</CODE> </TD>
      <TD>Day of the week (<CODE>0</CODE>=Sunday..<CODE>6</CODE>=Saturday) </TD>
    <TR>
      <TD><CODE>%U</CODE> </TD>
      <TD>Week (<CODE>0</CODE>..<CODE>53</CODE>), where Sunday is the first 
        day of the week </TD>
    <TR>
      <TD><CODE>%u</CODE> </TD>
      <TD>Week (<CODE>0</CODE>..<CODE>53</CODE>), where Monday is the first 
        day of the week </TD>
    <TR>
      <TD><CODE>%V</CODE> </TD>
      <TD>Week (<CODE>1</CODE>..<CODE>53</CODE>), where Sunday is the first 
        day of the week. Used with '%X' </TD>
    <TR>
      <TD><CODE>%v</CODE> </TD>
      <TD>Week (<CODE>1</CODE>..<CODE>53</CODE>), where Monday is the first 
        day of the week. Used with '%x' </TD>
    <TR>
      <TD><CODE>%%</CODE> </TD>
      <TD>A literal <SAMP>`%'</SAMP>. </TD></TR></TBODY></TABLE>All other characters 
  are just copied to the result without interpretation: <PRE>mysql&gt; select DATE_FORMAT('1997-10-04 22:23:00', '%W %M %Y');
        -&gt; 'Saturday October 1997'
mysql&gt; select DATE_FORMAT('1997-10-04 22:23:00', '%H:%i:%s');
        -&gt; '22:23:00'
mysql&gt; select DATE_FORMAT('1997-10-04 22:23:00',
                          '%D %y %a %d %m %b %j');
        -&gt; '4th 97 Sat 04 10 Oct 277'
mysql&gt; select DATE_FORMAT('1997-10-04 22:23:00',
                          '%H %k %I %r %T %S %w');
        -&gt; '22 22 10 10:23:00 PM 22:23:00 00 6'
mysql&gt; select DATE_FORMAT('1999-01-01', '%X %V');
        -&gt; '1998 52'
</PRE>As of <STRONG>MySQL</STRONG> Version 3.23, the <SAMP>`%'</SAMP> 
  character is required before format specifier characters. In earlier versions 
  of <STRONG>MySQL</STRONG>, <SAMP>`%'</SAMP> was optional. <A name=IDX796></A>
  <DT><CODE>TIME_FORMAT(time,format)</CODE> 
  <DD>This is used like the <CODE>DATE_FORMAT()</CODE> function above, but the 
  <CODE>format</CODE> string may contain only those format specifiers that 
  handle hours, minutes, and seconds. Other specifiers produce a 
  <CODE>NULL</CODE> value or <CODE>0</CODE>. <A name=IDX797></A><A 
  name=IDX798></A>
  <DT><CODE>CURDATE()</CODE> 
  <DD>
  <DT><CODE>CURRENT_DATE</CODE> 
  <DD>Returns today's date as a value in <CODE>'YYYY-MM-DD'</CODE> or 
  <CODE>YYYYMMDD</CODE> format, depending on whether the function is used in a 
  string or numeric context: <PRE>mysql&gt; select CURDATE();
        -&gt; '1997-12-15'
mysql&gt; select CURDATE() + 0;
        -&gt; 19971215
</PRE><A name=IDX799></A><A name=IDX800></A>
  <DT><CODE>CURTIME()</CODE> 
  <DD>
  <DT><CODE>CURRENT_TIME</CODE> 
  <DD>Returns the current time as a value in <CODE>'HH:MM:SS'</CODE> or 
  <CODE>HHMMSS</CODE> format, depending on whether the function is used in a 
  string or numeric context: <PRE>mysql&gt; select CURTIME();
        -&gt; '23:50:26'
mysql&gt; select CURTIME() + 0;
        -&gt; 235026
</PRE><A name=IDX801></A><A name=IDX802></A><A name=IDX803></A>
  <DT><CODE>NOW()</CODE> 
  <DD>
  <DT><CODE>SYSDATE()</CODE> 
  <DD>
  <DT><CODE>CURRENT_TIMESTAMP</CODE> 
  <DD>Returns the current date and time as a value in <CODE>'YYYY-MM-DD 
  HH:MM:SS'</CODE> or <CODE>YYYYMMDDHHMMSS</CODE> format, depending on whether 
  the function is used in a string or numeric context: <PRE>mysql&gt; select NOW();
        -&gt; '1997-12-15 23:50:26'
mysql&gt; select NOW() + 0;
        -&gt; 19971215235026
</PRE><A name=IDX804></A>
  <DT><CODE>UNIX_TIMESTAMP()</CODE> 
  <DD>
  <DT><CODE>UNIX_TIMESTAMP(date)</CODE> 
  <DD>If called with no argument, returns a Unix timestamp (seconds since 
  <CODE>'1970-01-01 00:00:00'</CODE> GMT). If <CODE>UNIX_TIMESTAMP()</CODE> is 
  called with a <CODE>date</CODE> argument, it returns the value of the argument 
  as seconds since <CODE>'1970-01-01 00:00:00'</CODE> GMT. <CODE>date</CODE> may 
  be a <CODE>DATE</CODE> string, a <CODE>DATETIME</CODE> string, a 
  <CODE>TIMESTAMP</CODE>, or a number in the format <CODE>YYMMDD</CODE> or 
  <CODE>YYYYMMDD</CODE> in local time: <PRE>mysql&gt; select UNIX_TIMESTAMP();
        -&gt; 882226357
mysql&gt; select UNIX_TIMESTAMP('1997-10-04 22:23:00');
        -&gt; 875996580
</PRE>When <CODE>UNIX_TIMESTAMP</CODE> is used on a <CODE>TIMESTAMP</CODE> 
  column, the function will receive the value directly, with no implicit 
  ``string-to-unix-timestamp'' conversion. If you give 
  <CODE>UNIX_TIMESTAMP()</CODE> a wrong or out-of-range date, it will return 0. 
  <A name=IDX805></A>
  <DT><CODE>FROM_UNIXTIME(unix_timestamp)</CODE> 
  <DD>Returns a representation of the <CODE>unix_timestamp</CODE> argument as a 
  value in <CODE>'YYYY-MM-DD HH:MM:SS'</CODE> or <CODE>YYYYMMDDHHMMSS</CODE> 
  format, depending on whether the function is used in a string or numeric 
  context: <PRE>mysql&gt; select FROM_UNIXTIME(875996580);
        -&gt; '1997-10-04 22:23:00'
mysql&gt; select FROM_UNIXTIME(875996580) + 0;
        -&gt; 19971004222300
</PRE><A name=IDX806></A>
  <DT><CODE>FROM_UNIXTIME(unix_timestamp,format)</CODE> 
  <DD>Returns a string representation of the Unix timestamp, formatted according 
  to the <CODE>format</CODE> string. <CODE>format</CODE> may contain the same 
  specifiers as those listed in the entry for the <CODE>DATE_FORMAT()</CODE> 
  function: <PRE>mysql&gt; select FROM_UNIXTIME(UNIX_TIMESTAMP(),
                            '%Y %D %M %h:%i:%s %x');
        -&gt; '1997 23rd December 03:43:30 x'
</PRE><A name=IDX807></A>
  <DT><CODE>SEC_TO_TIME(seconds)</CODE> 
  <DD>Returns the <CODE>seconds</CODE> argument, converted to hours, minutes, 
  and seconds, as a value in <CODE>'HH:MM:SS'</CODE> or <CODE>HHMMSS</CODE> 
  format, depending on whether the function is used in a string or numeric 
  context: <PRE>mysql&gt; select SEC_TO_TIME(2378);
        -&gt; '00:39:38'
mysql&gt; select SEC_TO_TIME(2378) + 0;
        -&gt; 3938
</PRE><A name=IDX808></A>
  <DT><CODE>TIME_TO_SEC(time)</CODE> 
  <DD>Returns the <CODE>time</CODE> argument, converted to seconds: <PRE>mysql&gt; select TIME_TO_SEC('22:23:00');
        -&gt; 80580
mysql&gt; select TIME_TO_SEC('00:39:38');
        -&gt; 2378
</PRE></DD></DL>
<P><A name=IDX809></A><A name=IDX810></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Miscellaneous_functions" 
name=Miscellaneous_functions>7.4.12 Miscellaneous Functions</A></H3>
<DL compact>
  <DT><CODE>DATABASE()</CODE> 
  <DD><A name=IDX811></A>Returns the current database name: <PRE>mysql&gt; select DATABASE();
        -&gt; 'test'
</PRE>If there is no current database, <CODE>DATABASE()</CODE> returns the 
  empty string. <A name=IDX812></A><A name=IDX813></A><A name=IDX814></A>
  <DT><CODE>USER()</CODE> 
  <DD>
  <DT><CODE>SYSTEM_USER()</CODE> 
  <DD>
  <DT><CODE>SESSION_USER()</CODE> 
  <DD>Returns the current <STRONG>MySQL</STRONG> user name: <PRE>mysql&gt; select USER();
        -&gt; 'davida@localhost'
</PRE>In <STRONG>MySQL</STRONG> Version 3.22.11 or later, this includes the 
  client hostname as well as the user name. You can extract just the user name 
  part like this (which works whether or not the value includes a hostname 
  part): <PRE>mysql&gt; select substring_index(USER(),"@",1);
        -&gt; 'davida'
</PRE><A name=IDX815></A>
  <DT><CODE>PASSWORD(str)</CODE> 
  <DD>Calculates a password string from the plaintext password <CODE>str</CODE>. 
  This is the function that is used for encrypting <STRONG>MySQL</STRONG> 
  passwords for storage in the <CODE>Password</CODE> column of the 
  <CODE>user</CODE> grant table: <PRE>mysql&gt; select PASSWORD('badpwd');
        -&gt; '7f84554057dd964b'
</PRE><A name=IDX816></A><CODE>PASSWORD()</CODE> encryption is non-reversible. 
  <CODE>PASSWORD()</CODE> does not perform password encryption in the same way 
  that Unix passwords are encrypted. You should not assume that if your Unix 
  password and your <STRONG>MySQL</STRONG> password are the same, 
  <CODE>PASSWORD()</CODE> will result in the same encrypted value as is stored 
  in the Unix password file. See <CODE>ENCRYPT()</CODE>. <A name=IDX817></A>
  <DT><CODE>ENCRYPT(str[,salt])</CODE> 
  <DD>Encrypt <CODE>str</CODE> using the Unix <CODE>crypt()</CODE> system call. 
  The <CODE>salt</CODE> argument should be a string with two characters. (As of 
  <STRONG>MySQL</STRONG> Version 3.22.16, <CODE>salt</CODE> may be longer than 
  two characters.): <PRE>mysql&gt; select ENCRYPT("hello");
        -&gt; 'VxuFAJXVARROc'
</PRE>If <CODE>crypt()</CODE> is not available on your system, 
  <CODE>ENCRYPT()</CODE> always returns <CODE>NULL</CODE>. 
  <CODE>ENCRYPT()</CODE> ignores all but the first 8 characters of 
  <CODE>str</CODE>, at least on some systems. This will be determined by the 
  behavior of the underlying <CODE>crypt()</CODE> system call. <A 
  name=IDX818></A>
  <DT><CODE>ENCODE(str,pass_str)</CODE> 
  <DD>Encrypt <CODE>str</CODE> using <CODE>pass_str</CODE> as the password. To 
  decrypt the result, use <CODE>DECODE()</CODE>. The results is a binary string 
  of the same length as <CODE>string</CODE>. If you want to save it in a column, 
  use a <CODE>BLOB</CODE> column type. <A name=IDX819></A>
  <DT><CODE>DECODE(crypt_str,pass_str)</CODE> 
  <DD>Descrypts the encrypted string <CODE>crypt_str</CODE> using 
  <CODE>pass_str</CODE> as the password. <CODE>crypt_str</CODE> should be a 
  string returned from <CODE>ENCODE()</CODE>. <A name=IDX820></A>
  <DT><CODE>MD5(string)</CODE> 
  <DD>Calculates a MD5 checksum for the string. Value is returned as a 32 long 
  hex number that may, for example, be used as a hash key: <PRE>mysql&gt; select MD5("testing");
        -&gt; 'ae2b1fca515949e5d54fb22b8ed95575'
</PRE>This is an "RSA Data Security, Inc. MD5 Message-Digest Algorithm". <A 
  name=IDX821></A>
  <DT><CODE>LAST_INSERT_ID([expr])</CODE> 
  <DD>Returns the last automatically generated value that was inserted into an 
  <CODE>AUTO_INCREMENT</CODE> column. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Clients.html#mysql_insert_id">24.1.3.126 
  <CODE>mysql_insert_id()</CODE></A>. <PRE>mysql&gt; select LAST_INSERT_ID();
        -&gt; 195
</PRE>The last ID that was generated is maintained in the server on a 
  per-connection basis. It will not be changed by another client. It will not 
  even be changed if you update another <CODE>AUTO_INCREMENT</CODE> column with 
  a non-magic value (that is, a value that is not <CODE>NULL</CODE> and not 
  <CODE>0</CODE>). If you insert many rows at the same time with an insert 
  statement, <CODE>LAST_INSERT_ID()</CODE> returns the value for the first 
  inserted row. The reason for this is so that you it makes it possible to 
  easily reproduce the same <CODE>INSERT</CODE> statement against some other 
  server. <A name=IDX822></A>If <CODE>expr</CODE> is given as an argument to 
  <CODE>LAST_INSERT_ID()</CODE> in an <CODE>UPDATE</CODE> clause, then the value 
  of the argument is returned as a <CODE>LAST_INSERT_ID()</CODE> value. This can 
  be used to simulate sequences. First create the table: <PRE>mysql&gt; create table sequence (id int not null);
mysql&gt; insert into sequence values (0);
</PRE>Then the table can be used to generate sequence numbers like this: <PRE>mysql&gt; update sequence set id=LAST_INSERT_ID(id+1);
</PRE>You can generate sequences without calling 
  <CODE>LAST_INSERT_ID()</CODE>, but the utility of using the function this way 
  is that the ID value is maintained in the server as the last automatically 
  generated value. You can retrieve the new ID as you would read any normal 
  <CODE>AUTO_INCREMENT</CODE> value in <STRONG>MySQL</STRONG>. For example, 
  <CODE>LAST_INSERT_ID()</CODE> (without an argument) will return the new ID. 
  The C API function <CODE>mysql_insert_id()</CODE> can also be used to get the 
  value. <A name=IDX823></A>
  <DT><CODE>FORMAT(X,D)</CODE> 
  <DD>Formats the number <CODE>X</CODE> to a format like 
  <CODE>'#,###,###.##'</CODE>, rounded to <CODE>D</CODE> decimals. If 
  <CODE>D</CODE> is <CODE>0</CODE>, the result will have no decimal point or 
  fractional part: <PRE>mysql&gt; select FORMAT(12332.123456, 4);
        -&gt; '12,332.1235'
mysql&gt; select FORMAT(12332.1,4);
        -&gt; '12,332.1000'
mysql&gt; select FORMAT(12332.2,0);
        -&gt; '12,332'
</PRE><A name=IDX824></A>
  <DT><CODE>VERSION()</CODE> 
  <DD>Returns a string indicating the <STRONG>MySQL</STRONG> server version: <PRE>mysql&gt; select VERSION();
        -&gt; '3.23.13-log'
</PRE>Note that if your version ends with <CODE>-log</CODE> this means that 
  logging is enabled. <A name=IDX825></A>
  <DT><CODE>CONNECTION_ID()</CODE> 
  <DD>Returns the connection id (<CODE>thread_id</CODE>) for the connection. 
  Every connection has its own unique id: <PRE>mysql&gt; select CONNECTION_ID();
        -&gt; 1
</PRE><A name=IDX826></A><A name=IDX827></A>
  <DT><CODE>GET_LOCK(str,timeout)</CODE> 
  <DD>Tries to obtain a lock with a name given by the string <CODE>str</CODE>, 
  with a timeout of <CODE>timeout</CODE> seconds. Returns <CODE>1</CODE> if the 
  lock was obtained successfully, <CODE>0</CODE> if the attempt timed out, or 
  <CODE>NULL</CODE> if an error occurred (such as running out of memory or the 
  thread was killed with <CODE>mysqladmin kill</CODE>). A lock is released when 
  you execute <CODE>RELEASE_LOCK()</CODE>, execute a new 
  <CODE>GET_LOCK()</CODE>, or the thread terminates. This function can be used 
  to implement application locks or to simulate record locks. It blocks requests 
  by other clients for locks with the same name; clients that agree on a given 
  lock string name can use the string to perform cooperative advisory locking: <PRE>mysql&gt; select GET_LOCK("lock1",10);
        -&gt; 1
mysql&gt; select GET_LOCK("lock2",10);
        -&gt; 1
mysql&gt; select RELEASE_LOCK("lock2");
        -&gt; 1
mysql&gt; select RELEASE_LOCK("lock1");
        -&gt; NULL
</PRE>Note that the second <CODE>RELEASE_LOCK()</CODE> call returns 
  <CODE>NULL</CODE> because the lock <CODE>"lock1"</CODE> was automatically 
  released by the second <CODE>GET_LOCK()</CODE> call. <A name=IDX828></A>
  <DT><CODE>RELEASE_LOCK(str)</CODE> 
  <DD>Releases the lock named by the string <CODE>str</CODE> that was obtained 
  with <CODE>GET_LOCK()</CODE>. Returns <CODE>1</CODE> if the lock was released, 
  <CODE>0</CODE> if the lock wasn't locked by this thread (in which case the 
  lock is not released), and <CODE>NULL</CODE> if the named lock didn't exist. 
  The lock will not exist if it was never obtained by a call to 
  <CODE>GET_LOCK()</CODE> or if it already has been released. <A 
name=IDX829></A>
  <DT><CODE>BENCHMARK(count,expr)</CODE> 
  <DD>The <CODE>BENCHMARK()</CODE> function executes the expression 
  <CODE>expr</CODE> repeatedly <CODE>count</CODE> times. It may be used to time 
  how fast <STRONG>MySQL</STRONG> processes the expression. The result value is 
  always <CODE>0</CODE>. The intended use is in the <CODE>mysql</CODE> client, 
  which reports query execution times: <PRE>mysql&gt; select BENCHMARK(1000000,encode("hello","goodbye"));
+----------------------------------------------+
| BENCHMARK(1000000,encode("hello","goodbye")) |
+----------------------------------------------+
|                                            0 |
+----------------------------------------------+
1 row in set (4.74 sec)
</PRE>The time reported is elapsed time on the client end, not CPU time on the 
  server end. It may be advisable to execute <CODE>BENCHMARK()</CODE> several 
  times, and interpret the result with regard to how heavily loaded the server 
  machine is. <A name=IDX830></A>
  <DT><CODE>INET_NTOA(expr)</CODE> 
  <DD>Returns the network address (4 or 8 byte) for the numeric expression: <PRE>mysql&gt; select INET_NTOA(3520061480);
       -&gt;  "209.207.224.40"
</PRE><A name=IDX831></A>
  <DT><CODE>INET_ATON(expr)</CODE> 
  <DD>Returns an integer that represents the numeric value for a network 
  address. Addresses may be 4 or 8 byte addresses: <PRE>mysql&gt; select INET_ATON("209.207.224.40");
       -&gt;  3520061480
</PRE>The generated number is always in network byte order; For example the 
  above number is calculated as <CODE>209*255^3 + 207*255^2 + 224*255 
  +40</CODE>. <A name=IDX832></A>
  <DT><CODE>MASTER_POS_WAIT(log_name, log_pos)</CODE> 
  <DD>Blocks until the slave reaches the specified position in the master log 
  during replication. If master information is not initialized, returns NULL. If 
  the slave is not running, will block and wait until it is started and goes to 
  or past the specified position. If the slave is already past the specified 
  position, returns immediately. The return value is the number of log events it 
  had to wait to get to the specified position, or NULL in case of error. Useful 
  for control of master-slave synchronization, but was originally written to 
  facilitate replication testing. </DD></DL>
<P><A name=IDX833></A><A name=IDX834></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Group_by_functions" 
name=Group_by_functions>7.4.13 Functions for Use with <CODE>GROUP BY</CODE> 
Clauses</A></H3>
<P>If you use a group function in a statement containing no <CODE>GROUP 
BY</CODE> clause, it is equivalent to grouping on all rows. </P>
<DL compact>
  <DT><CODE>COUNT(expr)</CODE> 
  <DD><A name=IDX835></A>Returns a count of the number of non-<CODE>NULL</CODE> 
  values in the rows retrieved by a <CODE>SELECT</CODE> statement: <PRE>mysql&gt; select student.student_name,COUNT(*)
           from student,course
           where student.student_id=course.student_id
           GROUP BY student_name;

</PRE><CODE>COUNT(*)</CODE> is somewhat different in that it returns a count 
  of the number of rows retrieved, whether or not they contain <CODE>NULL</CODE> 
  values. <CODE>COUNT(*)</CODE> is optimized to return very quickly if the 
  <CODE>SELECT</CODE> retrieves from one table, no other columns are retrieved, 
  and there is no <CODE>WHERE</CODE> clause. For example: <PRE>mysql&gt; select COUNT(*) from student;
</PRE><A name=IDX836></A><A name=IDX837></A>
  <DT><CODE>COUNT(DISTINCT expr,[expr...])</CODE> 
  <DD>Returns a count of the number of different non-<CODE>NULL</CODE> values: <PRE>mysql&gt; select COUNT(DISTINCT results) from student;
</PRE>In <STRONG>MySQL</STRONG> you can get the number of distinct expression 
  combinations that don't contain NULL by giving a list of expressions. In ANSI 
  SQL you would have to do a concatenation of all expressions inside 
  <CODE>CODE(DISTINCT ..)</CODE>. <A name=IDX838></A>
  <DT><CODE>AVG(expr)</CODE> 
  <DD>Returns the average value of <CODE>expr</CODE>: <PRE>mysql&gt; select student_name, AVG(test_score)
           from student
           GROUP BY student_name;
</PRE><A name=IDX839></A><A name=IDX840></A>
  <DT><CODE>MIN(expr)</CODE> 
  <DD>
  <DT><CODE>MAX(expr)</CODE> 
  <DD>Returns the minimum or maximum value of <CODE>expr</CODE>. 
  <CODE>MIN()</CODE> and <CODE>MAX()</CODE> may take a string argument; in such 
  cases they return the minimum or maximum string value. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Performance.html#MySQL_indexes">13.4 
  How MySQL Uses Indexes</A>. <PRE>mysql&gt; select student_name, MIN(test_score), MAX(test_score)
           from student
           GROUP BY student_name;
</PRE><A name=IDX841></A>
  <DT><CODE>SUM(expr)</CODE> 
  <DD>Returns the sum of <CODE>expr</CODE>. Note that if the return set has no 
  rows, it returns NULL! <A name=IDX842></A><A name=IDX843></A><A 
  name=IDX844></A><A name=IDX845></A>
  <DT><CODE>STD(expr)</CODE> 
  <DD>
  <DT><CODE>STDDEV(expr)</CODE> 
  <DD>Returns the standard deviation of <CODE>expr</CODE>. This is an extension 
  to ANSI SQL. The <CODE>STDDEV()</CODE> form of this function is provided for 
  Oracle compatibility. <A name=IDX846></A>
  <DT><CODE>BIT_OR(expr)</CODE> 
  <DD>Returns the bitwise <CODE>OR</CODE> of all bits in <CODE>expr</CODE>. The 
  calculation is performed with 64-bit (<CODE>BIGINT</CODE>) precision. <A 
  name=IDX847></A>
  <DT><CODE>BIT_AND(expr)</CODE> 
  <DD>Returns the bitwise <CODE>AND</CODE> of all bits in <CODE>expr</CODE>. The 
  calculation is performed with 64-bit (<CODE>BIGINT</CODE>) precision. </DD></DL>
<P><A name=IDX848></A><STRONG>MySQL</STRONG> has extended the use of <CODE>GROUP 
BY</CODE>. You can use columns or calculations in the <CODE>SELECT</CODE> 
expressions that don't appear in the <CODE>GROUP BY</CODE> part. This stands for 
<EM>any possible value for this group</EM>. You can use this to get better 
performance by avoiding sorting and grouping on unnecessary items. For example, 
you don't need to group on <CODE>customer.name</CODE> in the following query: 
</P><PRE>mysql&gt; select order.custid,customer.name,max(payments)
       from order,customer
       where order.custid = customer.custid
       GROUP BY order.custid;
</PRE>
<P>In ANSI SQL, you would have to add <CODE>customer.name</CODE> to the 
<CODE>GROUP BY</CODE> clause. In <STRONG>MySQL</STRONG>, the name is redundant 
if you don't run in ANSI mode. </P>
<P><STRONG>Don't use this feature</STRONG> if the columns you omit from the 
<CODE>GROUP BY</CODE> part aren't unique in the group! You will get 
unpredictable results. </P>
<P>In some cases, you can use <CODE>MIN()</CODE> and <CODE>MAX()</CODE> to 
obtain a specific column value even if it isn't unique. The following gives the 
value of <CODE>column</CODE> from the row containing the smallest value in the 
<CODE>sort</CODE> column: </P><PRE>substr(MIN(concat(rpad(sort,6,' '),column)),7)
</PRE>
<P>See section <A 
href="file:///D:/work/mysql/manual-split/manual_Tutorial.html#example-Maximum-column-group-row">9.5.4 
The Rows Holding the Group-wise Maximum of a Certain Field</A>. </P>
<P><A name=IDX849></A><A name=IDX850></A><A name=IDX851></A><A 
name=IDX852></A><A name=IDX853></A><A name=IDX854></A>Note that if you are using 
<STRONG>MySQL</STRONG> Version 3.22 (or earlier) or if you are trying to follow 
ANSI SQL, you can't use expressions in <CODE>GROUP BY</CODE> or <CODE>ORDER 
BY</CODE> clauses. You can work around this limitation by using an alias for the 
expression: </P><PRE>mysql&gt; SELECT id,FLOOR(value/100) AS val FROM tbl_name
           GROUP BY id,val ORDER BY val;
</PRE>
<P>In <STRONG>MySQL</STRONG> Version 3.23 you can do: </P><PRE>mysql&gt; SELECT id,FLOOR(value/100) FROM tbl_name ORDER BY RAND();
</PRE>
<P><A name=IDX855></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#CREATE_DATABASE" 
name=CREATE_DATABASE>7.5 <CODE>CREATE DATABASE</CODE> Syntax</A></H2><PRE>CREATE DATABASE [IF NOT EXISTS] db_name
</PRE>
<P><CODE>CREATE DATABASE</CODE> creates a database with the given name. Rules 
for allowable database names are given in section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Legal_names">7.1.5 
Database, Table, Index, Column, and Alias Names</A>. An error occurs if the 
database already exists and you didn't specify <CODE>IF NOT EXISTS</CODE>. </P>
<P>Databases in <STRONG>MySQL</STRONG> are implemented as directories containing 
files that correspond to tables in the database. Because there are no tables in 
a database when it is initially created, the <CODE>CREATE DATABASE</CODE> 
statement only creates a directory under the <STRONG>MySQL</STRONG> data 
directory. </P>
<P><A name=IDX856></A>You can also create databases with 
<CODE>mysqladmin</CODE>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Tools.html#Programs">15.1 
Overview of the Different MySQL Programs</A>. </P>
<P><A name=IDX857></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#DROP_DATABASE" 
name=DROP_DATABASE>7.6 <CODE>DROP DATABASE</CODE> Syntax</A></H2><PRE>DROP DATABASE [IF EXISTS] db_name
</PRE>
<P><CODE>DROP DATABASE</CODE> drops all tables in the database and deletes the 
database. If you do a <CODE>DROP DATABASE</CODE> on a symbolic linked database, 
both the link and the original database is deleted. <STRONG>Be VERY careful with 
this command!</STRONG> </P>
<P><CODE>DROP DATABASE</CODE> returns the number of files that were removed from 
the database directory. Normally, this is three times the number of tables, 
because normally each table corresponds to a <TT>`.MYD'</TT> file, a 
<TT>`.MYI'</TT> file, and a <TT>`.frm'</TT> file. </P>
<P>The <CODE>DROP DATABASE</CODE> command removes from the given database 
directory all files with the following extensions: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD>.BAK </TD>
    <TD>.DAT </TD>
    <TD>.HSH </TD>
    <TD>.ISD </TD>
  <TR>
    <TD>.ISM </TD>
    <TD>.ISM </TD>
    <TD>.MRG </TD>
    <TD>.MYD </TD>
  <TR>
    <TD>.MYI </TD>
    <TD>.db </TD>
    <TD>.frm </TD></TR></TBODY></TABLE>
<P>All subdirectories that consists of 2 digits (<CODE>RAID</CODE> directories) 
are also removed. </P>
<P>In <STRONG>MySQL</STRONG> Version 3.22 or later, you can use the keywords 
<CODE>IF EXISTS</CODE> to prevent an error from occurring if the database 
doesn't exist. </P>
<P><A name=IDX858></A>You can also drop databases with <CODE>mysqladmin</CODE>. 
See section <A 
href="file:///D:/work/mysql/manual-split/manual_Tools.html#Programs">15.1 
Overview of the Different MySQL Programs</A>. </P>
<P><A name=IDX859></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#CREATE_TABLE" 
name=CREATE_TABLE>7.7 <CODE>CREATE TABLE</CODE> Syntax</A></H2><PRE>CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name [(create_definition,...)]
[table_options] [select_statement]

create_definition:
  col_name type [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT]
            [PRIMARY KEY] [reference_definition]
  or    PRIMARY KEY (index_col_name,...)
  or    KEY [index_name] (index_col_name,...)
  or    INDEX [index_name] (index_col_name,...)
  or    UNIQUE [INDEX] [index_name] (index_col_name,...)
  or    FULLTEXT [INDEX] [index_name] (index_col_name,...)
  or    [CONSTRAINT symbol] FOREIGN KEY index_name (index_col_name,...)
            [reference_definition]
  or    CHECK (expr)

type:
        TINYINT[(length)] [UNSIGNED] [ZEROFILL]
  or    SMALLINT[(length)] [UNSIGNED] [ZEROFILL]
  or    MEDIUMINT[(length)] [UNSIGNED] [ZEROFILL]
  or    INT[(length)] [UNSIGNED] [ZEROFILL]
  or    INTEGER[(length)] [UNSIGNED] [ZEROFILL]
  or    BIGINT[(length)] [UNSIGNED] [ZEROFILL]
  or    REAL[(length,decimals)] [UNSIGNED] [ZEROFILL]
  or    DOUBLE[(length,decimals)] [UNSIGNED] [ZEROFILL]
  or    FLOAT[(length,decimals)] [UNSIGNED] [ZEROFILL]
  or    DECIMAL(length,decimals) [UNSIGNED] [ZEROFILL]
  or    NUMERIC(length,decimals) [UNSIGNED] [ZEROFILL]
  or    CHAR(length) [BINARY]
  or    VARCHAR(length) [BINARY]
  or    DATE
  or    TIME
  or    TIMESTAMP
  or    DATETIME
  or    TINYBLOB
  or    BLOB
  or    MEDIUMBLOB
  or    LONGBLOB
  or    TINYTEXT
  or    TEXT
  or    MEDIUMTEXT
  or    LONGTEXT
  or    ENUM(value1,value2,value3,...)
  or    SET(value1,value2,value3,...)

index_col_name:
        col_name [(length)]

reference_definition:
        REFERENCES tbl_name [(index_col_name,...)]
                   [MATCH FULL | MATCH PARTIAL]
                   [ON DELETE reference_option]
                   [ON UPDATE reference_option]

reference_option:
        RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT

table_options:
	TYPE = {BDB | HEAP | ISAM | InnoDB | MERGE | MYISAM }
or	AUTO_INCREMENT = #
or	AVG_ROW_LENGTH = #
or	CHECKSUM = {0 | 1}
or	COMMENT = "string"
or	MAX_ROWS = #
or	MIN_ROWS = #
or	PACK_KEYS = {0 | 1}
or	PASSWORD = "string"
or	DELAY_KEY_WRITE = {0 | 1}
or      ROW_FORMAT= { default | dynamic | fixed | compressed }
or	RAID_TYPE= {1 | STRIPED | RAID0 } RAID_CHUNKS=#  RAID_CHUNKSIZE=#
or	UNION = (table_name,[table_name...])
or      DATA DIRECTORY="directory"
or      INDEX DIRECTORY="directory"

select_statement:
	[IGNORE | REPLACE] SELECT ...  (Some legal select statement)
</PRE>
<P><CODE>CREATE TABLE</CODE> creates a table with the given name in the current 
database. Rules for allowable table names are given in section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Legal_names">7.1.5 
Database, Table, Index, Column, and Alias Names</A>. An error occurs if there is 
no current database or if the table already exists. </P>
<P>In <STRONG>MySQL</STRONG> Version 3.22 or later, the table name can be 
specified as <CODE>db_name.tbl_name</CODE>. This works whether or not there is a 
current database. </P>
<P>In <STRONG>MySQL</STRONG> Version 3.23, you can use the 
<CODE>TEMPORARY</CODE> keyword when you create a table. A temporary table will 
automatically be deleted if a connection dies and the name is per connection. 
This means that two different connections can both use the same temporary table 
name without conflicting with each other or with an existing table of the same 
name. (The existing table is hidden until the temporary table is deleted). </P>
<P>In <STRONG>MySQL</STRONG> Version 3.23 or later, you can use the keywords 
<CODE>IF NOT EXISTS</CODE> so that an error does not occur if the table already 
exists. Note that there is no verification that the table structures are 
identical. </P>
<P>Each table <CODE>tbl_name</CODE> is represented by some files in the database 
directory. In the case of MyISAM-type tables you will get: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>File</STRONG> </TD>
    <TD><STRONG>Purpose</STRONG> </TD>
  <TR>
    <TD><CODE>tbl_name.frm</CODE> </TD>
    <TD>Table definition (form) file </TD>
  <TR>
    <TD><CODE>tbl_name.MYD</CODE> </TD>
    <TD>Data file </TD>
  <TR>
    <TD><CODE>tbl_name.MYI</CODE> </TD>
    <TD>Index file </TD></TR></TBODY></TABLE>
<P>For more information on the properties of the various column types, see 
section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Column_types">7.3 
Column Types</A>: </P>
<UL>
  <LI>If neither <CODE>NULL</CODE> nor <CODE>NOT NULL</CODE> is specified, the 
  column is treated as though <CODE>NULL</CODE> had been specified. 
  <LI>An integer column may have the additional attribute 
  <CODE>AUTO_INCREMENT</CODE>. When you insert a value of <CODE>NULL</CODE> 
  (recommended) or <CODE>0</CODE> into an <CODE>AUTO_INCREMENT</CODE> column, 
  the column is set to <CODE>value+1</CODE>, where <CODE>value</CODE> is the 
  largest value for the column currently in the table. 
  <CODE>AUTO_INCREMENT</CODE> sequences begin with <CODE>1</CODE>. See section 
  <A 
  href="file:///D:/work/mysql/manual-split/manual_Clients.html#mysql_insert_id">24.1.3.126 
  <CODE>mysql_insert_id()</CODE></A>. If you delete the row containing the 
  maximum value for an <CODE>AUTO_INCREMENT</CODE> column, the value will be 
  reused with an <CODE>ISAM</CODE>, <CODE>GEMINI</CODE> or <CODE>BDB</CODE> 
  table but not with a <CODE>MyISAM</CODE> or <CODE>InnoDB</CODE> table. If you 
  delete all rows in the table with <CODE>DELETE FROM table_name</CODE> (without 
  a <CODE>WHERE</CODE>) in <CODE>AUTOCOMMIT</CODE> mode, the sequence starts 
  over for all table types. <STRONG>NOTE:</STRONG> There can be only one 
  <CODE>AUTO_INCREMENT</CODE> column per table, and it must be indexed. 
  <STRONG>MySQL</STRONG> Version 3.23 will also only work properly if the 
  auto_increment column only has positive values. Inserting a negative number is 
  regarded as inserting a very large positive number. This is done to avoid 
  precision problems when numbers 'wrap' over from positive to negative and also 
  to ensure that one doesn't accidentally get an auto_increment column that 
  contains 0. <A name=IDX860></A><A name=IDX861></A>To make 
  <STRONG>MySQL</STRONG> compatible with some ODBC applications, you can find 
  the last inserted row with the following query: <PRE>SELECT * FROM tbl_name WHERE auto_col IS NULL
</PRE>
  <LI><CODE>NULL</CODE> values are handled differently for 
  <CODE>TIMESTAMP</CODE> columns than for other column types. You cannot store a 
  literal <CODE>NULL</CODE> in a <CODE>TIMESTAMP</CODE> column; setting the 
  column to <CODE>NULL</CODE> sets it to the current date and time. Because 
  <CODE>TIMESTAMP</CODE> columns behave this way, the <CODE>NULL</CODE> and 
  <CODE>NOT NULL</CODE> attributes do not apply in the normal way and are 
  ignored if you specify them. On the other hand, to make it easier for 
  <STRONG>MySQL</STRONG> clients to use <CODE>TIMESTAMP</CODE> columns, the 
  server reports that such columns may be assigned <CODE>NULL</CODE> values 
  (which is true), even though <CODE>TIMESTAMP</CODE> never actually will 
  contain a <CODE>NULL</CODE> value. You can see this when you use 
  <CODE>DESCRIBE tbl_name</CODE> to get a description of your table. Note that 
  setting a <CODE>TIMESTAMP</CODE> column to <CODE>0</CODE> is not the same as 
  setting it to <CODE>NULL</CODE>, because <CODE>0</CODE> is a valid 
  <CODE>TIMESTAMP</CODE> value. 
  <LI>If no <CODE>DEFAULT</CODE> value is specified for a column, 
  <STRONG>MySQL</STRONG> automatically assigns one. If the column may take 
  <CODE>NULL</CODE> as a value, the default value is <CODE>NULL</CODE>. If the 
  column is declared as <CODE>NOT NULL</CODE>, the default value depends on the 
  column type: 
  <UL>
    <LI>For numeric types other than those declared with the 
    <CODE>AUTO_INCREMENT</CODE> attribute, the default is <CODE>0</CODE>. For an 
    <CODE>AUTO_INCREMENT</CODE> column, the default value is the next value in 
    the sequence. 
    <LI>For date and time types other than <CODE>TIMESTAMP</CODE>, the default 
    is the appropriate zero value for the type. For the first 
    <CODE>TIMESTAMP</CODE> column in a table, the default value is the current 
    date and time. See section <A 
    href="file:///D:/work/mysql/manual-split/manual_Reference.html#Date_and_time_types">7.3.3 
    Date and Time Types</A>. 
    <LI>For string types other than <CODE>ENUM</CODE>, the default value is the 
    empty string. For <CODE>ENUM</CODE>, the default is the first enumeration 
    value. </LI></UL>Default values must be constants. This means, for example, 
  that you cannot set the default for a date column to be the value of a 
  function such as <CODE>NOW()</CODE> or <CODE>CURRENT_DATE</CODE>. 
  <LI><CODE>KEY</CODE> is a synonym for <CODE>INDEX</CODE>. 
  <LI>In <STRONG>MySQL</STRONG>, a <CODE>UNIQUE</CODE> key can have only 
  distinct values. An error occurs if you try to add a new row with a key that 
  matches an existing row. 
  <LI><A name=IDX862></A>A <CODE>PRIMARY KEY</CODE> is a unique <CODE>KEY</CODE> 
  with the extra constraint that all key columns must be defined as <CODE>NOT 
  NULL</CODE>. In <STRONG>MySQL</STRONG> the key is named <CODE>PRIMARY</CODE>. 
  A table can have only one <CODE>PRIMARY KEY</CODE>. If you don't have a 
  <CODE>PRIMARY KEY</CODE> and some applications ask for the <CODE>PRIMARY 
  KEY</CODE> in your tables, <STRONG>MySQL</STRONG> will return the first 
  <CODE>UNIQUE</CODE> key, which doesn't have any <CODE>NULL</CODE> columns, as 
  the <CODE>PRIMARY KEY</CODE>. 
  <LI>A <CODE>PRIMARY KEY</CODE> can be a multiple-column index. However, you 
  cannot create a multiple-column index using the <CODE>PRIMARY KEY</CODE> key 
  attibute in a column specification. Doing so will mark only that single column 
  as primary. You must use the <CODE>PRIMARY KEY(index_col_name, ...)</CODE> 
  syntax. 
  <LI>If the <CODE>PRIMARY</CODE> or <CODE>UNIQUE</CODE> key consists of only 
  one column and this is of type integer, you can also refer to it as 
  <CODE>_rowid</CODE> (new in Version 3.23.11). 
  <LI>If you don't assign a name to an index, the index will be assigned the 
  same name as the first <CODE>index_col_name</CODE>, with an optional suffix 
  (<CODE>_2</CODE>, <CODE>_3</CODE>, <CODE>...</CODE>) to make it unique. You 
  can see index names for a table using <CODE>SHOW INDEX FROM tbl_name</CODE>. 
  See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#SHOW">7.28 
  <CODE>SHOW</CODE> Syntax</A>. 
  <LI><A name=IDX863></A><A name=IDX864></A>Only the <CODE>MyISAM</CODE> table 
  type supports indexes on columns that can have <CODE>NULL</CODE> values. In 
  other cases you must declare such columns <CODE>NOT NULL</CODE> or an error 
  results. 
  <LI>With <CODE>col_name(length)</CODE> syntax, you can specify an index that 
  uses only a part of a <CODE>CHAR</CODE> or <CODE>VARCHAR</CODE> column. This 
  can make the index file much smaller. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Indexes">7.3.6 
  Column Indexes</A>. 
  <LI><A name=IDX865></A><A name=IDX866></A><A name=IDX867></A><A 
  name=IDX868></A>Only the <CODE>MyISAM</CODE> table type supports indexing on 
  <CODE>BLOB</CODE> and <CODE>TEXT</CODE> columns. When putting an index on a 
  <CODE>BLOB</CODE> or <CODE>TEXT</CODE> column you MUST always specify the 
  length of the index: <PRE>CREATE TABLE test (blob_col BLOB, index(blob_col(10)));
</PRE>
  <LI>When you use <CODE>ORDER BY</CODE> or <CODE>GROUP BY</CODE> with a 
  <CODE>TEXT</CODE> or <CODE>BLOB</CODE> column, only the first 
  <CODE>max_sort_length</CODE> bytes are used. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#BLOB">7.3.4.2 
  The <CODE>BLOB</CODE> and <CODE>TEXT</CODE> Types</A>. 
  <LI>In <STRONG>MySQL</STRONG> Version 3.23.23 or later, you can also create 
  special <STRONG>FULLTEXT</STRONG> indexes. They are used for full-text search. 
  Only the <CODE>MyISAM</CODE> table type supports <CODE>FULLTEXT</CODE> 
  indexes. They can be created only from <CODE>VARCHAR</CODE> and 
  <CODE>TEXT</CODE> columns. Indexing always happens over the entire column, 
  partial indexing is not supported. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Fulltext_Search.html#Fulltext_Search">12 
  MySQL Full-text Search</A> for details of operation. 
  <LI>The <CODE>FOREIGN KEY</CODE>, <CODE>CHECK</CODE>, and 
  <CODE>REFERENCES</CODE> clauses don't actually do anything. The syntax for 
  them is provided only for compatibility, to make it easier to port code from 
  other SQL servers and to run applications that create tables with references. 
  See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Compatibility.html#Missing_functions">5.4 
  Functionality Missing from MySQL</A>. 
  <LI>Each <CODE>NULL</CODE> column takes one bit extra, rounded up to the 
  nearest byte. 
  <LI>The maximum record length in bytes can be calculated as follows: <PRE>row length = 1
             + (sum of column lengths)
             + (number of NULL columns + 7)/8
             + (number of variable-length columns)
</PRE>
  <LI>The <CODE>table_options</CODE> and <CODE>SELECT</CODE> options are only 
  implemented in <STRONG>MySQL</STRONG> Version 3.23 and above. The different 
  table types are: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD>BDB or Berkeley_db </TD>
      <TD>Transaction-safe tables with page locking. See section <A 
        href="file:///D:/work/mysql/manual-split/manual_Table_types.html#BDB">8.5 
        BDB or Berkeley_DB Tables</A>. </TD>
    <TR>
      <TD>GEMINI </TD>
      <TD>Transaction-safe tables with row-level locking See section <A 
        href="file:///D:/work/mysql/manual-split/manual_Table_types.html#GEMINI">8.6 
        GEMINI Tables</A>. </TD>
    <TR>
      <TD>HEAP </TD>
      <TD>The data for this table is only stored in memory. See section <A 
        href="file:///D:/work/mysql/manual-split/manual_Table_types.html#HEAP">8.4 
        HEAP Tables</A>. </TD>
    <TR>
      <TD>ISAM </TD>
      <TD>The original table handler. See section <A 
        href="file:///D:/work/mysql/manual-split/manual_Table_types.html#ISAM">8.3 
        ISAM Tables</A>. </TD>
    <TR>
      <TD>InnoDB </TD>
      <TD>Transaction-safe tables with row locking. See section <A 
        href="file:///D:/work/mysql/manual-split/manual_Table_types.html#InnoDB">8.7 
        InnoDB Tables</A>. </TD>
    <TR>
      <TD>MERGE </TD>
      <TD>A collection of MyISAM tables used as one table. See section <A 
        href="file:///D:/work/mysql/manual-split/manual_Table_types.html#MERGE">8.2 
        MERGE Tables</A>. </TD>
    <TR>
      <TD>MyISAM </TD>
      <TD>The new binary portable table handler that is replacing ISAM. See 
        section <A 
        href="file:///D:/work/mysql/manual-split/manual_Table_types.html#MyISAM">8.1 
        MyISAM Tables</A>. </TD></TR></TBODY></TABLE>See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Table_types.html#Table_types">8 
  MySQL Table Types</A>. If a table type is specified, and that particular type 
  is not available, <STRONG>MySQL</STRONG> will choose the closest table type to 
  the one that you have specified. For example, if <CODE>TYPE=BDB</CODE> is 
  specified, and that distribution of <STRONG>MySQL</STRONG> does not support 
  <CODE>BDB</CODE> tables, the table will be created as <CODE>MyISAM</CODE> 
  instead. The other table options are used to optimize the behavior of the 
  table. In most cases, you don't have to specify any of them. The options work 
  for all table types, if not otherwise indicated: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD><CODE>AUTO_INCREMENT</CODE> </TD>
      <TD>The next auto_increment value you want to set for your table 
        (MyISAM). </TD>
    <TR>
      <TD><CODE>AVG_ROW_LENGTH</CODE> </TD>
      <TD>An approximation of the average row length for your table. You only 
        need to set this for large tables with variable size records. </TD>
    <TR>
      <TD><CODE>CHECKSUM</CODE> </TD>
      <TD>Set this to 1 if you want <STRONG>MySQL</STRONG> to maintain a 
        checksum for all rows (makes the table a little slower to update but 
        makes it easier to find corrupted tables) (MyISAM). </TD>
    <TR>
      <TD><CODE>COMMENT</CODE> </TD>
      <TD>A 60-character comment for your table. </TD>
    <TR>
      <TD><CODE>MAX_ROWS</CODE> </TD>
      <TD>Max number of rows you plan to store in the table. </TD>
    <TR>
      <TD><CODE>MIN_ROWS</CODE> </TD>
      <TD>Minimum number of rows you plan to store in the table. </TD>
    <TR>
      <TD><CODE>PACK_KEYS</CODE> </TD>
      <TD>Set this to 1 if you want to have a smaller index. This usually 
        makes updates slower and reads faster (MyISAM, ISAM). </TD>
    <TR>
      <TD><CODE>PASSWORD</CODE> </TD>
      <TD>Encrypt the <CODE>.frm</CODE> file with a password. This option 
        doesn't do anything in the standard <STRONG>MySQL</STRONG> version. </TD>
    <TR>
      <TD><CODE>DELAY_KEY_WRITE</CODE> </TD>
      <TD>Set this to 1 if want to delay key table updates until the table is 
        closed (MyISAM). </TD>
    <TR>
      <TD><CODE>ROW_FORMAT</CODE> </TD>
      <TD>Defines how the rows should be stored (for the future). 
    </TD></TR></TBODY></TABLE>When you use a <CODE>MyISAM</CODE> table, 
  <STRONG>MySQL</STRONG> uses the product of <CODE>max_rows * 
  avg_row_length</CODE> to decide how big the resulting table will be. If you 
  don't specify any of the above options, the maximum size for a table will be 
  4G (or 2G if your operating systems only supports 2G tables). The reason for 
  this is just to keep down the pointer sizes to make the index smaller and 
  faster if you don't really need big files. If you don't use 
  <CODE>PACK_KEYS</CODE>, the default is to only pack strings, not numbers. If 
  you use <CODE>PACK_KEYS=1</CODE>, numbers will be packed as well. When packing 
  binary number keys, <STRONG>MySQL</STRONG> will use prefix compression. This 
  means that you will only get a big benefit of this if you have many numbers 
  that are the same. Prefix compression means that every key needs one extra 
  byte to indicate how many bytes of the previous key are the same for the next 
  key (note that the pointer to the row is stored in high-byte-first-order 
  directly after the key, to improve compression.) This means that if you have 
  many equal keys on two rows in a row, all following 'same' keys will usually 
  only take 2 bytes (including the pointer to the row). Compare this to the 
  ordinary case where the following keys will take storage_size_for_key + 
  pointer_size (usually 4). On the other hand, if all keys are totally 
  different, you will lose 1 byte per key, if the key isn't a key that can have 
  <CODE>NULL</CODE> values (In this case the packed key length will be stored in 
  the same byte that is used to mark if a key is <CODE>NULL</CODE>.) 
  <LI>If you specify a <CODE>SELECT</CODE> after the <CODE>CREATE 
  STATEMENT</CODE>, <STRONG>MySQL</STRONG> will create new fields for all 
  elements in the <CODE>SELECT</CODE>. For example: <PRE>mysql&gt; CREATE TABLE test (a int not null auto_increment,
           primary key (a), key(b))
           TYPE=MyISAM SELECT b,c from test2;
</PRE>This will create a <CODE>MyISAM</CODE> table with 3 columns. Note that 
  the table will automatically be deleted if any errors occur while copying data 
  into the table. To ensure that the update log/binary log can be used to 
  re-create the original tables, <STRONG>MySQL</STRONG> will not allow 
  concurrent inserts during <CODE>CREATE TABLE .... SELECT</CODE>. 
  <LI>The <CODE>RAID_TYPE</CODE> option will help you to break the 2G/4G limit 
  for the MyISAM data file (not the index file) on operating systems that don't 
  support big files. You can get also more speed from the I/O bottleneck by 
  putting <CODE>RAID</CODE> directories on different physical disks. 
  <CODE>RAID_TYPE</CODE> will work on any OS, as long as you have configured 
  <STRONG>MySQL</STRONG> with <CODE>--with-raid</CODE>. For now the only allowed 
  <CODE>RAID_TYPE</CODE> is <CODE>STRIPED</CODE> (<CODE>1</CODE> and 
  <CODE>RAID0</CODE> are aliases for this). If you specify 
  <CODE>RAID_TYPE=STRIPED</CODE> for a <CODE>MyISAM</CODE> table, 
  <CODE>MyISAM</CODE> will create <CODE>RAID_CHUNKS</CODE> subdirectories named 
  00, 01, 02 in the database directory. In each of these directories 
  <CODE>MyISAM</CODE> will create a <CODE>table_name.MYD</CODE>. When writing 
  data to the data file, the <CODE>RAID</CODE> handler will map the first 
  <CODE>RAID_CHUNKSIZE</CODE> *1024 bytes to the first file, the next 
  <CODE>RAID_CHUNKSIZE</CODE> *1024 bytes to the next file and so on. 
  <LI><CODE>UNION</CODE> is used when you want to use a collection of identical 
  tables as one. This only works with MERGE tables. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Table_types.html#MERGE">8.2 
  MERGE Tables</A>. For the moment you need to have <CODE>SELECT</CODE>, 
  <CODE>UPDATE</CODE>, and <CODE>DELETE</CODE> privileges on the tables you map 
  to a <CODE>MERGE</CODE> table. All mapped tables must be in the same database 
  as the <CODE>MERGE</CODE> table. 
  <LI>In the created table the <CODE>PRIMARY</CODE> key will be placed first, 
  followed by all <CODE>UNIQUE</CODE> keys and then the normal keys. This helps 
  the <STRONG>MySQL</STRONG> optimizer to prioritize which key to use and also 
  more quickly detect duplicated <CODE>UNIQUE</CODE> keys. 
  <LI>By using <CODE>DATA DIRECTORY="directory"</CODE> or <CODE>INDEX 
  DIRECTORY="directory"</CODE> you can specify where the table handler should 
  put it's table and index files. This only works for <CODE>MyISAM</CODE> tables 
  in <CODE>MySQL</CODE> 4.0, when you are not using the 
  <CODE>--skip-symlink</CODE> option. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Performance.html#Symbolic_links_to_tables">13.2.3.2 
  Using Symbolic Links for Tables</A>. </LI></UL>
<P><A name=IDX869></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#Silent_column_changes" 
name=Silent_column_changes>7.7.1 Silent Column Specification Changes</A></H3>
<P>In some cases, <STRONG>MySQL</STRONG> silently changes a column specification 
from that given in a <CODE>CREATE TABLE</CODE> statement. (This may also occur 
with <CODE>ALTER TABLE</CODE>.): </P>
<UL>
  <LI><CODE>VARCHAR</CODE> columns with a length less than four are changed to 
  <CODE>CHAR</CODE>. 
  <LI>If any column in a table has a variable length, the entire row is 
  variable-length as a result. Therefore, if a table contains any 
  variable-length columns (<CODE>VARCHAR</CODE>, <CODE>TEXT</CODE>, or 
  <CODE>BLOB</CODE>), all <CODE>CHAR</CODE> columns longer than three characters 
  are changed to <CODE>VARCHAR</CODE> columns. This doesn't affect how you use 
  the columns in any way; in <STRONG>MySQL</STRONG>, <CODE>VARCHAR</CODE> is 
  just a different way to store characters. <STRONG>MySQL</STRONG> performs this 
  conversion because it saves space and makes table operations faster. See 
  section <A 
  href="file:///D:/work/mysql/manual-split/manual_Table_types.html#Table_types">8 
  MySQL Table Types</A>. 
  <LI><CODE>TIMESTAMP</CODE> display sizes must be even and in the range from 2 
  to 14. If you specify a display size of 0 or greater than 14, the size is 
  coerced to 14. Odd-valued sizes in the range from 1 to 13 are coerced to the 
  next higher even number. 
  <LI>You cannot store a literal <CODE>NULL</CODE> in a <CODE>TIMESTAMP</CODE> 
  column; setting it to <CODE>NULL</CODE> sets it to the current date and time. 
  Because <CODE>TIMESTAMP</CODE> columns behave this way, the <CODE>NULL</CODE> 
  and <CODE>NOT NULL</CODE> attributes do not apply in the normal way and are 
  ignored if you specify them. <CODE>DESCRIBE tbl_name</CODE> always reports 
  that a <CODE>TIMESTAMP</CODE> column may be assigned <CODE>NULL</CODE> values. 

  <LI><STRONG>MySQL</STRONG> maps certain column types used by other SQL 
  database vendors to <STRONG>MySQL</STRONG> types. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Other-vendor_column_types">7.3.8 
  Using Column Types from Other Database Engines</A>. </LI></UL>
<P>If you want to see whether or not <STRONG>MySQL</STRONG> used a column type 
other than the one you specified, issue a <CODE>DESCRIBE tbl_name</CODE> 
statement after creating or altering your table. </P>
<P><A name=IDX870></A>Certain other column type changes may occur if you 
compress a table using <CODE>myisampack</CODE>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Table_types.html#Compressed_format">8.1.2.3 
Compressed Table Characteristics</A>. </P>
<P><A name=IDX871></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#ALTER_TABLE" 
name=ALTER_TABLE>7.8 <CODE>ALTER TABLE</CODE> Syntax</A></H2><PRE>ALTER [IGNORE] TABLE tbl_name alter_spec [, alter_spec ...]

alter_specification:
        ADD [COLUMN] create_definition [FIRST | AFTER column_name ]
  or    ADD [COLUMN] (create_definition, create_definition,...)
  or    ADD INDEX [index_name] (index_col_name,...)
  or    ADD PRIMARY KEY (index_col_name,...)
  or    ADD UNIQUE [index_name] (index_col_name,...)
  or    ADD FULLTEXT [index_name] (index_col_name,...)
  or	ADD [CONSTRAINT symbol] FOREIGN KEY index_name (index_col_name,...)
            [reference_definition]
  or    ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT}
  or    CHANGE [COLUMN] old_col_name create_definition
  or    MODIFY [COLUMN] create_definition
  or    DROP [COLUMN] col_name
  or    DROP PRIMARY KEY
  or    DROP INDEX index_name
  or    RENAME [TO] new_tbl_name
  or    ORDER BY col
  or    table_options
</PRE>
<P><CODE>ALTER TABLE</CODE> allows you to change the structure of an existing 
table. For example, you can add or delete columns, create or destroy indexes, 
change the type of existing columns, or rename columns or the table itself. You 
can also change the comment for the table and type of the table. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#CREATE_TABLE">7.7 
<CODE>CREATE TABLE</CODE> Syntax</A>. </P>
<P>If you use <CODE>ALTER TABLE</CODE> to change a column specification but 
<CODE>DESCRIBE tbl_name</CODE> indicates that your column was not changed, it is 
possible that <STRONG>MySQL</STRONG> ignored your modification for one of the 
reasons described in section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Silent_column_changes">7.7.1 
Silent Column Specification Changes</A>. For example, if you try to change a 
<CODE>VARCHAR</CODE> column to <CODE>CHAR</CODE>, <STRONG>MySQL</STRONG> will 
still use <CODE>VARCHAR</CODE> if the table contains other variable-length 
columns. </P>
<P><CODE>ALTER TABLE</CODE> works by making a temporary copy of the original 
table. The alteration is performed on the copy, then the original table is 
deleted and the new one is renamed. This is done in such a way that all updates 
are automatically redirected to the new table without any failed updates. While 
<CODE>ALTER TABLE</CODE> is executing, the original table is readable by other 
clients. Updates and writes to the table are stalled until the new table is 
ready. </P>
<P>Note that if you use any other option to <CODE>ALTER TABLE</CODE> than 
<CODE>RENAME</CODE>, <STRONG>MySQL</STRONG> will always create a temporary 
table, even if the data wouldn't strictly need to be copied (like when you 
change the name of a column). We plan to fix this in the future, but as one 
doesn't normally do <CODE>ALTER TABLE</CODE> that often this isn't that high on 
our TODO. </P>
<UL>
  <LI>To use <CODE>ALTER TABLE</CODE>, you need <STRONG>select</STRONG>, 
  <STRONG>insert</STRONG>, <STRONG>delete</STRONG>, <STRONG>update</STRONG>, 
  <STRONG>create</STRONG>, and <STRONG>drop</STRONG> privileges on the table. 
  <LI><CODE>IGNORE</CODE> is a <STRONG>MySQL</STRONG> extension to ANSI SQL92. 
  It controls how <CODE>ALTER TABLE</CODE> works if there are duplicates on 
  unique keys in the new table. If <CODE>IGNORE</CODE> isn't specified, the copy 
  is aborted and rolled back. If <CODE>IGNORE</CODE> is specified, then for rows 
  with duplicates on a unique key, only the first row is used; the others are 
  deleted. 
  <LI>You can issue multiple <CODE>ADD</CODE>, <CODE>ALTER</CODE>, 
  <CODE>DROP</CODE>, and <CODE>CHANGE</CODE> clauses in a single <CODE>ALTER 
  TABLE</CODE> statement. This is a <STRONG>MySQL</STRONG> extension to ANSI 
  SQL92, which allows only one of each clause per <CODE>ALTER TABLE</CODE> 
  statement. 
  <LI><CODE>CHANGE col_name</CODE>, <CODE>DROP col_name</CODE>, and <CODE>DROP 
  INDEX</CODE> are <STRONG>MySQL</STRONG> extensions to ANSI SQL92. 
  <LI><CODE>MODIFY</CODE> is an Oracle extension to <CODE>ALTER TABLE</CODE>. 
  <LI><CODE>TRUNCATE</CODE> is an Oracle extension. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#TRUNCATE">7.18 
  <CODE>TRUNCATE</CODE> Syntax</A>. 
  <LI>The optional word <CODE>COLUMN</CODE> is a pure noise word and can be 
  omitted. 
  <LI>If you use <CODE>ALTER TABLE tbl_name RENAME TO new_name</CODE> without 
  any other options, <STRONG>MySQL</STRONG> simply renames the files that 
  correspond to the table <CODE>tbl_name</CODE>. There is no need to create the 
  temporary table. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#RENAME_TABLE">7.9 
  <CODE>RENAME TABLE</CODE> Syntax</A>. 
  <LI><CODE>create_definition</CODE> clauses use the same syntax for 
  <CODE>ADD</CODE> and <CODE>CHANGE</CODE> as for <CODE>CREATE TABLE</CODE>. 
  Note that this syntax includes the column name, not just the column type. See 
  section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#CREATE_TABLE">7.7 
  <CODE>CREATE TABLE</CODE> Syntax</A>. 
  <LI>You can rename a column using a <CODE>CHANGE old_col_name 
  create_definition</CODE> clause. To do so, specify the old and new column 
  names and the type that the column currently has. For example, to rename an 
  <CODE>INTEGER</CODE> column from <CODE>a</CODE> to <CODE>b</CODE>, you can do 
  this: <PRE>mysql&gt; ALTER TABLE t1 CHANGE a b INTEGER;
</PRE>If you want to change a column's type but not the name, 
  <CODE>CHANGE</CODE> syntax still requires two column names even if they are 
  the same. For example: <PRE>mysql&gt; ALTER TABLE t1 CHANGE b b BIGINT NOT NULL;
</PRE>However, as of <STRONG>MySQL</STRONG> Version 3.22.16a, you can also use 
  <CODE>MODIFY</CODE> to change a column's type without renaming it: <PRE>mysql&gt; ALTER TABLE t1 MODIFY b BIGINT NOT NULL;
</PRE>
  <LI>If you use <CODE>CHANGE</CODE> or <CODE>MODIFY</CODE> to shorten a column 
  for which an index exists on part of the column (for instance, if you have an 
  index on the first 10 characters of a <CODE>VARCHAR</CODE> column), you cannot 
  make the column shorter than the number of characters that are indexed. 
  <LI>When you change a column type using <CODE>CHANGE</CODE> or 
  <CODE>MODIFY</CODE>, <STRONG>MySQL</STRONG> tries to convert data to the new 
  type as well as possible. 
  <LI>In <STRONG>MySQL</STRONG> Version 3.22 or later, you can use 
  <CODE>FIRST</CODE> or <CODE>ADD ... AFTER col_name</CODE> to add a column at a 
  specific position within a table row. The default is to add the column last. 
  <A name=IDX872></A>
  <LI><CODE>ALTER COLUMN</CODE> specifies a new default value for a column or 
  removes the old default value. If the old default is removed and the column 
  can be <CODE>NULL</CODE>, the new default is <CODE>NULL</CODE>. If the column 
  cannot be <CODE>NULL</CODE>, <STRONG>MySQL</STRONG> assigns a default value. 
  Default value assignment is described in section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#CREATE_TABLE">7.7 
  <CODE>CREATE TABLE</CODE> Syntax</A>. <A name=IDX873></A>
  <LI><CODE>DROP INDEX</CODE> removes an index. This is a <STRONG>MySQL</STRONG> 
  extension to ANSI SQL92. 
  <LI>If columns are dropped from a table, the columns are also removed from any 
  index of which they are a part. If all columns that make up an index are 
  dropped, the index is dropped as well. <A name=IDX874></A>
  <LI><CODE>DROP PRIMARY KEY</CODE> drops the primary index. If no such index 
  exists, it drops the first <CODE>UNIQUE</CODE> index in the table. 
  (<STRONG>MySQL</STRONG> marks the first <CODE>UNIQUE</CODE> key as the 
  <CODE>PRIMARY KEY</CODE> if no <CODE>PRIMARY KEY</CODE> was specified 
  explicitly.) <A name=IDX875></A>
  <LI><CODE>ORDER BY</CODE> allows you to create the new table with the rows in 
  a specific order. Note that the table will not remain in this order after 
  inserts and deletes. In some cases, it may make sorting easier for 
  <STRONG>MySQL</STRONG> if the table is in order by the column that you wish to 
  order it by later. This option is mainly useful when you know that you are 
  mostly going to query the rows in a certain order; By using this option after 
  big changes to the table, you may be able to get higher performance. <A 
  name=IDX876></A>
  <LI>If you use <CODE>ALTER TABLE</CODE> on a <CODE>MyISAM</CODE> table, all 
  non-unique indexes are created in a separate batch (like in 
  <CODE>REPAIR</CODE>). This should make <CODE>ALTER TABLE</CODE> much faster 
  when you have many indexes. 
  <LI><A name=IDX877></A>With the C API function <CODE>mysql_info()</CODE>, you 
  can find out how many records were copied, and (when <CODE>IGNORE</CODE> is 
  used) how many records were deleted due to duplication of unique key values. 
  <LI><A name=IDX878></A><A name=IDX879></A>The <CODE>FOREIGN KEY</CODE>, 
  <CODE>CHECK</CODE>, and <CODE>REFERENCES</CODE> clauses don't actually do 
  anything. The syntax for them is provided only for compatibility, to make it 
  easier to port code from other SQL servers and to run applications that create 
  tables with references. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Compatibility.html#Missing_functions">5.4 
  Functionality Missing from MySQL</A>. </LI></UL>
<P>Here is an example that shows some of the uses of <CODE>ALTER TABLE</CODE>. 
We begin with a table <CODE>t1</CODE> that is created as shown below: </P><PRE>mysql&gt; CREATE TABLE t1 (a INTEGER,b CHAR(10));
</PRE>
<P>To rename the table from <CODE>t1</CODE> to <CODE>t2</CODE>: </P><PRE>mysql&gt; ALTER TABLE t1 RENAME t2;
</PRE>
<P>To change column <CODE>a</CODE> from <CODE>INTEGER</CODE> to <CODE>TINYINT 
NOT NULL</CODE> (leaving the name the same), and to change column <CODE>b</CODE> 
from <CODE>CHAR(10)</CODE> to <CODE>CHAR(20)</CODE> as well as renaming it from 
<CODE>b</CODE> to <CODE>c</CODE>: </P><PRE>mysql&gt; ALTER TABLE t2 MODIFY a TINYINT NOT NULL, CHANGE b c CHAR(20);
</PRE>
<P>To add a new <CODE>TIMESTAMP</CODE> column named <CODE>d</CODE>: </P><PRE>mysql&gt; ALTER TABLE t2 ADD d TIMESTAMP;
</PRE>
<P>To add an index on column <CODE>d</CODE>, and make column <CODE>a</CODE> the 
primary key: </P><PRE>mysql&gt; ALTER TABLE t2 ADD INDEX (d), ADD PRIMARY KEY (a);
</PRE>
<P>To remove column <CODE>c</CODE>: </P><PRE>mysql&gt; ALTER TABLE t2 DROP COLUMN c;
</PRE>
<P>To add a new <CODE>AUTO_INCREMENT</CODE> integer column named <CODE>c</CODE>: 
</P><PRE>mysql&gt; ALTER TABLE t2 ADD c INT UNSIGNED NOT NULL AUTO_INCREMENT,
           ADD INDEX (c);
</PRE>
<P>Note that we indexed <CODE>c</CODE>, because <CODE>AUTO_INCREMENT</CODE> 
columns must be indexed, and also that we declare <CODE>c</CODE> as <CODE>NOT 
NULL</CODE>, because indexed columns cannot be <CODE>NULL</CODE>. </P>
<P>When you add an <CODE>AUTO_INCREMENT</CODE> column, column values are filled 
in with sequence numbers for you automatically. You can set the first sequence 
number by executing <CODE>SET INSERT_ID=#</CODE> before <CODE>ALTER TABLE</CODE> 
or using the <CODE>AUTO_INCREMENT = #</CODE> table option. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#SET_OPTION">7.33 
<CODE>SET</CODE> Syntax</A>. </P>
<P>With MyISAM tables, if you don't change the <CODE>AUTO_INCREMENT</CODE> 
column, the sequence number will not be affected. If you drop an 
<CODE>AUTO_INCREMENT</CODE> column and then add another 
<CODE>AUTO_INCREMENT</CODE> column, the numbers will start from 1 again. </P>
<P>See section <A 
href="file:///D:/work/mysql/manual-split/manual_Problems.html#ALTER_TABLE_problems">21.20 
Problems with <CODE>ALTER TABLE</CODE>.</A>. </P>
<P><A name=IDX880></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#RENAME_TABLE" 
name=RENAME_TABLE>7.9 <CODE>RENAME TABLE</CODE> Syntax</A></H2><PRE>RENAME TABLE tbl_name TO new_table_name[, tbl_name2 TO new_table_name2,...]
</PRE>
<P>The rename is done atomically, which means that no other thread can access 
any of the tables while the rename is running. This makes it possible to replace 
a table with an empty one: </P><PRE>CREATE TABLE new_table (...);
RENAME TABLE old_table TO backup_table, new_table TO old_table;
</PRE>
<P>The rename is done from left to right, which means that if you want to swap 
two tables names, you have to: </P><PRE>RENAME TABLE old_table    TO backup_table,
             new_table    TO old_table,
             backup_table TO new_table;
</PRE>
<P>As long as two databases are on the same disk you can also rename from one 
database to another: </P><PRE>RENAME TABLE current_database.table_name TO other_database.table_name;
</PRE>
<P>When you execute <CODE>RENAME</CODE>, you can't have any locked tables or 
active transactions. You must also have the <CODE>ALTER</CODE> and 
<CODE>DROP</CODE> privilege on the original table and <CODE>CREATE</CODE> and 
<CODE>INSERT</CODE> privilege on the new table. </P>
<P>If <STRONG>MySQL</STRONG> encounters any errors in a multiple table rename, 
it will do a reverse rename for all renamed tables to get everything back to the 
original state. </P>
<P><A name=IDX881></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#DROP_TABLE" 
name=DROP_TABLE>7.10 <CODE>DROP TABLE</CODE> Syntax</A></H2><PRE>DROP TABLE [IF EXISTS] tbl_name [, tbl_name,...] [RESTRICT | CASCADE]
</PRE>
<P><CODE>DROP TABLE</CODE> removes one or more tables. All table data and the 
table definition are <EM>removed</EM>, so <STRONG>be careful</STRONG> with this 
command! </P>
<P>In <STRONG>MySQL</STRONG> Version 3.22 or later, you can use the keywords 
<CODE>IF EXISTS</CODE> to prevent an error from occurring for tables that don't 
exist. </P>
<P><CODE>RESTRICT</CODE> and <CODE>CASCADE</CODE> are allowed to make porting 
easier. For the moment they don't do anything. </P>
<P><STRONG>NOTE</STRONG>: <CODE>DROP TABLE</CODE> is not transaction-safe and 
will automatically commit any active transactions. </P>
<P><A name=IDX882></A><A name=IDX883></A><A name=IDX884></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#OPTIMIZE_TABLE" 
name=OPTIMIZE_TABLE>7.11 <CODE>OPTIMIZE TABLE</CODE> Syntax</A></H2><PRE>OPTIMIZE TABLE tbl_name[,tbl_name]...
</PRE>
<P><CODE>OPTIMIZE TABLE</CODE> should be used if you have deleted a large part 
of a table or if you have made many changes to a table with variable-length rows 
(tables that have <CODE>VARCHAR</CODE>, <CODE>BLOB</CODE>, or <CODE>TEXT</CODE> 
columns). Deleted records are maintained in a linked list and subsequent 
<CODE>INSERT</CODE> operations reuse old record positions. You can use 
<CODE>OPTIMIZE TABLE</CODE> to reclaim the unused space and to defragment the 
data file. </P>
<P>For the moment <CODE>OPTIMIZE TABLE</CODE> only works on 
<STRONG>MyISAM</STRONG> and <CODE>BDB</CODE> tables. For <CODE>BDB</CODE> 
tables, <CODE>OPTIMIZE TABLE</CODE> is currently mapped to <CODE>ANALYZE 
TABLE</CODE>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#ANALYZE_TABLE">7.15 
<CODE>ANALYZE TABLE</CODE> Syntax</A>. </P>
<P>You can get optimize table to work on other table types by starting 
<CODE>mysqld</CODE> with <CODE>--skip-new</CODE> or <CODE>--safe-mode</CODE>, 
but in this case <CODE>OPTIMIZE TABLE</CODE> is just mapped to <CODE>ALTER 
TABLE</CODE>. </P>
<P><CODE>OPTIMIZE TABLE</CODE> works the following way: 
<UL>
  <LI>If the table has deleted or split rows, repair the table. 
  <LI>If the index pages are not sorted, sort them. 
  <LI>If the statistics are not up to date (and the repair couldn't be done by 
  sorting the index), update them. </LI></UL>
<P><CODE>OPTIMIZE TABLE</CODE> for <CODE>MyISAM</CODE> tables is equvialent of 
running <CODE>myisamchk --quick --check-changed-tables --sort-index 
--analyze</CODE> on the table. </P>
<P>Note that the table is locked during the time <CODE>OPTIMIZE TABLE</CODE> is 
running! </P>
<P><A name=IDX885></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#CHECK_TABLE" 
name=CHECK_TABLE>7.12 <CODE>CHECK TABLE</CODE> Syntax</A></H2><PRE>CHECK TABLE tbl_name[,tbl_name...] [option [option...]]

option = QUICK | FAST | MEDIUM | EXTEND | CHANGED
</PRE>
<P><CODE>CHECK TABLE</CODE> only works on <CODE>MyISAM</CODE> tables. On 
<CODE>MyISAM</CODE> tables it's the same thing as running <CODE>myisamchk -m 
table_name</CODE> on the table. </P>
<P>If you don't specify any option <CODE>MEDIUM</CODE> is used. </P>
<P>Checks the table(s) for errors. For <CODE>MyISAM</CODE> tables the key 
statistics is updated. The command returns a table with the following columns: 
</P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column</STRONG> </TD>
    <TD><STRONG>Value</STRONG> </TD>
  <TR>
    <TD>Table </TD>
    <TD>Table name. </TD>
  <TR>
    <TD>Op </TD>
    <TD>Always ``check''. </TD>
  <TR>
    <TD>Msg_type </TD>
    <TD>One of <CODE>status</CODE>, <CODE>error</CODE>, <CODE>info</CODE>, or 
      <CODE>warning</CODE>. </TD>
  <TR>
    <TD>Msg_text </TD>
    <TD>The message. </TD></TR></TBODY></TABLE>
<P>Note that you can get many rows of information for each checked table. The 
last row will be of <CODE>Msg_type status</CODE> and should normally be 
<CODE>OK</CODE>. If you don't get <CODE>OK</CODE>, or <CODE>Not checked</CODE> 
you should normally run a repair of the table. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Maintenance.html#Table_maintenance">16.1 
Using <CODE>myisamchk</CODE> for Table Maintenance and Crash Recovery</A>. 
<CODE>Not checked</CODE> means that the table the given <CODE>TYPE</CODE> told 
<STRONG>MySQL</STRONG> that there wasn't any need to check the table. </P>
<P>The different check types stand for the following: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Type</STRONG> </TD>
    <TD><STRONG>Meaning</STRONG> </TD>
  <TR>
    <TD><CODE>QUICK</CODE> </TD>
    <TD>Don't scan the rows to check for wrong links. </TD>
  <TR>
    <TD><CODE>FAST</CODE> </TD>
    <TD>Only check tables which haven't been closed properly. </TD>
  <TR>
    <TD><CODE>CHANGED</CODE> </TD>
    <TD>Only check tables which have been changed since last check or haven't 
      been closed properly. </TD>
  <TR>
    <TD><CODE>MEDIUM</CODE> </TD>
    <TD>Scan rows to verify that deleted links are ok. This also calculates a 
      key checksum for the rows and verifies this with a calcualted checksum for 
      the keys. </TD>
  <TR>
    <TD><CODE>EXTENDED</CODE> </TD>
    <TD>Do a full key lookup for all keys for each row. This ensures that the 
      table is 100 % consistent, but will take a long time! </TD></TR></TBODY></TABLE>
<P>For dynamic sized <CODE>MyISAM</CODE> tables a started check will always do a 
<CODE>MEDIUM</CODE> check. For static size rows we skip the row scan for 
<CODE>QUICK</CODE> and <CODE>FAST</CODE> as the rows are very seldom corrupted. 
</P>
<P>You can combine check options as in: </P><PRE>CHECK TABLE test_table FAST QUICK;
</PRE>
<P>Which only would do a quick check on the table if it wasn't closed properly. 
</P>
<P><STRONG>NOTE:</STRONG> that in some case <CODE>CHECK TABLE</CODE> will change 
the table! This happens if the table is marked as 'corrupted' or 'not closed 
properly' but <CODE>CHECK TABLE</CODE> didn't find any problems in the table. In 
this case <CODE>CHECK TABLE</CODE> will mark the table as ok. </P>
<P>If a table is corrupted, then it's most likely that the problem is in the 
indexes and not in the data part. All of the above check types checks the 
indexes throughly and should thus find most errors. </P>
<P>If you just want to check a table that you assume is ok, you should use no 
check options or the <CODE>QUICK</CODE> option. The later should be used when 
you are in a hurry and can take the very small risk that <CODE>QUICK</CODE> 
didn't find an error in the data file (In most cases <STRONG>MySQL</STRONG> 
should find, under normal usage, any error in the data file. If this happens 
then the table will be marked as 'corrupted', in which case the table can't be 
used until it's repaired). </P>
<P><CODE>FAST</CODE> and <CODE>CHANGED</CODE> are mostly intended to be used 
from a script (for example to be executed from cron) if you want to check your 
table from time to time. In most cases you <CODE>FAST</CODE> is to be prefered 
over <CODE>CHANGED</CODE>. (The only case when it isn't is when you suspect a 
bug you have found a bug in the <CODE>MyISAM</CODE> code.). </P>
<P><CODE>EXTENDED</CODE> is only to be used after you have run a normal check 
but still get strange errors from a table when <STRONG>MySQL</STRONG> tries to 
update a row or find a row by key (this is VERY unlikely to happen if a normal 
check has succeeded!). </P>
<P><A name=IDX886></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#BACKUP_TABLE" 
name=BACKUP_TABLE>7.13 <CODE>BACKUP TABLE</CODE> Syntax</A></H2><PRE>BACKUP TABLE tbl_name[,tbl_name...] TO '/path/to/backup/directory'
</PRE>
<P>Make a copy of all the table files to the backup directory that are the 
minimum needed to restore it. Currenlty only works for <CODE>MyISAM</CODE> 
tables. For <CODE>MyISAM</CODE> table, copies <CODE>.frm</CODE> (definition) and 
<CODE>.MYD</CODE> (data) files. The index file can be rebuilt from those two. 
</P>
<P>During the backup, read lock will be held for each table, one at time, as 
they are being backed up. If you want to backup several tables as a snapshot, 
you must first issue <CODE>LOCK TABLES</CODE> obtaining a read lock for each 
table in the group. </P>
<P>The command returns a table with the following columns: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column</STRONG> </TD>
    <TD><STRONG>Value</STRONG> </TD>
  <TR>
    <TD>Table </TD>
    <TD>Table name </TD>
  <TR>
    <TD>Op </TD>
    <TD>Always ``backup'' </TD>
  <TR>
    <TD>Msg_type </TD>
    <TD>One of <CODE>status</CODE>, <CODE>error</CODE>, <CODE>info</CODE> or 
      <CODE>warning</CODE>. </TD>
  <TR>
    <TD>Msg_text </TD>
    <TD>The message. </TD></TR></TBODY></TABLE>
<P>Note that <CODE>BACKUP TABLE</CODE> is only available in 
<STRONG>MySQL</STRONG> version 3.23.25 and later. </P>
<P><A name=IDX887></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#RESTORE_TABLE" 
name=RESTORE_TABLE>7.14 <CODE>RESTORE TABLE</CODE> Syntax</A></H2><PRE>RESTORE TABLE tbl_name[,tbl_name...] FROM '/path/to/backup/directory'
</PRE>
<P>Restores the table(s) from the backup that was made with <CODE>BACKUP 
TABLE</CODE>. Existing tables will not be overwritten - if you try to restore 
over an existing table, you will get an error. Restore will take longer than 
BACKUP due to the need to rebuilt the index. The more keys you have, the longer 
it is going to take. Just as <CODE>BACKUP TABLE</CODE>, currently only works of 
<CODE>MyISAM</CODE> tables. </P>
<P>The command returns a table with the following columns: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column</STRONG> </TD>
    <TD><STRONG>Value</STRONG> </TD>
  <TR>
    <TD>Table </TD>
    <TD>Table name </TD>
  <TR>
    <TD>Op </TD>
    <TD>Always ``restore'' </TD>
  <TR>
    <TD>Msg_type </TD>
    <TD>One of <CODE>status</CODE>, <CODE>error</CODE>, <CODE>info</CODE> or 
      <CODE>warning</CODE>. </TD>
  <TR>
    <TD>Msg_text </TD>
    <TD>The message. </TD></TR></TBODY></TABLE>
<P><A name=IDX888></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#ANALYZE_TABLE" 
name=ANALYZE_TABLE>7.15 <CODE>ANALYZE TABLE</CODE> Syntax</A></H2><PRE>ANALYZE TABLE tbl_name[,tbl_name...]
</PRE>
<P>Analyze and store the key distribution for the table. During the analyze the 
table is locked with a read lock. This works on <CODE>MyISAM</CODE> and 
<CODE>BDB</CODE> tables. </P>
<P>This is equivalent to running <CODE>myisamchk -a</CODE> on the table. </P>
<P><STRONG>MySQL</STRONG> uses the stored key distribution to decide in which 
order tables should be joined when one does a join on something else than a 
constant. </P>
<P>The command returns a table with the following columns: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column</STRONG> </TD>
    <TD><STRONG>Value</STRONG> </TD>
  <TR>
    <TD>Table </TD>
    <TD>Table name </TD>
  <TR>
    <TD>Op </TD>
    <TD>Always ``analyze'' </TD>
  <TR>
    <TD>Msg_type </TD>
    <TD>One of <CODE>status</CODE>, <CODE>error</CODE>, <CODE>info</CODE> or 
      <CODE>warning</CODE>. </TD>
  <TR>
    <TD>Msg_text </TD>
    <TD>The message. </TD></TR></TBODY></TABLE>
<P>You can check the stored key distribution with the <CODE>SHOW INDEX</CODE> 
command. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#SHOW_DATABASE_INFO">7.28.1 
<CODE>SHOW</CODE> Information About Databases, Tables, Columns, and Indexes</A>. 
</P>
<P>If the table hasn't changed since the last <CODE>ANALYZE TABLE</CODE> 
command, the table will not be analyzed again. </P>
<P><A name=IDX889></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#REPAIR_TABLE" 
name=REPAIR_TABLE>7.16 <CODE>REPAIR TABLE</CODE> Syntax</A></H2><PRE>REPAIR TABLE tbl_name[,tbl_name...] [QUICK] [EXTENDED]
</PRE>
<P><CODE>REPAIR TABLE</CODE> only works on <CODE>MyISAM</CODE> tables and is the 
same as running <CODE>myisamchk -r table_name</CODE> on the table. </P>
<P>Normally you should never have to run this command, but if disaster strikes 
you are very likely to get back all your data from a MyISAM table with 
<CODE>REPAIR TABLE</CODE>. If your tables get corrupted a lot you should try to 
find the reason for this! See section <A 
href="file:///D:/work/mysql/manual-split/manual_Problems.html#Crashing">21.2 
What to Do if MySQL Keeps Crashing</A>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Table_types.html#MyISAM_table_problems">8.1.3 
MyISAM table problems.</A>. </P>
<P><CODE>REPAIR TABLE</CODE> repairs a possible corrupted table. The command 
returns a table with the following columns: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column</STRONG> </TD>
    <TD><STRONG>Value</STRONG> </TD>
  <TR>
    <TD>Table </TD>
    <TD>Table name </TD>
  <TR>
    <TD>Op </TD>
    <TD>Always ``repair'' </TD>
  <TR>
    <TD>Msg_type </TD>
    <TD>One of <CODE>status</CODE>, <CODE>error</CODE>, <CODE>info</CODE> or 
      <CODE>warning</CODE>. </TD>
  <TR>
    <TD>Msg_text </TD>
    <TD>The message. </TD></TR></TBODY></TABLE>
<P>Note that you can get many rows of information for each repaired table. The 
last one row will be of <CODE>Msg_type status</CODE> and should normally be 
<CODE>OK</CODE>. If you don't get <CODE>OK</CODE>, you should try repairing the 
table with <CODE>myisamchk -o</CODE>, as <CODE>REPAIR TABLE</CODE> does not yet 
implement all the options of <CODE>myisamchk</CODE>. In the near future, we will 
make it more flexible. </P>
<P>If <CODE>QUICK</CODE> is given then <STRONG>MySQL</STRONG> will try to do a 
<CODE>REPAIR</CODE> of only the index tree. </P>
<P>If you use <CODE>EXTENDED</CODE> then <STRONG>MySQL</STRONG> will create the 
index row by row instead of creating one index at a time with sorting; This may 
be better than sorting on fixed-length keys if you have long <CODE>char()</CODE> 
keys that compress very good. </P>
<P><A name=IDX890></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#DELETE" 
name=DELETE>7.17 <CODE>DELETE</CODE> Syntax</A></H2><PRE>DELETE [LOW_PRIORITY] FROM tbl_name
    [WHERE where_definition]
    [LIMIT rows]
</PRE>
<P><CODE>DELETE</CODE> deletes rows from <CODE>tbl_name</CODE> that satisfy the 
condition given by <CODE>where_definition</CODE>, and returns the number of 
records deleted. </P>
<P>If you issue a <CODE>DELETE</CODE> with no <CODE>WHERE</CODE> clause, all 
rows are deleted. If you do this in <CODE>AUTOCOMMIT</CODE> mode, this works as 
<CODE>TRUNCATE</CODE>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#TRUNCATE">7.18 
<CODE>TRUNCATE</CODE> Syntax</A>. One problem with this is that 
<CODE>DELETE</CODE> will return zero as the number of affected records, but this 
will be fixed in 4.0. </P>
<P>If you really want to know how many records are deleted when you are deleting 
all rows, and are willing to suffer a speed penalty, you can use a 
<CODE>DELETE</CODE> statement of this form: </P><PRE>mysql&gt; DELETE FROM tbl_name WHERE 1&gt;0;
</PRE>
<P>Note that this is MUCH slower than <CODE>DELETE FROM tbl_name</CODE> with no 
<CODE>WHERE</CODE> clause, because it deletes rows one at a time. </P>
<P>If you specify the keyword <CODE>LOW_PRIORITY</CODE>, execution of the 
<CODE>DELETE</CODE> is delayed until no other clients are reading from the 
table. </P>
<P>Deleted records are maintained in a linked list and subsequent 
<CODE>INSERT</CODE> operations reuse old record positions. To reclaim unused 
space and reduce file sizes, use the <CODE>OPTIMIZE TABLE</CODE> statement or 
the <CODE>myisamchk</CODE> utility to reorganize tables. <CODE>OPTIMIZE 
TABLE</CODE> is easier, but <CODE>myisamchk</CODE> is faster. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#OPTIMIZE_TABLE">7.11 
<CODE>OPTIMIZE TABLE</CODE> Syntax</A> and section <A 
href="file:///D:/work/mysql/manual-split/manual_Maintenance.html#Optimization">16.5.3 
Table Optimization</A>. </P>
<P>The <STRONG>MySQL</STRONG>-specific <CODE>LIMIT rows</CODE> option to 
<CODE>DELETE</CODE> tells the server the maximum number of rows to be deleted 
before control is returned to the client. This can be used to ensure that a 
specific <CODE>DELETE</CODE> command doesn't take too much time. You can simply 
repeat the <CODE>DELETE</CODE> command until the number of affected rows is less 
than the <CODE>LIMIT</CODE> value. </P>
<P><A name=IDX891></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#TRUNCATE" 
name=TRUNCATE>7.18 <CODE>TRUNCATE</CODE> Syntax</A></H2><PRE>TRUNCATE TABLE table_name
</PRE>
<P>Is in 3.23 and the same thing as <CODE>DELETE FROM table_name</CODE>. See 
section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#DELETE">7.17 
<CODE>DELETE</CODE> Syntax</A>. The differences are: </P>
<UL>
  <LI>Implemented as a drop and re-create of the table, which makes this much 
  faster when deleting many rows. 
  <LI>Not transaction-safe; <CODE>TRUNCATE TABLE</CODE> will automatically end 
  the current transaction as if <CODE>COMMIT</CODE> would have been called. 
  <LI>Doesn't return the number of deleted rows. 
  <LI>As long as the table definition file <TT>`table_name.frm'</TT> is valid, 
  the table can be re-created this way, even if the data or index files have 
  become corrupted. </LI></UL>
<P><A name=IDX892></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#SELECT" 
name=SELECT>7.19 <CODE>SELECT</CODE> Syntax</A></H2><PRE>SELECT [STRAIGHT_JOIN] [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]
       [HIGH_PRIORITY]
       [DISTINCT | DISTINCTROW | ALL]
    select_expression,...
    [INTO {OUTFILE | DUMPFILE} 'file_name' export_options]
    [FROM table_references
        [WHERE where_definition]
        [GROUP BY {unsigned_integer | col_name | formula} [ASC | DESC], ...]
        [HAVING where_definition]
        [ORDER BY {unsigned_integer | col_name | formula} [ASC | DESC] ,...]
        [LIMIT [offset,] rows]
        [PROCEDURE procedure_name]
        [FOR UPDATE | LOCK IN SHARE MODE]]
</PRE>
<P><CODE>SELECT</CODE> is used to retrieve rows selected from one or more 
tables. <CODE>select_expression</CODE> indicates the columns you want to 
retrieve. <CODE>SELECT</CODE> may also be used to retrieve rows computed without 
reference to any table. For example: </P><PRE>mysql&gt; SELECT 1 + 1;
         -&gt; 2
</PRE>
<P>All keywords used must be given in exactly the order shown above. For 
example, a <CODE>HAVING</CODE> clause must come after any <CODE>GROUP BY</CODE> 
clause and before any <CODE>ORDER BY</CODE> clause. </P>
<UL>
  <LI><A name=IDX893></A><A name=IDX894></A>A <CODE>SELECT</CODE> expression may 
  be given an alias using <CODE>AS</CODE>. The alias is used as the expression's 
  column name and can be used with <CODE>ORDER BY</CODE> or <CODE>HAVING</CODE> 
  clauses. For example: <PRE>mysql&gt; select concat(last_name,', ',first_name) AS full_name
    from mytable ORDER BY full_name;
</PRE>
  <LI>The <CODE>FROM table_references</CODE> clause indicates the tables from 
  which to retrieve rows. If you name more than one table, you are performing a 
  join. For information on join syntax, see section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#JOIN">7.20 
  <CODE>JOIN</CODE> Syntax</A>. 
  <LI>You can refer to a column as <CODE>col_name</CODE>, 
  <CODE>tbl_name.col_name</CODE>, or <CODE>db_name.tbl_name.col_name</CODE>. You 
  need not specify a <CODE>tbl_name</CODE> or <CODE>db_name.tbl_name</CODE> 
  prefix for a column reference in a <CODE>SELECT</CODE> statement unless the 
  reference would be ambiguous. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Legal_names">7.1.5 
  Database, Table, Index, Column, and Alias Names</A>, for examples of ambiguity 
  that require the more explicit column reference forms. 
  <LI><A name=IDX895></A><A name=IDX896></A>A table reference may be aliased 
  using <CODE>tbl_name [AS] alias_name</CODE>: <PRE>mysql&gt; select t1.name, t2.salary from employee AS t1, info AS t2
           where t1.name = t2.name;
mysql&gt; select t1.name, t2.salary from employee t1, info t2
           where t1.name = t2.name;
</PRE>
  <LI>Columns selected for output may be referred to in <CODE>ORDER BY</CODE> 
  and <CODE>GROUP BY</CODE> clauses using column names, column aliases, or 
  column positions. Column positions begin with 1: <PRE>mysql&gt; select college, region, seed from tournament
           ORDER BY region, seed;
mysql&gt; select college, region AS r, seed AS s from tournament
           ORDER BY r, s;
mysql&gt; select college, region, seed from tournament
           ORDER BY 2, 3;
</PRE>To sort in reverse order, add the <CODE>DESC</CODE> (descending) keyword 
  to the name of the column in the <CODE>ORDER BY</CODE> clause that you are 
  sorting by. The default is ascending order; this may be specified explicitly 
  using the <CODE>ASC</CODE> keyword. 
  <LI>You can in the <CODE>WHERE</CODE> clause use any of the functions that 
  <STRONG>MySQL</STRONG> support. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Functions">7.4 
  Functions for Use in <CODE>SELECT</CODE> and <CODE>WHERE</CODE> Clauses</A>. 
  <LI>The <CODE>HAVING</CODE> clause can refer to any column or alias named in 
  the <CODE>select_expression</CODE>. It is applied last, just before items are 
  sent to the client, with no optimization. Don't use <CODE>HAVING</CODE> for 
  items that should be in the <CODE>WHERE</CODE> clause. For example, do not 
  write this: <PRE>mysql&gt; select col_name from tbl_name HAVING col_name &gt; 0;
</PRE>Write this instead: <PRE>mysql&gt; select col_name from tbl_name WHERE col_name &gt; 0;
</PRE>In <STRONG>MySQL</STRONG> Version 3.22.5 or later, you can also write 
  queries like this: <PRE>mysql&gt; select user,max(salary) from users
           group by user HAVING max(salary)&gt;10;
</PRE>In older <STRONG>MySQL</STRONG> versions, you can write this instead: <PRE>mysql&gt; select user,max(salary) AS sum from users
           group by user HAVING sum&gt;10;
</PRE>
  <LI><CODE>SQL_SMALL_RESULT</CODE>, <CODE>SQL_BIG_RESULT</CODE>, 
  <CODE>SQL_BUFFER_RESULT</CODE>, <CODE>STRAIGHT_JOIN</CODE>, and 
  <CODE>HIGH_PRIORITY</CODE> are <STRONG>MySQL</STRONG> extensions to ANSI 
  SQL92. 
  <LI><CODE>HIGH_PRIORITY</CODE> will give the <CODE>SELECT</CODE> higher 
  priority than a statement that updates a table. You should only use this for 
  queries that are very fast and must be done at once. A <CODE>SELECT 
  HIGH_PRIORITY</CODE> query will run if the table is locked for read even if 
  there is an update statement that is waiting for the table to be free. 
  <LI><CODE>SQL_BIG_RESULT</CODE> can be used with <CODE>GROUP BY</CODE> or 
  <CODE>DISTINCT</CODE> to tell the optimizer that the result set will have many 
  rows. In this case, <STRONG>MySQL</STRONG> will directly use disk-based 
  temporary tables if needed. <STRONG>MySQL</STRONG> will also, in this case, 
  prefer sorting to doing a temporary table with a key on the <CODE>GROUP 
  BY</CODE> elements. 
  <LI><A name=IDX897></A>If you use <CODE>GROUP BY</CODE>, the output rows will 
  be sorted according to the <CODE>GROUP BY</CODE> as if you would have had an 
  <CODE>ORDER BY</CODE> over all the fields in the <CODE>GROUP BY</CODE>. 
  <STRONG>MySQL</STRONG> has extended the <CODE>GROUP BY</CODE> so that you can 
  also specify <CODE>ASC</CODE> and <CODE>DESC</CODE> to <CODE>GROUP BY</CODE>: <PRE>SELECT a,COUNT(b) FROM test_table GROUP BY a DESC
</PRE>
  <LI><STRONG>MySQL</STRONG> has extended the use of <CODE>GROUP BY</CODE> to 
  allow you to select fields which are not mentioned in the <CODE>GROUP 
  BY</CODE> clause. If you are not getting the results you expect from your 
  query, please read the <CODE>GROUP BY</CODE> description. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Group_by_functions">7.4.13 
  Functions for Use with <CODE>GROUP BY</CODE> Clauses</A>. 
  <LI><CODE>SQL_BUFFER_RESULT</CODE> will force the result to be put into a 
  temporary table. This will help <STRONG>MySQL</STRONG> free the table locks 
  early and will help in cases where it takes a long time to send the result set 
  to the client. 
  <LI><CODE>SQL_SMALL_RESULT</CODE>, a <STRONG>MySQL</STRONG>-specific option, 
  can be used with <CODE>GROUP BY</CODE> or <CODE>DISTINCT</CODE> to tell the 
  optimizer that the result set will be small. In this case, 
  <STRONG>MySQL</STRONG> will use fast temporary tables to store the resulting 
  table instead of using sorting. In <STRONG>MySQL</STRONG> Version 3.23 this 
  shouldn't normally be needed. 
  <LI><CODE>STRAIGHT_JOIN</CODE> forces the optimizer to join the tables in the 
  order in which they are listed in the <CODE>FROM</CODE> clause. You can use 
  this to speed up a query if the optimizer joins the tables in non-optimal 
  order. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#EXPLAIN">7.29 
  <CODE>EXPLAIN</CODE> Syntax (Get Information About a <CODE>SELECT</CODE>)</A>. 

  <LI>The <CODE>LIMIT</CODE> clause can be used to constrain the number of rows 
  returned by the <CODE>SELECT</CODE> statement. <CODE>LIMIT</CODE> takes one or 
  two numeric arguments. If two arguments are given, the first specifies the 
  offset of the first row to return, the second specifies the maximum number of 
  rows to return. The offset of the initial row is 0 (not 1): <PRE>mysql&gt; select * from table LIMIT 5,10;  # Retrieve rows 6-15
</PRE>If one argument is given, it indicates the maximum number of rows to 
  return: <PRE>mysql&gt; select * from table LIMIT 5;     # Retrieve first 5 rows
</PRE>In other words, <CODE>LIMIT n</CODE> is equivalent to <CODE>LIMIT 
  0,n</CODE>. 
  <LI><A name=IDX898></A>The <CODE>SELECT ... INTO OUTFILE 'file_name'</CODE> 
  form of <CODE>SELECT</CODE> writes the selected rows to a file. The file is 
  created on the server host and cannot already exist (among other things, this 
  prevents database tables and files such as <TT>`/etc/passwd'</TT> from being 
  destroyed). You must have the <STRONG>file</STRONG> privilege on the server 
  host to use this form of <CODE>SELECT</CODE>. <CODE>SELECT ... INTO 
  OUTFILE</CODE> is mainly intended to let you very quickly dump a table on the 
  server machine. If you want to create the resulting file on some other host 
  than the server host you can't use <CODE>SELECT ... INTO OUTFILE</CODE>. In 
  this case you should instead use some client program like <CODE>mysqldump 
  --tab</CODE> or <CODE>mysql -e "SELECT ..." &gt; outfile</CODE> to generate 
  the file. <CODE>SELECT ... INTO OUTFILE</CODE> is the complement of <CODE>LOAD 
  DATA INFILE</CODE>; the syntax for the <CODE>export_options</CODE> part of the 
  statement consists of the same <CODE>FIELDS</CODE> and <CODE>LINES</CODE> 
  clauses that are used with the <CODE>LOAD DATA INFILE</CODE> statement. See 
  section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#LOAD_DATA">7.23 
  <CODE>LOAD DATA INFILE</CODE> Syntax</A>. In the resulting text file, only the 
  following characters are escaped by the <CODE>ESCAPED BY</CODE> character: 
  <UL>
    <LI>The <CODE>ESCAPED BY</CODE> character 
    <LI>The first character in <CODE>FIELDS TERMINATED BY</CODE> 
    <LI>The first character in <CODE>LINES TERMINATED BY</CODE> 
  </LI></UL>Additionally, <CODE>ASCII 0</CODE> is converted to <CODE>ESCAPED 
  BY</CODE> followed by 0 (<CODE>ASCII 48</CODE>). The reason for the above is 
  that you MUST escape any <CODE>FIELDS TERMINATED BY</CODE>, <CODE>ESCAPED 
  BY</CODE>, or <CODE>LINES TERMINATED BY</CODE> characters to reliably be able 
  to read the file back. <CODE>ASCII 0</CODE> is escaped to make it easier to 
  view with some pagers. As the resulting file doesn't have to conform to the 
  SQL syntax, nothing else need be escaped. Here follows an example of getting a 
  file in the format used by many old programs. <PRE>SELECT a,b,a+b INTO OUTFILE "/tmp/result.text"
FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY "\n"
FROM test_table;
</PRE>
  <LI><A name=IDX899></A>If you use <CODE>INTO DUMPFILE</CODE> instead of 
  <CODE>INTO OUTFILE</CODE>, <STRONG>MySQL</STRONG> will only write one row into 
  the file, without any column or line terminations and without any escaping. 
  This is useful if you want to store a blob in a file. 
  <LI>Note that any file created by <CODE>INTO OUTFILE</CODE> and <CODE>INTO 
  DUMPFILE</CODE> is going to be readable for all users! The reason is that the 
  <STRONG>MySQL</STRONG> server can't create a file that is owned by anyone else 
  than the user it's running as (you should never run <CODE>mysqld</CODE> as 
  root), the file has to be word readable so that you can retrieve the rows. 
  <LI>If you are using <CODE>FOR UPDATE</CODE> on a table handler with page/row 
  locks, the examined rows will be write locked. </LI></UL>
<P><A name=IDX900></A><A name=IDX901></A><A name=IDX902></A><A 
name=IDX903></A><A name=IDX904></A><A name=IDX905></A><A name=IDX906></A><A 
name=IDX907></A><A name=IDX908></A><A name=IDX909></A><A name=IDX910></A><A 
name=IDX911></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#JOIN" 
name=JOIN>7.20 <CODE>JOIN</CODE> Syntax</A></H2>
<P><STRONG>MySQL</STRONG> supports the following <CODE>JOIN</CODE> syntaxes for 
use in <CODE>SELECT</CODE> statements: </P><PRE>table_reference, table_reference
table_reference [CROSS] JOIN table_reference
table_reference INNER JOIN table_reference join_condition
table_reference STRAIGHT_JOIN table_reference
table_reference LEFT [OUTER] JOIN table_reference join_condition
table_reference LEFT [OUTER] JOIN table_reference
table_reference NATURAL [LEFT [OUTER]] JOIN table_reference
{ oj table_reference LEFT OUTER JOIN table_reference ON conditional_expr }
table_reference RIGHT [OUTER] JOIN table_reference join_condition
table_reference RIGHT [OUTER] JOIN table_reference
table_reference NATURAL [RIGHT [OUTER]] JOIN table_reference
</PRE>
<P>Where <CODE>table_reference</CODE> is defined as: <PRE>table_name [[AS] alias] [USE INDEX (key_list)] [IGNORE INDEX (key_list)]
</PRE>
<P>and <CODE>join_condition</CODE> is defined as: </P><PRE>ON conditional_expr |
USING (column_list)
</PRE>
<P>Note that in versions before Version 3.23.16, the <CODE>INNER JOIN</CODE> 
didn't take a join condition! </P>
<P><A name=IDX912></A><A name=IDX913></A>The last <CODE>LEFT OUTER JOIN</CODE> 
syntax shown above exists only for compatibility with ODBC: </P>
<UL>
  <LI>A table reference may be aliased using <CODE>tbl_name AS alias_name</CODE> 
  or <CODE>tbl_name alias_name</CODE>: <PRE>mysql&gt; select t1.name, t2.salary from employee AS t1, info AS t2
           where t1.name = t2.name;
</PRE>
  <LI><CODE>INNER JOIN</CODE> and <CODE>,</CODE> (comma) are semantically 
  equivalent. Both do a full join between the tables used. Normally, you specify 
  how the tables should be linked in the <CODE>WHERE</CODE> condition. 
  <LI>The <CODE>ON</CODE> conditional is any conditional of the form that may be 
  used in a <CODE>WHERE</CODE> clause. 
  <LI>If there is no matching record for the right table in the <CODE>ON</CODE> 
  or <CODE>USING</CODE> part in a <CODE>LEFT JOIN</CODE>, a row with all columns 
  set to <CODE>NULL</CODE> is used for the right table. You can use this fact to 
  find records in a table that have no counterpart in another table: <PRE>mysql&gt; select table1.* from table1
           LEFT JOIN table2 ON table1.id=table2.id
           where table2.id is NULL;
</PRE>This example finds all rows in <CODE>table1</CODE> with an 
  <CODE>id</CODE> value that is not present in <CODE>table2</CODE> (that is, all 
  rows in <CODE>table1</CODE> with no corresponding row in <CODE>table2</CODE>). 
  This assumes that <CODE>table2.id</CODE> is declared <CODE>NOT NULL</CODE>, of 
  course. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Performance.html#LEFT_JOIN_optimization">13.5.5 
  How MySQL Optimizes <CODE>LEFT JOIN</CODE> and <CODE>RIGHT JOIN</CODE></A>. 
  <LI>The <CODE>USING</CODE> <CODE>(column_list)</CODE> clause names a list of 
  columns that must exist in both tables. A <CODE>USING</CODE> clause such as: <PRE>A LEFT JOIN B USING (C1,C2,C3,...)
</PRE>is defined to be semantically identical to an <CODE>ON</CODE> expression 
  like this: <PRE>A.C1=B.C1 AND A.C2=B.C2 AND A.C3=B.C3,...
</PRE>
  <LI>The <CODE>NATURAL [LEFT] JOIN</CODE> of two tables is defined to be 
  semantically equivalent to an <CODE>INNER JOIN</CODE> or a <CODE>LEFT 
  JOIN</CODE> with a <CODE>USING</CODE> clause that names all columns that exist 
  in both tables. 
  <LI><CODE>RIGHT JOIN</CODE> works analogously as <CODE>LEFT JOIN</CODE>. To 
  keep code portable across databases, it's recommended to use <CODE>LEFT 
  JOIN</CODE> instead of <CODE>RIGHT JOIN</CODE>. 
  <LI><CODE>STRAIGHT_JOIN</CODE> is identical to <CODE>JOIN</CODE>, except that 
  the left table is always read before the right table. This can be used for 
  those (few) cases where the join optimizer puts the tables in the wrong order. 

  <LI>As of <STRONG>MySQL</STRONG> Version 3.23.12, you can give hints about 
  which index <STRONG>MySQL</STRONG> should use when retrieving information from 
  a table. This is useful if <CODE>EXPLAIN</CODE> shows that 
  <STRONG>MySQL</STRONG> is using the wrong index. By specifying <CODE>USE INDEX 
  (key_list)</CODE>, you can tell <STRONG>MySQL</STRONG> to use only one of the 
  specified indexes to find rows in the table. The alternative syntax 
  <CODE>IGNORE INDEX (key_list)</CODE> can be used to tell 
  <STRONG>MySQL</STRONG> to not use some particular index. </LI></UL>
<P>Some examples: </P><PRE>mysql&gt; select * from table1,table2 where table1.id=table2.id;
mysql&gt; select * from table1 LEFT JOIN table2 ON table1.id=table2.id;
mysql&gt; select * from table1 LEFT JOIN table2 USING (id);
mysql&gt; select * from table1 LEFT JOIN table2 ON table1.id=table2.id
           LEFT JOIN table3 ON table2.id=table3.id;
mysql&gt; select * from table1 USE INDEX (key1,key2) WHERE key1=1 and key2=2 AND
       key3=3;
mysql&gt; select * from table1 IGNORE INDEX (key3) WHERE key1=1 and key2=2 AND
       key3=3;
</PRE>
<P>See section <A 
href="file:///D:/work/mysql/manual-split/manual_Performance.html#LEFT_JOIN_optimization">13.5.5 
How MySQL Optimizes <CODE>LEFT JOIN</CODE> and <CODE>RIGHT JOIN</CODE></A>. </P>
<P><A name=IDX914></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#INSERT" 
name=INSERT>7.21 <CODE>INSERT</CODE> Syntax</A></H2><PRE>    INSERT [LOW_PRIORITY | DELAYED] [IGNORE]
        [INTO] tbl_name [(col_name,...)]
        VALUES (expression,...),(...),...
or  INSERT [LOW_PRIORITY | DELAYED] [IGNORE]
        [INTO] tbl_name [(col_name,...)]
        SELECT ...
or  INSERT [LOW_PRIORITY | DELAYED] [IGNORE]
        [INTO] tbl_name
        SET col_name=expression, col_name=expression, ...
or  INSERT [LOW_PRIORITY] [IGNORE] [INTO] tbl_name
        SELECT ...

</PRE>
<P><CODE>INSERT</CODE> inserts new rows into an existing table. The <CODE>INSERT 
... VALUES</CODE> form of the statement inserts rows based on explicitly 
specified values. The <CODE>INSERT ... SELECT</CODE> form inserts rows selected 
from another table or tables. The <CODE>INSERT ... VALUES</CODE> form with 
multiple value lists is supported in <STRONG>MySQL</STRONG> Version 3.22.5 or 
later. The <CODE>col_name=expression</CODE> syntax is supported in 
<STRONG>MySQL</STRONG> Version 3.22.10 or later. </P>
<P><CODE>tbl_name</CODE> is the table into which rows should be inserted. The 
column name list or the <CODE>SET</CODE> clause indicates which columns the 
statement specifies values for: </P>
<UL>
  <LI>If you specify no column list for <CODE>INSERT ... VALUES</CODE> or 
  <CODE>INSERT ... SELECT</CODE>, values for all columns must be provided in the 
  <CODE>VALUES()</CODE> list or by the <CODE>SELECT</CODE>. If you don't know 
  the order of the columns in the table, use <CODE>DESCRIBE tbl_name</CODE> to 
  find out. 
  <LI>Any column not explicitly given a value is set to its default value. For 
  example, if you specify a column list that doesn't name all the columns in the 
  table, unnamed columns are set to their default values. Default value 
  assignment is described in section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#CREATE_TABLE">7.7 
  <CODE>CREATE TABLE</CODE> Syntax</A>. 
  <LI>An <CODE>expression</CODE> may refer to any column that was set earlier in 
  a value list. For example, you can say this: <PRE>mysql&gt; INSERT INTO tbl_name (col1,col2) VALUES(15,col1*2);
</PRE>But not this: <PRE>mysql&gt; INSERT INTO tbl_name (col1,col2) VALUES(col2*2,15);
</PRE>
  <LI>If you specify the keyword <CODE>LOW_PRIORITY</CODE>, execution of the 
  <CODE>INSERT</CODE> is delayed until no other clients are reading from the 
  table. In this case the client has to wait until the insert statement is 
  completed, which may take a long time if the table is in heavy use. This is in 
  contrast to <CODE>INSERT DELAYED</CODE>, which lets the client continue at 
  once. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#INSERT_DELAYED">7.21.2 
  <CODE>INSERT DELAYED</CODE> syntax</A>. Note that <CODE>LOW_PRIORITY</CODE> 
  should normally not be used with <CODE>MyISAM</CODE> tables as this disables 
  concurrent inserts. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Table_types.html#MyISAM">8.1 
  MyISAM Tables</A>. 
  <LI>If you specify the keyword <CODE>IGNORE</CODE> in an <CODE>INSERT</CODE> 
  with many value rows, any rows that duplicate an existing <CODE>PRIMARY</CODE> 
  or <CODE>UNIQUE</CODE> key in the table are ignored and are not inserted. If 
  you do not specify <CODE>IGNORE</CODE>, the insert is aborted if there is any 
  row that duplicates an existing key value. You can determine with the C API 
  function <CODE>mysql_info()</CODE> how many rows were inserted into the table. 

  <LI>If <STRONG>MySQL</STRONG> was configured using the 
  <CODE>DONT_USE_DEFAULT_FIELDS</CODE> option, <CODE>INSERT</CODE> statements 
  generate an error unless you explicitly specify values for all columns that 
  require a non-<CODE>NULL</CODE> value. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Installing.html#configure_options">4.7.3 
  Typical <CODE>configure</CODE> Options</A>. 
  <LI>You can find the value used for an <CODE>AUTO_INCREMENT</CODE> column with 
  the <CODE>mysql_insert_id</CODE> function. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Clients.html#mysql_insert_id">24.1.3.126 
  <CODE>mysql_insert_id()</CODE></A>. </LI></UL>
<P><A name=IDX915></A>If you use <CODE>INSERT ... SELECT</CODE> or an 
<CODE>INSERT ... VALUES</CODE> statement with multiple value lists, you can use 
the C API function <CODE>mysql_info()</CODE> to get information about the query. 
The format of the information string is shown below: </P><PRE>Records: 100 Duplicates: 0 Warnings: 0
</PRE>
<P><CODE>Duplicates</CODE> indicates the number of rows that couldn't be 
inserted because they would duplicate some existing unique index value. 
<CODE>Warnings</CODE> indicates the number of attempts to insert column values 
that were problematic in some way. Warnings can occur under any of the following 
conditions: </P>
<UL>
  <LI>Inserting <CODE>NULL</CODE> into a column that has been declared <CODE>NOT 
  NULL</CODE>. The column is set to its default value. 
  <LI>Setting a numeric column to a value that lies outside the column's range. 
  The value is clipped to the appropriate endpoint of the range. 
  <LI>Setting a numeric column to a value such as <CODE>'10.34 a'</CODE>. The 
  trailing garbage is stripped and the remaining numeric part is inserted. If 
  the value doesn't make sense as a number at all, the column is set to 
  <CODE>0</CODE>. 
  <LI>Inserting a string into a <CODE>CHAR</CODE>, <CODE>VARCHAR</CODE>, 
  <CODE>TEXT</CODE>, or <CODE>BLOB</CODE> column that exceeds the column's 
  maximum length. The value is truncated to the column's maximum length. 
  <LI>Inserting a value into a date or time column that is illegal for the 
  column type. The column is set to the appropriate zero value for the type. 
  </LI></UL>
<P><A name=IDX916></A><A name=IDX917></A></P>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#INSERT_SELECT" 
name=INSERT_SELECT>7.21.1 <CODE>INSERT ... SELECT</CODE> Syntax</A></H3><PRE>INSERT [LOW_PRIORITY] [IGNORE] [INTO] tbl_name [(column list)] SELECT ...
</PRE>
<P>With <CODE>INSERT ... SELECT</CODE> statement you can quickly insert many 
rows into a table from one or many tables. </P><PRE>INSERT INTO tblTemp2 (fldID) SELECT tblTemp1.fldOrder_ID FROM tblTemp1 WHERE
tblTemp1.fldOrder_ID &gt; 100;
</PRE>
<P>The following conditions hold for an <CODE>INSERT ... SELECT</CODE> 
statement: </P>
<UL>
  <LI>The query cannot contain an <CODE>ORDER BY</CODE> clause. 
  <LI>The target table of the <CODE>INSERT</CODE> statement cannot appear in the 
  <CODE>FROM</CODE> clause of the <CODE>SELECT</CODE> part of the query because 
  it's forbidden in ANSI SQL to <CODE>SELECT</CODE> from the same table into 
  which you are inserting. (The problem is that the <CODE>SELECT</CODE> possibly 
  would find records that were inserted earlier during the same run. When using 
  sub-select clauses, the situation could easily be very confusing!) 
  <LI><CODE>AUTO_INCREMENT</CODE> columns work as usual. 
  <LI>You can use the C API function <CODE>mysql_info()</CODE> to get 
  information about the query. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#INSERT">7.21 
  <CODE>INSERT</CODE> Syntax</A>. 
  <LI>To ensure that the update log/binary log can be used to re-create the 
  original tables, <STRONG>MySQL</STRONG> will not allow concurrent inserts 
  during <CODE>INSERT .... SELECT</CODE>. </LI></UL>
<P>You can of course also use <CODE>REPLACE</CODE> instead of 
<CODE>INSERT</CODE> to overwrite old rows. </P>
<P><A name=IDX918></A><A name=IDX919></A><A name=IDX920></A>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#INSERT_DELAYED" 
name=INSERT_DELAYED>7.21.2 <CODE>INSERT DELAYED</CODE> syntax</A></H3><PRE>INSERT DELAYED ...
</PRE>
<P>The <CODE>DELAYED</CODE> option for the <CODE>INSERT</CODE> statement is a 
<STRONG>MySQL</STRONG>-specific option that is very useful if you have clients 
that can't wait for the <CODE>INSERT</CODE> to complete. This is a common 
problem when you use <STRONG>MySQL</STRONG> for logging and you also 
periodically run <CODE>SELECT</CODE> and <CODE>UPDATE</CODE> statements that 
take a long time to complete. <CODE>DELAYED</CODE> was introduced in 
<STRONG>MySQL</STRONG> Version 3.22.15. It is a <STRONG>MySQL</STRONG> extension 
to ANSI SQL92. </P>
<P><CODE>INSERT DELAYED</CODE> only works with <CODE>ISAM</CODE> and 
<CODE>MyISAM</CODE> tables. Note that as <CODE>MyISAM</CODE> tables supports 
concurrent <CODE>SELECT</CODE> and <CODE>INSERT</CODE>, if there is no empty 
blocks in the data file, you very seldom need to use <CODE>INSERT DELAYED</CODE> 
with <CODE>MyISAM</CODE>. </P>
<P>When you use <CODE>INSERT DELAYED</CODE>, the client will get an OK at once 
and the row will be inserted when the table is not in use by any other thread. 
</P>
<P>Another major benefit of using <CODE>INSERT DELAYED</CODE> is that inserts 
from many clients are bundled together and written in one block. This is much 
faster than doing many separate inserts. </P>
<P>Note that currently the queued rows are only stored in memory until they are 
inserted into the table. This means that if you kill <CODE>mysqld</CODE> the 
hard way (<CODE>kill -9</CODE>) or if <CODE>mysqld</CODE> dies unexpectedly, any 
queued rows that weren't written to disk are lost! </P>
<P>The following describes in detail what happens when you use the 
<CODE>DELAYED</CODE> option to <CODE>INSERT</CODE> or <CODE>REPLACE</CODE>. In 
this description, the ``thread'' is the thread that received an <CODE>INSERT 
DELAYED</CODE> command and ``handler'' is the thread that handles all 
<CODE>INSERT DELAYED</CODE> statements for a particular table. </P>
<UL>
  <LI>When a thread executes a <CODE>DELAYED</CODE> statement for a table, a 
  handler thread is created to process all <CODE>DELAYED</CODE> statements for 
  the table, if no such handler already exists. 
  <LI>The thread checks whether or not the handler has acquired a 
  <CODE>DELAYED</CODE> lock already; if not, it tells the handler thread to do 
  so. The <CODE>DELAYED</CODE> lock can be obtained even if other threads have a 
  <CODE>READ</CODE> or <CODE>WRITE</CODE> lock on the table. However, the 
  handler will wait for all <CODE>ALTER TABLE</CODE> locks or <CODE>FLUSH 
  TABLES</CODE> to ensure that the table structure is up to date. 
  <LI>The thread executes the <CODE>INSERT</CODE> statement, but instead of 
  writing the row to the table, it puts a copy of the final row into a queue 
  that is managed by the handler thread. Any syntax errors are noticed by the 
  thread and reported to the client program. 
  <LI>The client can't report the number of duplicates or the 
  <CODE>AUTO_INCREMENT</CODE> value for the resulting row; it can't obtain them 
  from the server, because the <CODE>INSERT</CODE> returns before the insert 
  operation has been completed. If you use the C API, the 
  <CODE>mysql_info()</CODE> function doesn't return anything meaningful, for the 
  same reason. 
  <LI>The update log is updated by the handler thread when the row is inserted 
  into the table. In case of multiple-row inserts, the update log is updated 
  when the first row is inserted. 
  <LI>After every <CODE>delayed_insert_limit</CODE> rows are written, the 
  handler checks whether or not any <CODE>SELECT</CODE> statements are still 
  pending. If so, it allows these to execute before continuing. <A 
  name=IDX921></A><A name=IDX922></A>
  <LI>When the handler has no more rows in its queue, the table is unlocked. If 
  no new <CODE>INSERT DELAYED</CODE> commands are received within 
  <CODE>delayed_insert_timeout</CODE> seconds, the handler terminates. 
  <LI>If more than <CODE>delayed_queue_size</CODE> rows are pending already in a 
  specific handler queue, the thread requesting <CODE>INSERT DELAYED</CODE> 
  waits until there is room in the queue. This is done to ensure that the 
  <CODE>mysqld</CODE> server doesn't use all memory for the delayed memory 
  queue. 
  <LI>The handler thread will show up in the <STRONG>MySQL</STRONG> process list 
  with <CODE>delayed_insert</CODE> in the <CODE>Command</CODE> column. It will 
  be killed if you execute a <CODE>FLUSH TABLES</CODE> command or kill it with 
  <CODE>KILL thread_id</CODE>. However, it will first store all queued rows into 
  the table before exiting. During this time it will not accept any new 
  <CODE>INSERT</CODE> commands from another thread. If you execute an 
  <CODE>INSERT DELAYED</CODE> command after this, a new handler thread will be 
  created. 
  <LI>Note that the above means that <CODE>INSERT DELAYED</CODE> commands have 
  higher priority than normal <CODE>INSERT</CODE> commands if there is an 
  <CODE>INSERT DELAYED</CODE> handler already running! Other update commands 
  will have to wait until the <CODE>INSERT DELAYED</CODE> queue is empty, 
  someone kills the handler thread (with <CODE>KILL thread_id</CODE>), or 
  someone executes <CODE>FLUSH TABLES</CODE>. 
  <LI>The following status variables provide information about <CODE>INSERT 
  DELAYED</CODE> commands: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD><STRONG>Variable</STRONG> </TD>
      <TD><STRONG>Meaning</STRONG> </TD>
    <TR>
      <TD><CODE>Delayed_insert_threads</CODE> </TD>
      <TD>Number of handler threads </TD>
    <TR>
      <TD><CODE>Delayed_writes</CODE> </TD>
      <TD>Number of rows written with <CODE>INSERT DELAYED</CODE> </TD>
    <TR>
      <TD><CODE>Not_flushed_delayed_rows</CODE> </TD>
      <TD>Number of rows waiting to be written </TD></TR></TBODY></TABLE>You can 
  view these variables by issuing a <CODE>SHOW STATUS</CODE> statement or by 
  executing a <CODE>mysqladmin extended-status</CODE> command. </LI></UL>
<P>Note that <CODE>INSERT DELAYED</CODE> is slower than a normal INSERT if the 
table is not in use. There is also the additional overhead for the server to 
handle a separate thread for each table on which you use <CODE>INSERT 
DELAYED</CODE>. This means that you should only use <CODE>INSERT DELAYED</CODE> 
when you are really sure you need it! </P>
<P><A name=IDX923></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#REPLACE" 
name=REPLACE>7.22 <CODE>REPLACE</CODE> Syntax</A></H2><PRE>    REPLACE [LOW_PRIORITY | DELAYED]
        [INTO] tbl_name [(col_name,...)]
        VALUES (expression,...)
or  REPLACE [LOW_PRIORITY | DELAYED]
        [INTO] tbl_name [(col_name,...)]
        SELECT ...
or  REPLACE [LOW_PRIORITY | DELAYED]
        [INTO] tbl_name
        SET col_name=expression, col_name=expression,...
</PRE>
<P><CODE>REPLACE</CODE> works exactly like <CODE>INSERT</CODE>, except that if 
an old record in the table has the same value as a new record on a unique index, 
the old record is deleted before the new record is inserted. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#INSERT">7.21 
<CODE>INSERT</CODE> Syntax</A>. </P>
<P>In other words, you can't access the values of the old row from a 
<CODE>REPLACE</CODE> statement. In some old <STRONG>MySQL</STRONG> version it 
looked like you could do this, but that was a bug that has been corrected. </P>
<P><A name=IDX924></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#LOAD_DATA" 
name=LOAD_DATA>7.23 <CODE>LOAD DATA INFILE</CODE> Syntax</A></H2><PRE>LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE 'file_name.txt'
    [REPLACE | IGNORE]
    INTO TABLE tbl_name
    [FIELDS
        [TERMINATED BY '\t']
        [[OPTIONALLY] ENCLOSED BY '']
        [ESCAPED BY '\\' ]
    ]
    [LINES TERMINATED BY '\n']
    [IGNORE number LINES]
    [(col_name,...)]
</PRE>
<P>The <CODE>LOAD DATA INFILE</CODE> statement reads rows from a text file into 
a table at a very high speed. If the <CODE>LOCAL</CODE> keyword is specified, 
the file is read from the client host. If <CODE>LOCAL</CODE> is not specified, 
the file must be located on the server. (<CODE>LOCAL</CODE> is available in 
<STRONG>MySQL</STRONG> Version 3.22.6 or later.) </P>
<P>For security reasons, when reading text files located on the server, the 
files must either reside in the database directory or be readable by all. Also, 
to use <CODE>LOAD DATA INFILE</CODE> on server files, you must have the 
<STRONG>file</STRONG> privilege on the server host. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Privilege_system.html#Privileges_provided">6.8 
Privileges Provided by MySQL</A>. </P>
<P>If you specify the keyword <CODE>LOW_PRIORITY</CODE>, execution of the 
<CODE>LOAD DATA</CODE> statement is delayed until no other clients are reading 
from the table. </P>
<P>If you specify the keyword <CODE>CONCURRENT</CODE> with a <CODE>MyISAM</CODE> 
table, then other threads can retrieve data from the table while <CODE>LOAD 
DATA</CODE> is executing. Using this option will of course affect the 
performance of <CODE>LOAD DATA</CODE> a bit even if no other thread is using the 
table at the same time. </P>
<P>Using <CODE>LOCAL</CODE> will be a bit slower than letting the server access 
the files directly, because the contents of the file must travel from the client 
host to the server host. On the other hand, you do not need the 
<STRONG>file</STRONG> privilege to load local files. </P>
<P>If you are using <STRONG>MySQL</STRONG> before Version 3.23.24 you can't read 
from a FIFO with <CODE>LOAD DATA INFILE</CODE>. If you need to read from a FIFO 
(for example the output from gunzip), use <CODE>LOAD DATA LOCAL INFILE</CODE> 
instead. </P>
<P><A name=IDX925></A>You can also load data files by using the 
<CODE>mysqlimport</CODE> utility; it operates by sending a <CODE>LOAD DATA 
INFILE</CODE> command to the server. The <CODE>--local</CODE> option causes 
<CODE>mysqlimport</CODE> to read data files from the client host. You can 
specify the <CODE>--compress</CODE> option to get better performance over slow 
networks if the client and server support the compressed protocol. </P>
<P>When locating files on the server host, the server uses the following rules: 
</P>
<UL>
  <LI>If an absolute pathname is given, the server uses the pathname as is. 
  <LI>If a relative pathname with one or more leading components is given, the 
  server searches for the file relative to the server's data directory. 
  <LI>If a filename with no leading components is given, the server looks for 
  the file in the database directory of the current database. </LI></UL>
<P>Note that these rules mean a file given as <TT>`./myfile.txt'</TT> is read 
from the server's data directory, whereas a file given as <TT>`myfile.txt'</TT> 
is read from the database directory of the current database. For example, the 
following <CODE>LOAD DATA</CODE> statement reads the file <TT>`data.txt'</TT> 
from the database directory for <CODE>db1</CODE> because <CODE>db1</CODE> is the 
current database, even though the statement explicitly loads the file into a 
table in the <CODE>db2</CODE> database: </P><PRE>mysql&gt; USE db1;
mysql&gt; LOAD DATA INFILE "data.txt" INTO TABLE db2.my_table;
</PRE>
<P>The <CODE>REPLACE</CODE> and <CODE>IGNORE</CODE> keywords control handling of 
input records that duplicate existing records on unique key values. If you 
specify <CODE>REPLACE</CODE>, new rows replace existing rows that have the same 
unique key value. If you specify <CODE>IGNORE</CODE>, input rows that duplicate 
an existing row on a unique key value are skipped. If you don't specify either 
option, an error occurs when a duplicate key value is found, and the rest of the 
text file is ignored. </P>
<P>If you load data from a local file using the <CODE>LOCAL</CODE> keyword, the 
server has no way to stop transmission of the file in the middle of the 
operation, so the default bahavior is the same as if <CODE>IGNORE</CODE> is 
specified. </P>
<P>If you use <CODE>LOAD DATA INFILE</CODE> on an empty <CODE>MyISAM</CODE> 
table, all non-unique indexes are created in a separate batch (like in 
<CODE>REPAIR</CODE>). This normally makes <CODE>LOAD DATA INFILE</CODE> much 
faster when you have many indexes. </P>
<P><CODE>LOAD DATA INFILE</CODE> is the complement of <CODE>SELECT ... INTO 
OUTFILE</CODE>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#SELECT">7.19 
<CODE>SELECT</CODE> Syntax</A>. To write data from a database to a file, use 
<CODE>SELECT ... INTO OUTFILE</CODE>. To read the file back into the database, 
use <CODE>LOAD DATA INFILE</CODE>. The syntax of the <CODE>FIELDS</CODE> and 
<CODE>LINES</CODE> clauses is the same for both commands. Both clauses are 
optional, but <CODE>FIELDS</CODE> must precede <CODE>LINES</CODE> if both are 
specified. </P>
<P>If you specify a <CODE>FIELDS</CODE> clause, each of its subclauses 
(<CODE>TERMINATED BY</CODE>, <CODE>[OPTIONALLY] ENCLOSED BY</CODE>, and 
<CODE>ESCAPED BY</CODE>) is also optional, except that you must specify at least 
one of them. </P>
<P>If you don't specify a <CODE>FIELDS</CODE> clause, the defaults are the same 
as if you had written this: </P><PRE>FIELDS TERMINATED BY '\t' ENCLOSED BY '' ESCAPED BY '\\'
</PRE>
<P>If you don't specify a <CODE>LINES</CODE> clause, the default is the same as 
if you had written this: </P><PRE>LINES TERMINATED BY '\n'
</PRE>
<P>In other words, the defaults cause <CODE>LOAD DATA INFILE</CODE> to act as 
follows when reading input: </P>
<UL>
  <LI>Look for line boundaries at newlines. 
  <LI>Break lines into fields at tabs. 
  <LI>Do not expect fields to be enclosed within any quoting characters. 
  <LI>Interpret occurrences of tab, newline, or <SAMP>`\'</SAMP> preceded by 
  <SAMP>`\'</SAMP> as literal characters that are part of field values. </LI></UL>
<P>Conversely, the defaults cause <CODE>SELECT ... INTO OUTFILE</CODE> to act as 
follows when writing output: </P>
<UL>
  <LI>Write tabs between fields. 
  <LI>Do not enclose fields within any quoting characters. 
  <LI>Use <SAMP>`\'</SAMP> to escape instances of tab, newline or 
  <SAMP>`\'</SAMP> that occur within field values. 
  <LI>Write newlines at the ends of lines. </LI></UL>
<P>Note that to write <CODE>FIELDS ESCAPED BY '\\'</CODE>, you must specify two 
backslashes for the value to be read as a single backslash. </P>
<P>The <CODE>IGNORE number LINES</CODE> option can be used to ignore a header of 
column names at the start of the file: </P><PRE>mysql&gt; LOAD DATA INFILE "/tmp/file_name" into table test IGNORE 1 LINES;
</PRE>
<P>When you use <CODE>SELECT ... INTO OUTFILE</CODE> in tandem with <CODE>LOAD 
DATA INFILE</CODE> to write data from a database into a file and then read the 
file back into the database later, the field and line handling options for both 
commands must match. Otherwise, <CODE>LOAD DATA INFILE</CODE> will not interpret 
the contents of the file properly. Suppose you use <CODE>SELECT ... INTO 
OUTFILE</CODE> to write a file with fields delimited by commas: </P><PRE>mysql&gt; SELECT * INTO OUTFILE 'data.txt'
           FIELDS TERMINATED BY ','
           FROM ...;
</PRE>
<P>To read the comma-delimited file back in, the correct statement would be: 
</P><PRE>mysql&gt; LOAD DATA INFILE 'data.txt' INTO TABLE table2
           FIELDS TERMINATED BY ',';
</PRE>
<P>If instead you tried to read in the file with the statement shown below, it 
wouldn't work because it instructs <CODE>LOAD DATA INFILE</CODE> to look for 
tabs between fields: </P><PRE>mysql&gt; LOAD DATA INFILE 'data.txt' INTO TABLE table2
           FIELDS TERMINATED BY '\t';
</PRE>
<P>The likely result is that each input line would be interpreted as a single 
field. </P>
<P><CODE>LOAD DATA INFILE</CODE> can be used to read files obtained from 
external sources, too. For example, a file in dBASE format will have fields 
separated by commas and enclosed in double quotes. If lines in the file are 
terminated by newlines, the command shown below illustrates the field and line 
handling options you would use to load the file: </P><PRE>mysql&gt; LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name
           FIELDS TERMINATED BY ',' ENCLOSED BY '"'
           LINES TERMINATED BY '\n';
</PRE>
<P>Any of the field or line handling options may specify an empty string 
(<CODE>''</CODE>). If not empty, the <CODE>FIELDS [OPTIONALLY] ENCLOSED 
BY</CODE> and <CODE>FIELDS ESCAPED BY</CODE> values must be a single character. 
The <CODE>FIELDS TERMINATED BY</CODE> and <CODE>LINES TERMINATED BY</CODE> 
values may be more than one character. For example, to write lines that are 
terminated by carriage return-linefeed pairs, or to read a file containing such 
lines, specify a <CODE>LINES TERMINATED BY '\r\n'</CODE> clause. </P>
<P>For example, to read a file of jokes, that are separated with a line of 
<CODE>%%</CODE>, into a SQL table you can do: </P><PRE>create table jokes (a int not null auto_increment primary key, joke text
not null);
load data infile "/tmp/jokes.txt" into table jokes fields terminated by ""
lines terminated by "\n%%\n" (joke);
</PRE>
<P><CODE>FIELDS [OPTIONALLY] ENCLOSED BY</CODE> controls quoting of fields. For 
output (<CODE>SELECT ... INTO OUTFILE</CODE>), if you omit the word 
<CODE>OPTIONALLY</CODE>, all fields are enclosed by the <CODE>ENCLOSED BY</CODE> 
character. An example of such output (using a comma as the field delimiter) is 
shown below: </P><PRE>"1","a string","100.20"
"2","a string containing a , comma","102.20"
"3","a string containing a \" quote","102.20"
"4","a string containing a \", quote and comma","102.20"
</PRE>
<P>If you specify <CODE>OPTIONALLY</CODE>, the <CODE>ENCLOSED BY</CODE> 
character is used only to enclose <CODE>CHAR</CODE> and <CODE>VARCHAR</CODE> 
fields: </P><PRE>1,"a string",100.20
2,"a string containing a , comma",102.20
3,"a string containing a \" quote",102.20
4,"a string containing a \", quote and comma",102.20
</PRE>
<P>Note that occurrences of the <CODE>ENCLOSED BY</CODE> character within a 
field value are escaped by prefixing them with the <CODE>ESCAPED BY</CODE> 
character. Also note that if you specify an empty <CODE>ESCAPED BY</CODE> value, 
it is possible to generate output that cannot be read properly by <CODE>LOAD 
DATA INFILE</CODE>. For example, the output just shown above would appear as 
shown below if the escape character is empty. Observe that the second field in 
the fourth line contains a comma following the quote, which (erroneously) 
appears to terminate the field: </P><PRE>1,"a string",100.20
2,"a string containing a , comma",102.20
3,"a string containing a " quote",102.20
4,"a string containing a ", quote and comma",102.20
</PRE>
<P>For input, the <CODE>ENCLOSED BY</CODE> character, if present, is stripped 
from the ends of field values. (This is true whether or not 
<CODE>OPTIONALLY</CODE> is specified; <CODE>OPTIONALLY</CODE> has no effect on 
input interpretation.) Occurrences of the <CODE>ENCLOSED BY</CODE> character 
preceded by the <CODE>ESCAPED BY</CODE> character are interpreted as part of the 
current field value. In addition, duplicated <CODE>ENCLOSED BY</CODE> characters 
occurring within fields are interpreted as single <CODE>ENCLOSED BY</CODE> 
characters if the field itself starts with that character. For example, if 
<CODE>ENCLOSED BY '"'</CODE> is specified, quotes are handled as shown below: 
</P><PRE>"The ""BIG"" boss"  -&gt; The "BIG" boss
The "BIG" boss      -&gt; The "BIG" boss
The ""BIG"" boss    -&gt; The ""BIG"" boss
</PRE>
<P><CODE>FIELDS ESCAPED BY</CODE> controls how to write or read special 
characters. If the <CODE>FIELDS ESCAPED BY</CODE> character is not empty, it is 
used to prefix the following characters on output: 
<UL>
  <LI>The <CODE>FIELDS ESCAPED BY</CODE> character 
  <LI>The <CODE>FIELDS [OPTIONALLY] ENCLOSED BY</CODE> character 
  <LI>The first character of the <CODE>FIELDS TERMINATED BY</CODE> and 
  <CODE>LINES TERMINATED BY</CODE> values 
  <LI>ASCII <CODE>0</CODE> (what is actually written following the escape 
  character is ASCII <CODE>'0'</CODE>, not a zero-valued byte) </LI></UL>
<P>If the <CODE>FIELDS ESCAPED BY</CODE> character is empty, no characters are 
escaped. It is probably not a good idea to specify an empty escape character, 
particularly if field values in your data contain any of the characters in the 
list just given. </P>
<P>For input, if the <CODE>FIELDS ESCAPED BY</CODE> character is not empty, 
occurrences of that character are stripped and the following character is taken 
literally as part of a field value. The exceptions are an escaped 
<SAMP>`0'</SAMP> or <SAMP>`N'</SAMP> (for example, <CODE>\0</CODE> or 
<CODE>\N</CODE> if the escape character is <SAMP>`\'</SAMP>). These sequences 
are interpreted as ASCII <CODE>0</CODE> (a zero-valued byte) and 
<CODE>NULL</CODE>. See below for the rules on <CODE>NULL</CODE> handling. </P>
<P>For more information about <SAMP>`\'</SAMP>-escape syntax, see section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Literals">7.1 
Literals: How to Write Strings and Numbers</A>. </P>
<P>In certain cases, field and line handling options interact: </P>
<UL>
  <LI>If <CODE>LINES TERMINATED BY</CODE> is an empty string and <CODE>FIELDS 
  TERMINATED BY</CODE> is non-empty, lines are also terminated with <CODE>FIELDS 
  TERMINATED BY</CODE>. 
  <LI>If the <CODE>FIELDS TERMINATED BY</CODE> and <CODE>FIELDS ENCLOSED 
  BY</CODE> values are both empty (<CODE>''</CODE>), a fixed-row (non-delimited) 
  format is used. With fixed-row format, no delimiters are used between fields. 
  Instead, column values are written and read using the ``display'' widths of 
  the columns. For example, if a column is declared as <CODE>INT(7)</CODE>, 
  values for the column are written using 7-character fields. On input, values 
  for the column are obtained by reading 7 characters. Fixed-row format also 
  affects handling of <CODE>NULL</CODE> values; see below. Note that fixed-size 
  format will not work if you are using a multi-byte character set. </LI></UL>
<P>Handling of <CODE>NULL</CODE> values varies, depending on the 
<CODE>FIELDS</CODE> and <CODE>LINES</CODE> options you use: </P>
<UL>
  <LI>For the default <CODE>FIELDS</CODE> and <CODE>LINES</CODE> values, 
  <CODE>NULL</CODE> is written as <CODE>\N</CODE> for output and <CODE>\N</CODE> 
  is read as <CODE>NULL</CODE> for input (assuming the <CODE>ESCAPED BY</CODE> 
  character is <SAMP>`\'</SAMP>). 
  <LI>If <CODE>FIELDS ENCLOSED BY</CODE> is not empty, a field containing the 
  literal word <CODE>NULL</CODE> as its value is read as a <CODE>NULL</CODE> 
  value (this differs from the word <CODE>NULL</CODE> enclosed within 
  <CODE>FIELDS ENCLOSED BY</CODE> characters, which is read as the string 
  <CODE>'NULL'</CODE>). 
  <LI>If <CODE>FIELDS ESCAPED BY</CODE> is empty, <CODE>NULL</CODE> is written 
  as the word <CODE>NULL</CODE>. 
  <LI>With fixed-row format (which happens when <CODE>FIELDS TERMINATED 
  BY</CODE> and <CODE>FIELDS ENCLOSED BY</CODE> are both empty), 
  <CODE>NULL</CODE> is written as an empty string. Note that this causes both 
  <CODE>NULL</CODE> values and empty strings in the table to be 
  indistinguishable when written to the file because they are both written as 
  empty strings. If you need to be able to tell the two apart when reading the 
  file back in, you should not use fixed-row format. </LI></UL>
<P>Some cases are not supported by <CODE>LOAD DATA INFILE</CODE>: 
<UL>
  <LI>Fixed-size rows (<CODE>FIELDS TERMINATED BY</CODE> and <CODE>FIELDS 
  ENCLOSED BY</CODE> both empty) and <CODE>BLOB</CODE> or <CODE>TEXT</CODE> 
  columns. 
  <LI>If you specify one separator that is the same as or a prefix of another, 
  <CODE>LOAD DATA INFILE</CODE> won't be able to interpret the input properly. 
  For example, the following <CODE>FIELDS</CODE> clause would cause problems: <PRE>FIELDS TERMINATED BY '"' ENCLOSED BY '"'
</PRE>
  <LI>If <CODE>FIELDS ESCAPED BY</CODE> is empty, a field value that contains an 
  occurrence of <CODE>FIELDS ENCLOSED BY</CODE> or <CODE>LINES TERMINATED 
  BY</CODE> followed by the <CODE>FIELDS TERMINATED BY</CODE> value will cause 
  <CODE>LOAD DATA INFILE</CODE> to stop reading a field or line too early. This 
  happens because <CODE>LOAD DATA INFILE</CODE> cannot properly determine where 
  the field or line value ends. </LI></UL>
<P>The following example loads all columns of the <CODE>persondata</CODE> table: 
</P><PRE>mysql&gt; LOAD DATA INFILE 'persondata.txt' INTO TABLE persondata;
</PRE>
<P>No field list is specified, so <CODE>LOAD DATA INFILE</CODE> expects input 
rows to contain a field for each table column. The default <CODE>FIELDS</CODE> 
and <CODE>LINES</CODE> values are used. </P>
<P>If you wish to load only some of a table's columns, specify a field list: 
</P><PRE>mysql&gt; LOAD DATA INFILE 'persondata.txt'
           INTO TABLE persondata (col1,col2,...);
</PRE>
<P>You must also specify a field list if the order of the fields in the input 
file differs from the order of the columns in the table. Otherwise, 
<STRONG>MySQL</STRONG> cannot tell how to match up input fields with table 
columns. </P>
<P>If a row has too few fields, the columns for which no input field is present 
are set to default values. Default value assignment is described in section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#CREATE_TABLE">7.7 
<CODE>CREATE TABLE</CODE> Syntax</A>. </P>
<P>An empty field value is interpreted differently than if the field value is 
missing: </P>
<UL>
  <LI>For string types, the column is set to the empty string. 
  <LI>For numeric types, the column is set to <CODE>0</CODE>. 
  <LI>For date and time types, the column is set to the appropriate ``zero'' 
  value for the type. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Date_and_time_types">7.3.3 
  Date and Time Types</A>. </LI></UL>
<P>Note that these are the same values that result if you assign an empty string 
explicitly to a string, numeric, or date or time type explicitly in an 
<CODE>INSERT</CODE> or <CODE>UPDATE</CODE> statement. </P>
<P><CODE>TIMESTAMP</CODE> columns are only set to the current date and time if 
there is a <CODE>NULL</CODE> value for the column, or (for the first 
<CODE>TIMESTAMP</CODE> column only) if the <CODE>TIMESTAMP</CODE> column is left 
out from the field list when a field list is specified. </P>
<P>If an input row has too many fields, the extra fields are ignored and the 
number of warnings is incremented. </P>
<P><CODE>LOAD DATA INFILE</CODE> regards all input as strings, so you can't use 
numeric values for <CODE>ENUM</CODE> or <CODE>SET</CODE> columns the way you can 
with <CODE>INSERT</CODE> statements. All <CODE>ENUM</CODE> and <CODE>SET</CODE> 
values must be specified as strings! </P>
<P><A name=IDX926></A>If you are using the C API, you can get information about 
the query by calling the API function <CODE>mysql_info()</CODE> when the 
<CODE>LOAD DATA INFILE</CODE> query finishes. The format of the information 
string is shown below: </P><PRE>Records: 1  Deleted: 0  Skipped: 0  Warnings: 0
</PRE>
<P>Warnings occur under the same circumstances as when values are inserted via 
the <CODE>INSERT</CODE> statement (see section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#INSERT">7.21 
<CODE>INSERT</CODE> Syntax</A>), except that <CODE>LOAD DATA INFILE</CODE> also 
generates warnings when there are too few or too many fields in the input row. 
The warnings are not stored anywhere; the number of warnings can only be used as 
an indication if everything went well. If you get warnings and want to know 
exactly why you got them, one way to do this is to use <CODE>SELECT ... INTO 
OUTFILE</CODE> into another file and compare this to your original input file. 
</P>
<P>If you need <CODE>LOAD DATA</CODE> to read from a pipe, you can use the 
following trick: </P><PRE>mkfifo /mysql/db/x/x
chmod 666 /mysql/db/x/x
cat &lt; /dev/tcp/10.1.1.12/4711 &gt; /nt/mysql/db/x/x
mysql -e "LOAD DATA INFILE 'x' INTO TABLE x" x
</PRE>
<P>If you are using a version of <STRONG>MySQL</STRONG> older than 3.23.25 you 
can only do the above with <CODE>LOAD DATA LOCAL INFILE</CODE>. </P>
<P>For more information about the efficiency of <CODE>INSERT</CODE> versus 
<CODE>LOAD DATA INFILE</CODE> and speeding up <CODE>LOAD DATA INFILE</CODE>, See 
section <A 
href="file:///D:/work/mysql/manual-split/manual_Performance.html#Insert_speed">13.5.7 
Speed of <CODE>INSERT</CODE> Queries</A>. </P>
<P><A name=IDX927></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#UPDATE" 
name=UPDATE>7.24 <CODE>UPDATE</CODE> Syntax</A></H2><PRE>UPDATE [LOW_PRIORITY] [IGNORE] tbl_name
    SET col_name1=expr1, [col_name2=expr2, ...]
    [WHERE where_definition]
    [ORDER BY ...]
    [LIMIT #]
</PRE>
<P><CODE>UPDATE</CODE> updates columns in existing table rows with new values. 
The <CODE>SET</CODE> clause indicates which columns to modify and the values 
they should be given. The <CODE>WHERE</CODE> clause, if given, specifies which 
rows should be updated. Otherwise all rows are updated. If the <CODE>ORDER 
BY</CODE> clause is specified, the rows will be updated in the order that is 
specified. </P>
<P>If you specify the keyword <CODE>LOW_PRIORITY</CODE>, execution of the 
<CODE>UPDATE</CODE> is delayed until no other clients are reading from the 
table. </P>
<P>If you specify the keyword <CODE>IGNORE</CODE>, the update statement will not 
abort even if we get duplicate key errors during the update. Rows that would 
cause conflicts will not be updated. </P>
<P>If you access a column from <CODE>tbl_name</CODE> in an expression, 
<CODE>UPDATE</CODE> uses the current value of the column. For example, the 
following statement sets the <CODE>age</CODE> column to one more than its 
current value: </P><PRE>mysql&gt; UPDATE persondata SET age=age+1;
</PRE>
<P><CODE>UPDATE</CODE> assignments are evaluated from left to right. For 
example, the following statement doubles the <CODE>age</CODE> column, then 
increments it: </P><PRE>mysql&gt; UPDATE persondata SET age=age*2, age=age+1;
</PRE>
<P>If you set a column to the value it currently has, <STRONG>MySQL</STRONG> 
notices this and doesn't update it. </P>
<P><A name=IDX928></A><CODE>UPDATE</CODE> returns the number of rows that were 
actually changed. In <STRONG>MySQL</STRONG> Version 3.22 or later, the C API 
function <CODE>mysql_info()</CODE> returns the number of rows that were matched 
and updated and the number of warnings that occurred during the 
<CODE>UPDATE</CODE>. </P>
<P>In <STRONG>MySQL</STRONG> Version 3.23, you can use <CODE>LIMIT #</CODE> to 
ensure that only a given number of rows are changed. </P>
<P><A name=IDX929></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#USE" 
name=USE>7.25 <CODE>USE</CODE> Syntax</A></H2><PRE>USE db_name
</PRE>
<P>The <CODE>USE db_name</CODE> statement tells <STRONG>MySQL</STRONG> to use 
the <CODE>db_name</CODE> database as the default database for subsequent 
queries. The database remains current until the end of the session or until 
another <CODE>USE</CODE> statement is issued: </P><PRE>mysql&gt; USE db1;
mysql&gt; SELECT count(*) FROM mytable;      # selects from db1.mytable
mysql&gt; USE db2;
mysql&gt; SELECT count(*) FROM mytable;      # selects from db2.mytable
</PRE>
<P>Making a particular database current by means of the <CODE>USE</CODE> 
statement does not preclude you from accessing tables in other databases. The 
example below accesses the <CODE>author</CODE> table from the <CODE>db1</CODE> 
database and the <CODE>editor</CODE> table from the <CODE>db2</CODE> database: 
</P><PRE>mysql&gt; USE db1;
mysql&gt; SELECT author_name,editor_name FROM author,db2.editor
           WHERE author.editor_id = db2.editor.editor_id;
</PRE>
<P><A name=IDX930></A><A name=IDX931></A>The <CODE>USE</CODE> statement is 
provided for Sybase compatibility. </P>
<P><A name=IDX932></A><A name=IDX933></A><A name=IDX934></A><A name=IDX935></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#FLUSH" 
name=FLUSH>7.26 <CODE>FLUSH</CODE> Syntax</A></H2><PRE>FLUSH flush_option [,flush_option]
</PRE>
<P>You should use the <CODE>FLUSH</CODE> command if you want to clear some of 
the internal caches <STRONG>MySQL</STRONG> uses. To execute <CODE>FLUSH</CODE>, 
you must have the <STRONG>RELOAD</STRONG> privilege. </P>
<P><CODE>flush_option</CODE> can be any of the following: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><CODE>HOSTS</CODE> </TD>
    <TD>Empties the host cache tables. You should flush the host tables if 
      some of your hosts change IP number or if you get the error message 
      <CODE>Host ... is blocked</CODE>. When more than 
      <CODE>max_connect_errors</CODE> errors occur in a row for a given host 
      while connection to the <STRONG>MySQL</STRONG> server, 
      <STRONG>MySQL</STRONG> assumes something is wrong and blocks the host from 
      further connection requests. Flushing the host tables allows the host to 
      attempt to connect again. See section <A 
      href="file:///D:/work/mysql/manual-split/manual_Problems.html#Blocked_host">21.4.4 
      <CODE>Host '...' is blocked</CODE> Error</A>.) You can start 
      <CODE>mysqld</CODE> with <CODE>-O max_connection_errors=999999999</CODE> 
      to avoid this error message. </TD>
  <TR>
    <TD><CODE>LOGS</CODE> </TD>
    <TD>Closes and reopens all log files. If you have specified the update log 
      file or a binary log file without an extension, the extension number of 
      the log file will be incremented by one relative to the previous file. If 
      you have used an extension in the file name, <STRONG>MySQL</STRONG> will 
      close and reopen the update log file. See section <A 
      href="file:///D:/work/mysql/manual-split/manual_Log_files.html#Update_log">23.3 
      The Update Log</A>. </TD>
  <TR>
    <TD><CODE>PRIVILEGES</CODE> </TD>
    <TD>Reloads the privileges from the grant tables in the <CODE>mysql</CODE> 
      database. </TD>
  <TR>
    <TD><CODE>TABLES</CODE> </TD>
    <TD>Closes all open tables and force all tables in use to be closed. </TD>
  <TR>
    <TD><CODE>[TABLE | TABLES] table_name [,table_name...]</CODE> </TD>
    <TD>Flushes only the given tables. </TD>
  <TR>
    <TD><CODE>TABLES WITH READ LOCK</CODE> </TD>
    <TD>Closes all open tables and locks all tables for all databases with a 
      read until one executes <CODE>UNLOCK TABLES</CODE>. This is very 
      convenient way to get backups if you have a file system, like Veritas,that 
      can take snapshots in time. </TD>
  <TR>
    <TD><CODE>STATUS</CODE> </TD>
    <TD>Resets most status variables to zero. </TD></TR></TBODY></TABLE>
<P>You can also access each of the commands shown above with the 
<CODE>mysqladmin</CODE> utility, using the <CODE>flush-hosts</CODE>, 
<CODE>flush-logs</CODE>, <CODE>reload</CODE>, or <CODE>flush-tables</CODE> 
commands. </P>
<P><A name=IDX936></A><A name=IDX937></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#KILL" 
name=KILL>7.27 <CODE>KILL</CODE> Syntax</A></H2><PRE>KILL thread_id
</PRE>
<P>Each connection to <CODE>mysqld</CODE> runs in a separate thread. You can see 
which threads are running with the <CODE>SHOW PROCESSLIST</CODE> command and 
kill a thread with the <CODE>KILL thread_id</CODE> command. </P>
<P>If you have the <STRONG>process</STRONG> privilege, you can see and kill all 
threads. Otherwise, you can see and kill only your own threads. </P>
<P>You can also use the <CODE>mysqladmin processlist</CODE> and <CODE>mysqladmin 
kill</CODE> commands to examine and kill threads. </P>
<P>When you do a <CODE>KILL</CODE>, a thread specific <CODE>kill flag</CODE> is 
set for the thread. </P>
<P>In most cases it may take some time for the thread to die as the kill flag is 
only checked at specific intervals. </P>
<UL>
  <LI>In <CODE>SELECT</CODE>, <CODE>ORDER BY</CODE> and <CODE>GROUP BY</CODE> 
  loops, the flag is checked after reading a block of rows. If the kill flag is 
  set the statement is aborted 
  <LI>When doing an <CODE>ALTER TABLE</CODE> the kill flag is checked before 
  each block of rows are read from the original table. If the kill flag was set 
  the command is aborted and the temporary table is deleted. 
  <LI>When doing an <CODE>UPDATE TABLE</CODE> and <CODE>DELETE TABLE</CODE>, the 
  kill flag is checked after each block read and after each updated or delete 
  row. If the kill flag is set the statement is aborted. Note that if you are 
  not using transactions, the changes will not be rolled back! 
  <LI><CODE>GET_LOCK()</CODE> will abort with <CODE>NULL</CODE>. 
  <LI>An <CODE>INSERT DELAYED</CODE> thread will quickly flush all rows it has 
  in memory and die. 
  <LI>If the thread is in the table lock handler (state: <CODE>Locked</CODE>), 
  the table lock will be quickly aborted. 
  <LI>If the thread is waiting for free disk space in a <CODE>write</CODE> call, 
  the write is aborted with an disk full error message. </LI></UL>
<P><A name=IDX938></A><A name=IDX939></A><A name=IDX940></A><A 
name=IDX941></A><A name=IDX942></A><A name=IDX943></A><A name=IDX944></A><A 
name=IDX945></A><A name=IDX946></A><A name=IDX947></A><A name=IDX948></A><A 
name=IDX949></A><A name=IDX950></A><A name=IDX951></A><A name=IDX952></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#SHOW" 
name=SHOW>7.28 <CODE>SHOW</CODE> Syntax</A></H2><PRE>   SHOW DATABASES [LIKE wild]
or SHOW [OPEN] TABLES [FROM db_name] [LIKE wild]
or SHOW [FULL] COLUMNS FROM tbl_name [FROM db_name] [LIKE wild]
or SHOW INDEX FROM tbl_name [FROM db_name]
or SHOW TABLE STATUS [FROM db_name] [LIKE wild]
or SHOW STATUS [LIKE wild]
or SHOW VARIABLES [LIKE wild]
or SHOW LOGS
or SHOW [FULL] PROCESSLIST
or SHOW GRANTS FOR user
or SHOW CREATE TABLE table_name
or SHOW MASTER STATUS
or SHOW MASTER LOGS
or SHOW SLAVE STATUS
</PRE>
<P><CODE>SHOW</CODE> provides information about databases, tables, columns, or 
status information about the server. If the <CODE>LIKE wild</CODE> part is used, 
the <CODE>wild</CODE> string can be a string that uses the SQL <SAMP>`%'</SAMP> 
and <SAMP>`_'</SAMP> wild-card characters. </P>
<P><A name=IDX953></A><A name=IDX954></A><A name=IDX955></A><A 
name=IDX956></A><A name=IDX957></A><A name=IDX958></A></P>
<P><A name=IDX959></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#SHOW_DATABASE_INFO" 
name=SHOW_DATABASE_INFO>7.28.1 <CODE>SHOW</CODE> Information About Databases, 
Tables, Columns, and Indexes</A></H3>
<P>You can use <CODE>db_name.tbl_name</CODE> as an alternative to the 
<CODE>tbl_name FROM db_name</CODE> syntax. These two statements are equivalent: 
</P><PRE>mysql&gt; SHOW INDEX FROM mytable FROM mydb;
mysql&gt; SHOW INDEX FROM mydb.mytable;
</PRE>
<P><CODE>SHOW DATABASES</CODE> lists the databases on the <STRONG>MySQL</STRONG> 
server host. You can also get this list using the <CODE>mysqlshow</CODE> 
command. </P>
<P><CODE>SHOW TABLES</CODE> lists the tables in a given database. You can also 
get this list using the <CODE>mysqlshow db_name</CODE> command. </P>
<P><STRONG>NOTE:</STRONG> If a user doesn't have any privileges for a table, the 
table will not show up in the output from <CODE>SHOW TABLES</CODE> or 
<CODE>mysqlshow db_name</CODE>. </P>
<P><CODE>SHOW OPEN TABLES</CODE> lists the tables that are currently open in the 
table cache. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Performance.html#Table_cache">13.2.5 
How MySQL Opens and Closes Tables</A>. The <CODE>Comment</CODE> field tells how 
many times the table is <CODE>cached</CODE> and <CODE>in_use</CODE>. </P>
<P><CODE>SHOW COLUMNS</CODE> lists the columns in a given table. If you specify 
the <CODE>FULL</CODE> option, you will also get the privileges you have for each 
column. If the column types are different than you expect them to be based on a 
<CODE>CREATE TABLE</CODE> statement, note that <STRONG>MySQL</STRONG> sometimes 
changes column types. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Silent_column_changes">7.7.1 
Silent Column Specification Changes</A>. </P>
<P>The <CODE>DESCRIBE</CODE> statement provides information similar to 
<CODE>SHOW COLUMNS</CODE>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#DESCRIBE">7.30 
<CODE>DESCRIBE</CODE> Syntax (Get Information About Columns)</A>. </P>
<P><CODE>SHOW FIELDS</CODE> is a synonym for <CODE>SHOW COLUMNS</CODE>, and 
<CODE>SHOW KEYS</CODE> is a synonym for <CODE>SHOW INDEX</CODE>. You can also 
list a table's columns or indexes with <CODE>mysqlshow db_name tbl_name</CODE> 
or <CODE>mysqlshow -k db_name tbl_name</CODE>. </P>
<P><CODE>SHOW INDEX</CODE> returns the index information in a format that 
closely resembles the <CODE>SQLStatistics</CODE> call in ODBC. The following 
columns are returned: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column</STRONG> </TD>
    <TD><STRONG>Meaning</STRONG> </TD>
  <TR>
    <TD><CODE>Table</CODE> </TD>
    <TD>Name of the table. </TD>
  <TR>
    <TD><CODE>Non_unique</CODE> </TD>
    <TD>0 if the index can't contain duplicates. </TD>
  <TR>
    <TD><CODE>Key_name</CODE> </TD>
    <TD>Name of the index. </TD>
  <TR>
    <TD><CODE>Seq_in_index</CODE> </TD>
    <TD>Column sequence number in index, starting with 1. </TD>
  <TR>
    <TD><CODE>Column_name</CODE> </TD>
    <TD>Column name. </TD>
  <TR>
    <TD><CODE>Collation</CODE> </TD>
    <TD>How the column is sorted in the index. In <STRONG>MySQL</STRONG>, this 
      can have values <SAMP>`A'</SAMP> (Ascending) or <CODE>NULL</CODE> (Not 
      sorted). </TD>
  <TR>
    <TD><CODE>Cardinality</CODE> </TD>
    <TD>Number of unique values in the index. This is updated by running 
      <CODE>isamchk -a</CODE>. </TD>
  <TR>
    <TD><CODE>Sub_part</CODE> </TD>
    <TD>Number of indexed characters if the column is only partly indexed. 
      <CODE>NULL</CODE> if the entire key is indexed. </TD>
  <TR>
    <TD><CODE>Comment</CODE> </TD>
    <TD>Various remarks. For now, it tells whether index is FULLTEXT or not. 
    </TD></TR></TBODY></TABLE>
<P>Note that as the <CODE>Cardinality</CODE> is counted based on statistics 
stored as integers, it's not necessarily accurate for small tables. </P>
<P><A name=IDX960></A><A name=IDX961></A><A name=IDX962></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#SHOW_TABLE_STATUS" 
name=SHOW_TABLE_STATUS>7.28.2 <CODE>SHOW TABLE STATUS</CODE></A></H3><PRE>SHOW TABLE STATUS [FROM db_name] [LIKE wild]
</PRE>
<P><CODE>SHOW TABLE STATUS</CODE> (new in Version 3.23) works likes <CODE>SHOW 
STATUS</CODE>, but provides a lot of information about each table. You can also 
get this list using the <CODE>mysqlshow --status db_name</CODE> command. The 
following columns are returned: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Column</STRONG> </TD>
    <TD><STRONG>Meaning</STRONG> </TD>
  <TR>
    <TD><CODE>Name</CODE> </TD>
    <TD>Name of the table. </TD>
  <TR>
    <TD><CODE>Type</CODE> </TD>
    <TD>Type of table. See section <A 
      href="file:///D:/work/mysql/manual-split/manual_Table_types.html#Table_types">8 
      MySQL Table Types</A>. </TD>
  <TR>
    <TD><CODE>Row_format</CODE> </TD>
    <TD>The row storage format (Fixed, Dynamic, or Compressed). </TD>
  <TR>
    <TD><CODE>Rows</CODE> </TD>
    <TD>Number of rows. </TD>
  <TR>
    <TD><CODE>Avg_row_length</CODE> </TD>
    <TD>Average row length. </TD>
  <TR>
    <TD><CODE>Data_length</CODE> </TD>
    <TD>Length of the data file. </TD>
  <TR>
    <TD><CODE>Max_data_length</CODE> </TD>
    <TD>Max length of the data file. </TD>
  <TR>
    <TD><CODE>Index_length</CODE> </TD>
    <TD>Length of the index file. </TD>
  <TR>
    <TD><CODE>Data_free</CODE> </TD>
    <TD>Number of allocated but not used bytes. </TD>
  <TR>
    <TD><CODE>Auto_increment</CODE> </TD>
    <TD>Next autoincrement value. </TD>
  <TR>
    <TD><CODE>Create_time</CODE> </TD>
    <TD>When the table was created. </TD>
  <TR>
    <TD><CODE>Update_time</CODE> </TD>
    <TD>When the data file was last updated. </TD>
  <TR>
    <TD><CODE>Check_time</CODE> </TD>
    <TD>When the table was last checked. </TD>
  <TR>
    <TD><CODE>Create_options</CODE> </TD>
    <TD>Extra options used with <CODE>CREATE TABLE</CODE>. </TD>
  <TR>
    <TD><CODE>Comment</CODE> </TD>
    <TD>The comment used when creating the table (or some information why 
      <STRONG>MySQL</STRONG> couldn't access the table information). 
  </TD></TR></TBODY></TABLE>
<P><CODE>InnoDB</CODE> tables will report the free space in the tablespace in 
the table comment. </P>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#SHOW_STATUS" 
name=SHOW_STATUS>7.28.3 <CODE>SHOW STATUS</CODE></A></H3>
<P><A name=IDX963></A><CODE>SHOW STATUS</CODE> provides server status 
information (like <CODE>mysqladmin extended-status</CODE>). The output resembles 
that shown below, though the format and numbers probably differ: </P><PRE>+--------------------------+------------+
| Variable_name            | Value      |
+--------------------------+------------+
| Aborted_clients          | 0          |
| Aborted_connects         | 0          |
| Bytes_received           | 155372598  |
| Bytes_sent               | 1176560426 |
| Connections              | 30023      |
| Created_tmp_disk_tables  | 0          |
| Created_tmp_tables       | 8340       |
| Created_tmp_files        | 60         |
| Delayed_insert_threads   | 0          |
| Delayed_writes           | 0          |
| Delayed_errors           | 0          |
| Flush_commands           | 1          |
| Handler_delete           | 462604     |
| Handler_read_first       | 105881     |
| Handler_read_key         | 27820558   |
| Handler_read_next        | 390681754  |
| Handler_read_prev        | 6022500    |
| Handler_read_rnd         | 30546748   |
| Handler_read_rnd_next    | 246216530  |
| Handler_update           | 16945404   |
| Handler_write            | 60356676   |
| Key_blocks_used          | 14955      |
| Key_read_requests        | 96854827   |
| Key_reads                | 162040     |
| Key_write_requests       | 7589728    |
| Key_writes               | 3813196    |
| Max_used_connections     | 0          |
| Not_flushed_key_blocks   | 0          |
| Not_flushed_delayed_rows | 0          |
| Open_tables              | 1          |
| Open_files               | 2          |
| Open_streams             | 0          |
| Opened_tables            | 44600      |
| Questions                | 2026873    |
| Select_full_join         | 0          |
| Select_full_range_join   | 0          |
| Select_range             | 99646      |
| Select_range_check       | 0          |
| Select_scan              | 30802      |
| Slave_running            | OFF        |
| Slave_open_temp_tables   | 0          |
| Slow_launch_threads      | 0          |
| Slow_queries             | 0          |
| Sort_merge_passes        | 30         |
| Sort_range               | 500        |
| Sort_rows                | 30296250   |
| Sort_scan                | 4650       |
| Table_locks_immediate    | 1920382    |
| Table_locks_waited       | 0          |
| Threads_cached           | 0          |
| Threads_created          | 30022      |
| Threads_connected        | 1          |
| Threads_running          | 1          |
| Uptime                   | 80380      |
+--------------------------+------------+
</PRE>
<P><A name=IDX964></A>The status variables listed above have the following 
meaning: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><STRONG>Variable</STRONG> </TD>
    <TD><STRONG>Meaning</STRONG> </TD>
  <TR>
    <TD><CODE>Aborted_clients</CODE> </TD>
    <TD>Number of connections aborted because the client died without closing 
      the connection properly. See section <A 
      href="file:///D:/work/mysql/manual-split/manual_Problems.html#Communication_errors">21.4.9 
      Communication Errors / Aborted Connection</A>. </TD>
  <TR>
    <TD><CODE>Aborted_connects</CODE> </TD>
    <TD>Number of tries to connect to the <STRONG>MySQL</STRONG> server that 
      failed. See section <A 
      href="file:///D:/work/mysql/manual-split/manual_Problems.html#Communication_errors">21.4.9 
      Communication Errors / Aborted Connection</A>. </TD>
  <TR>
    <TD><CODE>Bytes_received</CODE> </TD>
    <TD>Number of bytes received from all clients. </TD>
  <TR>
    <TD><CODE>Bytes_sent</CODE> </TD>
    <TD>Number of bytes sent to all clients. </TD>
  <TR>
    <TD><CODE>Connections</CODE> </TD>
    <TD>Number of connection attempts to the <STRONG>MySQL</STRONG> server. 
</TD>
  <TR>
    <TD><CODE>Created_tmp_disk_tables</CODE> </TD>
    <TD>Number of implicit temporary tables on disk created while executing 
      statements. </TD>
  <TR>
    <TD><CODE>Created_tmp_tables</CODE> </TD>
    <TD>Number of implicit temporary tables in memory created while executing 
      statements. </TD>
  <TR>
    <TD><CODE>Created_tmp_files</CODE> </TD>
    <TD>How many temporary files <CODE>mysqld</CODE> have created. </TD>
  <TR>
    <TD><CODE>Delayed_insert_threads</CODE> </TD>
    <TD>Number of delayed insert handler threads in use. </TD>
  <TR>
    <TD><CODE>Delayed_writes</CODE> </TD>
    <TD>Number of rows written with <CODE>INSERT DELAYED</CODE>. </TD>
  <TR>
    <TD><CODE>Delayed_errors</CODE> </TD>
    <TD>Number of rows written with <CODE>INSERT DELAYED</CODE> for which some 
      error occurred (probably <CODE>duplicate key</CODE>). </TD>
  <TR>
    <TD><CODE>Flush_commands</CODE> </TD>
    <TD>Number of executed <CODE>FLUSH</CODE> commands. </TD>
  <TR>
    <TD><CODE>Handler_delete</CODE> </TD>
    <TD>Number of times a row was deleted from a table. </TD>
  <TR>
    <TD><CODE>Handler_read_first</CODE> </TD>
    <TD>Number of times the first entry was read from an index. If this is 
      high, it suggests that the server is doing a lot of full index scans, for 
      example, <CODE>SELECT col1 FROM foo</CODE>, assuming that col1 is indexed. 
    </TD>
  <TR>
    <TD><CODE>Handler_read_key</CODE> </TD>
    <TD>Number of requests to read a row based on a key. If this is high, it 
      is a good indication that your queries and tables are properly indexed. 
</TD>
  <TR>
    <TD><CODE>Handler_read_next</CODE> </TD>
    <TD>Number of requests to read next row in key order. This will be 
      incremented if you are querying an index column with a range constraint. 
      This also will be incremented if you are doing an index scan. </TD>
  <TR>
    <TD><CODE>Handler_read_rnd</CODE> </TD>
    <TD>Number of requests to read a row based on a fixed position. This will 
      be high if you are doing a lot of queries that require sorting of the 
      result. </TD>
  <TR>
    <TD><CODE>Handler_read_rnd_next</CODE> </TD>
    <TD>Number of requests to read the next row in the datafile. This will be 
      high if you are doing a lot of table scans. Generally this suggests that 
      your tables are not properly indexed or that your queries are not written 
      to take advantage of the indexes you have. </TD>
  <TR>
    <TD><CODE>Handler_update</CODE> </TD>
    <TD>Number of requests to update a row in a table. </TD>
  <TR>
    <TD><CODE>Handler_write</CODE> </TD>
    <TD>Number of requests to insert a row in a table. </TD>
  <TR>
    <TD><CODE>Key_blocks_used</CODE> </TD>
    <TD>The number of used blocks in the key cache. </TD>
  <TR>
    <TD><CODE>Key_read_requests</CODE> </TD>
    <TD>The number of requests to read a key block from the cache. </TD>
  <TR>
    <TD><CODE>Key_reads</CODE> </TD>
    <TD>The number of physical reads of a key block from disk. </TD>
  <TR>
    <TD><CODE>Key_write_requests</CODE> </TD>
    <TD>The number of requests to write a key block to the cache. </TD>
  <TR>
    <TD><CODE>Key_writes</CODE> </TD>
    <TD>The number of physical writes of a key block to disk. </TD>
  <TR>
    <TD><CODE>Max_used_connections</CODE> </TD>
    <TD>The maximum number of connections in use simultaneously. </TD>
  <TR>
    <TD><CODE>Not_flushed_key_blocks</CODE> </TD>
    <TD>Keys blocks in the key cache that has changed but hasn't yet been 
      flushed to disk. </TD>
  <TR>
    <TD><CODE>Not_flushed_delayed_rows</CODE> </TD>
    <TD>Number of rows waiting to be written in <CODE>INSERT DELAY</CODE> 
      queues. </TD>
  <TR>
    <TD><CODE>Open_tables</CODE> </TD>
    <TD>Number of tables that are open. </TD>
  <TR>
    <TD><CODE>Open_files</CODE> </TD>
    <TD>Number of files that are open. </TD>
  <TR>
    <TD><CODE>Open_streams</CODE> </TD>
    <TD>Number of streams that are open (used mainly for logging). </TD>
  <TR>
    <TD><CODE>Opened_tables</CODE> </TD>
    <TD>Number of tables that have been opened. </TD>
  <TR>
    <TD><CODE>Select_full_join</CODE> </TD>
    <TD>Number of joins without keys (Should be 0). </TD>
  <TR>
    <TD><CODE>Select_full_range_join</CODE> </TD>
    <TD>Number of joins where we used a range search on reference table. </TD>
  <TR>
    <TD><CODE>Select_range</CODE> </TD>
    <TD>Number of joins where we used ranges on the first table. (It's 
      normally not critical even if this is big.) </TD>
  <TR>
    <TD><CODE>Select_scan</CODE> </TD>
    <TD>Number of joins where we scanned the first table. </TD>
  <TR>
    <TD><CODE>Select_range_check</CODE> </TD>
    <TD>Number of joins without keys where we check for key usage after each 
      row (Should be 0). </TD>
  <TR>
    <TD><CODE>Questions</CODE> </TD>
    <TD>Number of queries sent to the server. </TD>
  <TR>
    <TD><CODE>Slave_open_temp_tables</CODE> </TD>
    <TD>Number of temporary tables currently open by the slave thread </TD>
  <TR>
    <TD><CODE>Slow_launch_threads</CODE> </TD>
    <TD>Number of threads that have taken more than 
      <CODE>slow_launch_time</CODE> to connect. </TD>
  <TR>
    <TD><CODE>Slow_queries</CODE> </TD>
    <TD>Number of queries that have taken more than 
      <CODE>long_query_time</CODE>. See section <A 
      href="file:///D:/work/mysql/manual-split/manual_Log_files.html#Slow_query_log">23.5 
      The Slow Query Log</A>. </TD>
  <TR>
    <TD><CODE>Sort_merge_passes</CODE> </TD>
    <TD>Number of merges the sort has to do. If this value is large you should 
      consider increasing <CODE>sort_buffer</CODE>. </TD>
  <TR>
    <TD><CODE>Sort_range</CODE> </TD>
    <TD>Number of sorts that where done with ranges. </TD>
  <TR>
    <TD><CODE>Sort_rows</CODE> </TD>
    <TD>Number of sorted rows. </TD>
  <TR>
    <TD><CODE>Sort_scan</CODE> </TD>
    <TD>Number of sorts that where done by scanning the table. </TD>
  <TR>
    <TD><CODE>Table_locks_immediate</CODE> </TD>
    <TD>Number of times a table lock was acquired immediately. Available after 
      3.23.33. </TD>
  <TR>
    <TD><CODE>Table_locks_waited</CODE> </TD>
    <TD>Number of times a table lock could not be acquired immediately and a 
      wait was needed. If this is high, and you have performance problems, you 
      should first optimize your queries, and then either split your table(s) or 
      use replication. Available after 3.23.33. </TD>
  <TR>
    <TD><CODE>Threads_cached</CODE> </TD>
    <TD>Number of threads in the thread cache. </TD>
  <TR>
    <TD><CODE>Threads_connected</CODE> </TD>
    <TD>Number of currently open connections. </TD>
  <TR>
    <TD><CODE>Threads_created</CODE> </TD>
    <TD>Number of threads created to handle connections. </TD>
  <TR>
    <TD><CODE>Threads_running</CODE> </TD>
    <TD>Number of threads that are not sleeping. </TD>
  <TR>
    <TD><CODE>Uptime</CODE> </TD>
    <TD>How many seconds the server has been up. </TD></TR></TBODY></TABLE>
<P>Some comments about the above: </P>
<UL>
  <LI>If <CODE>Opened_tables</CODE> is big, then your <CODE>table_cache</CODE> 
  variable is probably too small. 
  <LI>If <CODE>key_reads</CODE> is big, then your <CODE>key_cache</CODE> is 
  probably too small. The cache hit rate can be calculated with 
  <CODE>key_reads</CODE>/<CODE>key_read_requests</CODE>. 
  <LI>If <CODE>Handler_read_rnd</CODE> is big, then you probably have a lot of 
  queries that require <STRONG>MySQL</STRONG> to scan whole tables or you have 
  joins that don't use keys properly. 
  <LI>If <CODE>Threads_created</CODE> is big, you may want to increase the 
  <CODE>thread_cache_size</CODE> variable. </LI></UL>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#SHOW_VARIABLES" 
name=SHOW_VARIABLES>7.28.4 <CODE>SHOW VARIABLES</CODE></A></H3><PRE>SHOW VARIABLES [LIKE wild]
</PRE>
<P><CODE>SHOW VARIABLES</CODE> shows the values of some <STRONG>MySQL</STRONG> 
system variables. You can also get this information using the <CODE>mysqladmin 
variables</CODE> command. If the default values are unsuitable, you can set most 
of these variables using command-line options when <CODE>mysqld</CODE> starts 
up. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Installing.html#Command-line_options">4.16.4 
mysqld Command-line Options</A>. </P>
<P>The output resembles that shown below, though the format and numbers may 
differ somewhat: </P><PRE>+-------------------------+---------------------------+
| Variable_name           | Value                     |
+-------------------------+---------------------------+
| ansi_mode               | OFF                       |
| back_log                | 50                        |
| basedir                 | /my/monty/                |
| bdb_cache_size          | 16777216                  |
| bdb_log_buffer_size     | 32768                     |
| bdb_home                | /my/monty/data/           |
| bdb_max_lock            | 10000                     |
| bdb_logdir              |                           |
| bdb_shared_data         | OFF                       |
| bdb_tmpdir              | /tmp/                     |
| binlog_cache_size       | 32768                     |
| concurrent_insert       | ON                        |
| connect_timeout         | 5                         |
| datadir                 | /my/monty/data/           |
| delay_key_write         | ON                        |
| delayed_insert_limit    | 100                       |
| delayed_insert_timeout  | 300                       |
| delayed_queue_size      | 1000                      |
| flush                   | OFF                       |
| flush_time              | 0                         |
| have_bdb                | YES                       |
| have_gemini             | NO                        |
| have_innodb             | YES                       |
| have_raid               | YES                       |
| have_ssl                | NO                        |
| init_file               |                           |
| interactive_timeout     | 28800                     |
| join_buffer_size        | 131072                    |
| key_buffer_size         | 16776192                  |
| language                | /my/monty/share/english/  |
| large_files_support     | ON                        |
| log                     | OFF                       |
| log_update              | OFF                       |
| log_bin                 | OFF                       |
| log_slave_updates       | OFF                       |
| long_query_time         | 10                        |
| low_priority_updates    | OFF                       |
| lower_case_table_names  | 0                         |
| max_allowed_packet      | 1048576                   |
| max_binlog_cache_size   | 4294967295                |
| max_connections         | 100                       |
| max_connect_errors      | 10                        |
| max_delayed_threads     | 20                        |
| max_heap_table_size     | 16777216                  |
| max_join_size           | 4294967295                |
| max_sort_length         | 1024                      |
| max_tmp_tables          | 32                        |
| max_write_lock_count    | 4294967295                |
| myisam_recover_options  | DEFAULT                   |
| myisam_sort_buffer_size | 8388608                   |
| net_buffer_length       | 16384                     |
| net_read_timeout        | 30                        |
| net_retry_count         | 10                        |
| net_write_timeout       | 60                        |
| open_files_limit        | 0                         |
| pid_file                | /my/monty/data/donna.pid  |
| port                    | 3306                      |
| protocol_version        | 10                        |
| record_buffer           | 131072                    |
| query_buffer_size       | 0                         |
| safe_show_database      | OFF                       |
| server_id               | 0                         |
| skip_locking            | ON                        |
| skip_networking         | OFF                       |
| skip_show_database      | OFF                       |
| slow_launch_time        | 2                         |
| socket                  | /tmp/mysql.sock           |
| sort_buffer             | 2097116                   |
| table_cache             | 64                        |
| table_type              | MYISAM                    |
| thread_cache_size       | 4                         |
| thread_stack            | 65536                     |
| tmp_table_size          | 1048576                   |
| tmpdir                  | /tmp/                     |
| version                 | 3.23.29a-gamma-debug      |
| wait_timeout            | 28800                     |
+-------------------------+---------------------------+
</PRE>
<P>Each option is described below. Values for buffer sizes, lengths, and stack 
sizes are given in bytes. You can specify values with a suffix of 
<SAMP>`K'</SAMP> or <SAMP>`M'</SAMP> to indicate kilobytes or megabytes. For 
example, <CODE>16M</CODE> indicates 16 megabytes. The case of suffix letters 
does not matter; <CODE>16M</CODE> and <CODE>16m</CODE> are equivalent: </P>
<P><A name=IDX965></A>
<DL compact>
  <DT><CODE><CODE>ansi_mode</CODE>.</CODE> 
  <DD>Is <CODE>ON</CODE> if <CODE>mysqld</CODE> was started with 
  <CODE>--ansi</CODE>. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Compatibility.html#ANSI_mode">5.2 
  Running MySQL in ANSI Mode</A>. 
  <DT><CODE><CODE>back_log</CODE></CODE> 
  <DD>The number of outstanding connection requests <STRONG>MySQL</STRONG> can 
  have. This comes into play when the main <STRONG>MySQL</STRONG> thread gets 
  <STRONG>VERY</STRONG> many connection requests in a very short time. It then 
  takes some time (although very little) for the main thread to check the 
  connection and start a new thread. The <CODE>back_log</CODE> value indicates 
  how many requests can be stacked during this short time before 
  <STRONG>MySQL</STRONG> momentarily stops answering new requests. You need to 
  increase this only if you expect a large number of connections in a short 
  period of time. In other words, this value is the size of the listen queue for 
  incoming TCP/IP connections. Your operating system has its own limit on the 
  size of this queue. The manual page for the Unix <CODE>listen(2)</CODE> system 
  call should have more details. Check your OS documentation for the maximum 
  value for this variable. Attempting to set <CODE>back_log</CODE> higher than 
  your operating system limit will be ineffective. 
  <DT><CODE><CODE>basedir</CODE></CODE> 
  <DD>The value of the <CODE>--basedir</CODE> option. 
  <DT><CODE><CODE>bdb_cache_size</CODE></CODE> 
  <DD>The buffer that is allocated to cache index and rows for <CODE>BDB</CODE> 
  tables. If you don't use <CODE>BDB</CODE> tables, you should start 
  <CODE>mysqld</CODE> with <CODE>--skip-bdb</CODE> to not waste memory for this 
  cache. 
  <DT><CODE><CODE>bdb_log_buffer_size</CODE></CODE> 
  <DD>The buffer that is allocated to cache index and rows for <CODE>BDB</CODE> 
  tables. If you don't use <CODE>BDB</CODE> tables, you should set this to 0 or 
  start <CODE>mysqld</CODE> with <CODE>--skip-bdb</CODE> to not waste memory for 
  this cache. 
  <DT><CODE><CODE>bdb_home</CODE></CODE> 
  <DD>The value of the <CODE>--bdb-home</CODE> option. 
  <DT><CODE><CODE>bdb_max_lock</CODE></CODE> 
  <DD>The maximum number of locks (1000 by default) you can have active on a BDB 
  table. You should increase this if you get errors of type <CODE>bdb: Lock 
  table is out of available locks</CODE> or <CODE>Got error 12 from ...</CODE> 
  when you have do long transactions or when <CODE>mysqld</CODE> has to examine 
  a lot of rows to calculate the query. 
  <DT><CODE><CODE>bdb_logdir</CODE></CODE> 
  <DD>The value of the <CODE>--bdb-logdir</CODE> option. 
  <DT><CODE><CODE>bdb_shared_data</CODE></CODE> 
  <DD>Is <CODE>ON</CODE> if you are using <CODE>--bdb-shared-data</CODE>. 
  <DT><CODE><CODE>bdb_tmpdir</CODE></CODE> 
  <DD>The value of the <CODE>--bdb-tmpdir</CODE> option. 
  <DT><CODE><CODE>binlog_cache_size</CODE>. The size of the cache to hold the 
  SQL</CODE> 
  <DD>statements for the binary log during a transaction. If you often use big, 
  multi-statement transactions you can increase this to get more performance. 
  See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#COMMIT">7.31 
  <CODE>BEGIN/COMMIT/ROLLBACK</CODE> Syntax</A>. 
  <DT><CODE><CODE>character_set</CODE></CODE> 
  <DD>The default character set. 
  <DT><CODE><CODE>character_sets</CODE></CODE> 
  <DD>The supported character sets. 
  <DT><CODE><CODE>concurrent_inserts</CODE></CODE> 
  <DD>If <CODE>ON</CODE> (the default), <STRONG>MySQL</STRONG> will allow you to 
  use <CODE>INSERT</CODE> on <CODE>MyISAM</CODE> tables at the same time as you 
  run <CODE>SELECT</CODE> queries on them. You can turn this option off by 
  starting <CODE>mysqld</CODE> with <CODE>--safe</CODE> or 
  <CODE>--skip-new</CODE>. <A name=IDX966></A>
  <DT><CODE><CODE>connect_timeout</CODE></CODE> 
  <DD>The number of seconds the <CODE>mysqld</CODE> server is waiting for a 
  connect packet before responding with <CODE>Bad handshake</CODE>. 
  <DT><CODE><CODE>datadir</CODE></CODE> 
  <DD>The value of the <CODE>--datadir</CODE> option. 
  <DT><CODE><CODE>delay_key_write</CODE></CODE> 
  <DD>If enabled (is on by default), <STRONG>MySQL</STRONG> will honor the 
  <CODE>delay_key_write</CODE> option <CODE>CREATE TABLE</CODE>. This means that 
  the key buffer for tables with this option will not get flushed on every index 
  update, but only when a table is closed. This will speed up writes on keys a 
  lot, but you should add automatic checking of all tables with <CODE>myisamchk 
  --fast --force</CODE> if you use this. Note that if you start 
  <CODE>mysqld</CODE> with the <CODE>--delay-key-write-for-all-tables</CODE> 
  option this means that all tables will be treated as if they were created with 
  the <CODE>delay_key_write</CODE> option. You can clear this flag by starting 
  <CODE>mysqld</CODE> with <CODE>--skip-new</CODE> or <CODE>--safe-mode</CODE>. 
  <DT><CODE><CODE>delayed_insert_limit</CODE></CODE> 
  <DD>After inserting <CODE>delayed_insert_limit</CODE> rows, the <CODE>INSERT 
  DELAYED</CODE> handler will check if there are any <CODE>SELECT</CODE> 
  statements pending. If so, it allows these to execute before continuing. 
  <DT><CODE><CODE>delayed_insert_timeout</CODE></CODE> 
  <DD>How long a <CODE>INSERT DELAYED</CODE> thread should wait for 
  <CODE>INSERT</CODE> statements before terminating. 
  <DT><CODE><CODE>delayed_queue_size</CODE></CODE> 
  <DD>What size queue (in rows) should be allocated for handling <CODE>INSERT 
  DELAYED</CODE>. If the queue becomes full, any client that does <CODE>INSERT 
  DELAYED</CODE> will wait until there is room in the queue again. 
  <DT><CODE><CODE>flush</CODE></CODE> 
  <DD>This is <CODE>ON</CODE> if you have started <STRONG>MySQL</STRONG> with 
  the <CODE>--flush</CODE> option. 
  <DT><CODE><CODE>flush_time</CODE></CODE> 
  <DD>If this is set to a non-zero value, then every <CODE>flush_time</CODE> 
  seconds all tables will be closed (to free up resources and sync things to 
  disk). We only recommend this option on Win95, Win98, or on systems where you 
  have very little resources. 
  <DT><CODE><CODE>have_bdb</CODE></CODE> 
  <DD><CODE>YES</CODE> if <CODE>mysqld</CODE> supports Berkeley DB tables. 
  <CODE>DISABLED</CODE> if <CODE>--skip-bdb</CODE> is used. 
  <DT><CODE><CODE>have_gemini</CODE></CODE> 
  <DD><CODE>YES</CODE> if <CODE>mysqld</CODE> supports Gemini tables. 
  <CODE>DISABLED</CODE> if <CODE>--skip-gemini</CODE> is used. 
  <DT><CODE><CODE>have_innodb</CODE></CODE> 
  <DD><CODE>YES</CODE> if <CODE>mysqld</CODE> supports InnoDB tables. 
  <CODE>DISABLED</CODE> if <CODE>--skip-innodb</CODE> is used. 
  <DT><CODE><CODE>have_raid</CODE></CODE> 
  <DD><CODE>YES</CODE> if <CODE>mysqld</CODE> supports the <CODE>RAID</CODE> 
  option. 
  <DT><CODE><CODE>have_ssl</CODE></CODE> 
  <DD><CODE>YES</CODE> if <CODE>mysqld</CODE> supports SSL (encryption) on the 
  client/server protocol. 
  <DT><CODE><CODE>init_file</CODE></CODE> 
  <DD>The name of the file specified with the <CODE>--init-file</CODE> option 
  when you start the server. This is a file of SQL statements you want the 
  server to execute when it starts. 
  <DT><CODE><CODE>interactive_timeout</CODE></CODE> 
  <DD>The number of seconds the server waits for activity on an interactive 
  connection before closing it. An interactive client is defined as a client 
  that uses the <CODE>CLIENT_INTERACTIVE</CODE> option to 
  <CODE>mysql_real_connect()</CODE>. See also <CODE>wait_timeout</CODE>. 
  <DT><CODE><CODE>join_buffer_size</CODE></CODE> 
  <DD>The size of the buffer that is used for full joins (joins that do not use 
  indexes). The buffer is allocated one time for each full join between two 
  tables. Increase this value to get a faster full join when adding indexes is 
  not possible. (Normally the best way to get fast joins is to add indexes.) <A 
  name=IDX967></A>
  <DT><CODE><CODE>key_buffer_size</CODE></CODE> 
  <DD>Index blocks are buffered and are shared by all threads. 
  <CODE>key_buffer_size</CODE> is the size of the buffer used for index blocks. 
  Increase this to get better index handling (for all reads and multiple writes) 
  to as much as you can afford; 64M on a 256M machine that mainly runs 
  <STRONG>MySQL</STRONG> is quite common. If you, however, make this too big 
  (more than 50% of your total memory?) your system may start to page and become 
  REALLY slow. Remember that because <STRONG>MySQL</STRONG> does not cache data 
  read, that you will have to leave some room for the OS filesystem cache. You 
  can check the performance of the key buffer by doing <CODE>show status</CODE> 
  and examine the variables <CODE>Key_read_requests</CODE>, 
  <CODE>Key_reads</CODE>, <CODE>Key_write_requests</CODE>, and 
  <CODE>Key_writes</CODE>. The <CODE>Key_reads/Key_read_request</CODE> ratio 
  should normally be &lt; 0.01. The <CODE>Key_write/Key_write_requests</CODE> is 
  usually near 1 if you are using mostly updates/deletes but may be much smaller 
  if you tend to do updates that affect many at the same time or if you are 
  using <CODE>delay_key_write</CODE>. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#SHOW">7.28 
  <CODE>SHOW</CODE> Syntax</A>. To get even more speed when writing many rows at 
  the same time, use <CODE>LOCK TABLES</CODE>. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#LOCK_TABLES">7.32 
  <CODE>LOCK TABLES/UNLOCK TABLES</CODE> Syntax</A>. 
  <DT><CODE><CODE>language</CODE></CODE> 
  <DD>The language used for error messages. 
  <DT><CODE><CODE>large_file_support</CODE></CODE> 
  <DD>If <CODE>mysqld</CODE> was compiled with options for big file support. 
  <DT><CODE><CODE>locked_in_memory</CODE></CODE> 
  <DD>If <CODE>mysqld</CODE> was locked in memory with <CODE>--memlock</CODE> 
  <DT><CODE><CODE>log</CODE></CODE> 
  <DD>If logging of all queries is enabled. 
  <DT><CODE><CODE>log_update</CODE></CODE> 
  <DD>If the update log is enabled. 
  <DT><CODE><CODE>log_bin</CODE></CODE> 
  <DD>If the binary log is enabled. 
  <DT><CODE><CODE>log_slave_updates</CODE></CODE> 
  <DD>If the updates from the slave should be logged. 
  <DT><CODE><CODE>long_query_time</CODE></CODE> 
  <DD>If a query takes longer than this (in seconds), the 
  <CODE>Slow_queries</CODE> counter will be incremented. If you are using 
  <CODE>--log-slow-queries</CODE>, the query will be logged to the slow query 
  logfile. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Log_files.html#Slow_query_log">23.5 
  The Slow Query Log</A>. 
  <DT><CODE><CODE>lower_case_table_names</CODE></CODE> 
  <DD>If set to 1 table names are stored in lowercase on disk. This will enable 
  you to access the table names case-insensitive also on Unix. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#Name_case_sensitivity">7.1.5.1 
  Case Sensitivity in Names</A>. 
  <DT><CODE><CODE>max_allowed_packet</CODE></CODE> 
  <DD>The maximum size of one packet. The message buffer is initialized to 
  <CODE>net_buffer_length</CODE> bytes, but can grow up to 
  <CODE>max_allowed_packet</CODE> bytes when needed. This value by default is 
  small, to catch big (possibly wrong) packets. You must increase this value if 
  you are using big <CODE>BLOB</CODE> columns. It should be as big as the 
  biggest <CODE>BLOB</CODE> you want to use. The current protocol limits 
  <CODE>max_allowed_packet</CODE> to 16M. 
  <DT><CODE><CODE>max_binlog_cache_size</CODE></CODE> 
  <DD>If a multi-statement transaction requires more than this amount of memory, 
  one will get the error "Multi-statement transaction required more than 
  'max_binlog_cache_size' bytes of storage". 
  <DT><CODE><CODE>max_binlog_size</CODE></CODE> 
  <DD>Available after 3.23.33. If a write to the binary (replication) log 
  exceeds the given value, rotate the logs. You cannot set it to less than 1024 
  bytes, or more than 1 GB. Default is 1 GB. 
  <DT><CODE><CODE>max_connections</CODE></CODE> 
  <DD>The number of simultaneous clients allowed. Increasing this value 
  increases the number of file descriptors that <CODE>mysqld</CODE> requires. 
  See below for comments on file descriptor limits. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Problems.html#Too_many_connections">21.4.5 
  <CODE>Too many connections</CODE> Error</A>. 
  <DT><CODE><CODE>max_connect_errors</CODE></CODE> 
  <DD>If there is more than this number of interrupted connections from a host 
  this host will be blocked from further connections. You can unblock a host 
  with the command <CODE>FLUSH HOSTS</CODE>. 
  <DT><CODE><CODE>max_delayed_threads</CODE></CODE> 
  <DD>Don't start more than this number of threads to handle <CODE>INSERT 
  DELAYED</CODE> statements. If you try to insert data into a new table after 
  all <CODE>INSERT DELAYED</CODE> threads are in use, the row will be inserted 
  as if the <CODE>DELAYED</CODE> attribute wasn't specified. 
  <DT><CODE><CODE>max_heap_table_size</CODE></CODE> 
  <DD>Don't allow creation of heap tables bigger than this. 
  <DT><CODE><CODE>max_join_size</CODE></CODE> 
  <DD>Joins that are probably going to read more than <CODE>max_join_size</CODE> 
  records return an error. Set this value if your users tend to perform joins 
  that lack a <CODE>WHERE</CODE> clause, that take a long time, and that return 
  millions of rows. 
  <DT><CODE><CODE>max_sort_length</CODE></CODE> 
  <DD>The number of bytes to use when sorting <CODE>BLOB</CODE> or 
  <CODE>TEXT</CODE> values (only the first <CODE>max_sort_length</CODE> bytes of 
  each value are used; the rest are ignored). 
  <DT><CODE><CODE>max_user_connections</CODE></CODE> 
  <DD>The maximum number of active connections for a single user (0 = no limit). 

  <DT><CODE><CODE>max_tmp_tables</CODE></CODE> 
  <DD>(This option doesn't yet do anything.) Maximum number of temporary tables 
  a client can keep open at the same time. 
  <DT><CODE><CODE>max_write_lock_count</CODE></CODE> 
  <DD>After this many write locks, allow some read locks to run in between. 
  <DT><CODE><CODE>myisam_recover_options</CODE></CODE> 
  <DD>The value of the <CODE>--myisam-recover</CODE> option. 
  <DT><CODE><CODE>myisam_sort_buffer_size</CODE></CODE> 
  <DD>The buffer that is allocated when sorting the index when doing a 
  <CODE>REPAIR</CODE> or when creating indexes with <CODE>CREATE INDEX</CODE> or 
  <CODE>ALTER TABLE</CODE>. 
  <DT><CODE><CODE>myisam_max_extra_sort_file_size</CODE>.</CODE> 
  <DD>If the creating of the temporary file for fast index creation would be 
  this much bigger than using the key cache, then prefer the key cache method. 
  This is mainly used to force long character keys in large tables to use the 
  slower key cache method to create the index. <STRONG>NOTE</STRONG> that this 
  parameter is given in megabytes! 
  <DT><CODE><CODE>myisam_max_sort_file_size</CODE></CODE> 
  <DD>The maximum size of the temporary file <STRONG>MySQL</STRONG> is allowed 
  to create to while recreating the index (during <CODE>REPAIR</CODE>, 
  <CODE>ALTER TABLE</CODE> or <CODE>LOAD DATA INFILE</CODE>. If the file size 
  would be bigger than this, the index will be created through the key cache 
  (which is slower). <STRONG>NOTE</STRONG> that this parameter is given in 
  megabytes! 
  <DT><CODE><CODE>net_buffer_length</CODE></CODE> 
  <DD>The communication buffer is reset to this size between queries. This 
  should not normally be changed, but if you have very little memory, you can 
  set it to the expected size of a query. (That is, the expected length of SQL 
  statements sent by clients. If statements exceed this length, the buffer is 
  automatically enlarged, up to <CODE>max_allowed_packet</CODE> bytes.) 
  <DT><CODE><CODE>net_read_timeout</CODE></CODE> 
  <DD>Number of seconds to wait for more data from a connection before aborting 
  the read. Note that when we don't expect data from a connection, the timeout 
  is defined by <CODE>write_timeout</CODE>. 
  <DT><CODE><CODE>net_retry_count</CODE></CODE> 
  <DD>If a read on a communication port is interrupted, retry this many times 
  before giving up. This value should be quite high on <CODE>FreeBSD</CODE> as 
  internal interrupts are sent to all threads. 
  <DT><CODE><CODE>net_write_timeout</CODE></CODE> 
  <DD>Number of seconds to wait for a block to be written to a connection before 
  aborting the write. 
  <DT><CODE><CODE>open_files_limit</CODE></CODE> 
  <DD>If this is not 0, then <CODE>mysqld</CODE> will use this value to reserve 
  file descriptors to use with <CODE>setrlimit()</CODE>. If this value is 0 then 
  <CODE>mysqld</CODE> will reserve <CODE>max_connections*5</CODE> or 
  <CODE>max_connections + table_cache*2</CODE> (whichever is larger) number of 
  files. You should try increasing this if <CODE>mysqld</CODE> gives you the 
  error 'Too many open files'. 
  <DT><CODE><CODE>pid_file</CODE></CODE> 
  <DD>The value of the <CODE>--pid-file</CODE> option. 
  <DT><CODE><CODE>port</CODE></CODE> 
  <DD>The value of the <CODE>--port</CODE> option. 
  <DT><CODE><CODE>protocol_version</CODE></CODE> 
  <DD>The protocol version used by the <STRONG>MySQL</STRONG> server. 
  <DT><CODE><CODE>record_buffer</CODE></CODE> 
  <DD>Each thread that does a sequential scan allocates a buffer of this size 
  for each table it scans. If you do many sequential scans, you may want to 
  increase this value. 
  <DT><CODE><CODE>query_buffer_size</CODE></CODE> 
  <DD>The initial allocation of the query buffer. If most of your queries are 
  long (like when inserting blobs), you should increase this! 
  <DT><CODE><CODE>safe_show_databases</CODE></CODE> 
  <DD>Don't show databases for which the user doesn't have any database or table 
  privileges. This can improve security if you're concerned about people being 
  able to see what databases other users have. See also 
  <CODE>skip_show_databases</CODE>. 
  <DT><CODE><CODE>server_id</CODE></CODE> 
  <DD>The value of the <CODE>--server-id</CODE> option. 
  <DT><CODE><CODE>skip_locking</CODE></CODE> 
  <DD>Is OFF if <CODE>mysqld</CODE> uses external locking. 
  <DT><CODE><CODE>skip_networking</CODE></CODE> 
  <DD>Is ON if we only allow local (socket) connections. 
  <DT><CODE><CODE>skip_show_databases</CODE></CODE> 
  <DD>This prevents people from doing <CODE>SHOW DATABASES</CODE> if they don't 
  have the <CODE>PROCESS_PRIV</CODE> privilege. This can improve security if 
  you're concerned about people being able to see what databases other users 
  have. See also <CODE>safe_show_databases</CODE>. 
  <DT><CODE><CODE>slow_launch_time</CODE></CODE> 
  <DD>If creating the thread takes longer than this value (in seconds), the 
  <CODE>Slow_launch_threads</CODE> counter will be incremented. 
  <DT><CODE><CODE>socket</CODE></CODE> 
  <DD>The Unix socket used by the server. 
  <DT><CODE><CODE>sort_buffer</CODE></CODE> 
  <DD>Each thread that needs to do a sort allocates a buffer of this size. 
  Increase this value for faster <CODE>ORDER BY</CODE> or <CODE>GROUP BY</CODE> 
  operations. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Problems.html#Temporary_files">21.7 
  Where MySQL Stores Temporary Files</A>. 
  <DT><CODE><CODE>table_cache</CODE></CODE> 
  <DD>The number of open tables for all threads. Increasing this value increases 
  the number of file descriptors that <CODE>mysqld</CODE> requires. 
  <STRONG>MySQL</STRONG> needs two file descriptors for each unique open table. 
  See below for comments on file descriptor limits. You can check if you need to 
  increase the table cache by checking the <CODE>Opened_tables</CODE> variable. 
  See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#SHOW">7.28 
  <CODE>SHOW</CODE> Syntax</A>. If this variable is big and you don't do 
  <CODE>FLUSH TABLES</CODE> a lot (which just forces all tables to be closed and 
  reopenend), then you should increase the value of this variable. Make sure 
  that your operating system can handle the number of open file descriptors 
  implied by the <CODE>table_cache</CODE> setting. If <CODE>table_cache</CODE> 
  is set too high, <STRONG>MySQL</STRONG> may run out of file descriptors and 
  refuse connections, fail to perform queries, and be very unreliable. For 
  information about how the table cache works, see section <A 
  href="file:///D:/work/mysql/manual-split/manual_Performance.html#Table_cache">13.2.5 
  How MySQL Opens and Closes Tables</A>. 
  <DT><CODE><CODE>table_type</CODE></CODE> 
  <DD>The default table type 
  <DT><CODE><CODE>thread_cache_size</CODE></CODE> 
  <DD>How many threads we should keep in a cache for reuse. When a client 
  disconnects, the client's threads are put in the cache if there aren't more 
  than <CODE>thread_cache_size</CODE> threads from before. All new threads are 
  first taken from the cache, and only when the cache is empty is a new thread 
  created. This variable can be increased to improve performance if you have a 
  lot of new connections. (Normally this doesn't give a notable performance 
  improvement if you have a good thread implementation.) By examing the 
  difference between the <CODE>Connections</CODE> and 
  <CODE>Threads_created</CODE> you can see how efficient the current thread 
  cache is for you. 
  <DT><CODE><CODE>thread_concurrency</CODE></CODE> 
  <DD>On Solaris, <CODE>mysqld</CODE> will call 
  <CODE>thr_setconcurrency()</CODE> with this value. 
  <CODE>thr_setconcurrency()</CODE> permits the application to give the threads 
  system a hint for the desired number of threads that should be run at the same 
  time. 
  <DT><CODE><CODE>thread_stack</CODE></CODE> 
  <DD>The stack size for each thread. Many of the limits detected by the 
  <CODE>crash-me</CODE> test are dependent on this value. The default is large 
  enough for normal operation. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Performance.html#Benchmarks">13.7 
  Using Your Own Benchmarks</A>. 
  <DT><CODE><CODE>timezone</CODE></CODE> 
  <DD>The timezone for the server. 
  <DT><CODE><CODE>tmp_table_size</CODE></CODE> 
  <DD>If an in-memory temporary table exceeds this size, <STRONG>MySQL</STRONG> 
  will automatically convert it to an on-disk <CODE>MyISAM</CODE> table. 
  Increase the value of <CODE>tmp_table_size</CODE> if you do many advanced 
  <CODE>GROUP BY</CODE> queries and you have lots of memory. 
  <DT><CODE><CODE>tmpdir</CODE></CODE> 
  <DD>The directory used for temporary files and temporary tables. 
  <DT><CODE><CODE>version</CODE></CODE> 
  <DD>The version number for the server. 
  <DT><CODE><CODE>wait_timeout</CODE></CODE> 
  <DD>The number of seconds the server waits for activity on a connection before 
  closing it. See also <CODE>interactive_timeout</CODE>. </DD></DL>
<P>The manual section that describes tuning <STRONG>MySQL</STRONG> contains some 
information of how to tune the above variables. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Performance.html#Server_parameters">13.2.4 
Tuning Server Parameters</A>. </P>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#SHOW_LOGS" 
name=SHOW_LOGS>7.28.5 <CODE>SHOW LOGS</CODE></A></H3>
<P><CODE>SHOW LOGS</CODE> shows you status information about existing log files. 
It currently only displays information about Berkeley DB log files. </P>
<UL>
  <LI><CODE>File</CODE> shows the full path to the log file 
  <LI><CODE>Type</CODE> shows the type of the log file (<CODE>BDB</CODE> for 
  Berkeley DB log files) 
  <LI><CODE>Status</CODE> shows the status of the log file (<CODE>FREE</CODE> if 
  the file can be removed, or <CODE>IN USE</CODE> if the file is needed by the 
  transaction subsystem) </LI></UL>
<P><A name=IDX968></A><A name=IDX969></A><A name=IDX970></A><A name=IDX971></A>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#SHOW_PROCESSLIST" 
name=SHOW_PROCESSLIST>7.28.6 <CODE>SHOW PROCESSLIST</CODE></A></H3>
<P><CODE>SHOW PROCESSLIST</CODE> shows you which threads are running. You can 
also get this information using the <CODE>mysqladmin processlist</CODE> command. 
If you have the <STRONG>process</STRONG> privilege, you can see all threads. 
Otherwise, you can see only your own threads. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#KILL">7.27 
<CODE>KILL</CODE> Syntax</A>. If you don't use the <CODE>FULL</CODE> option, 
then only the first 100 characters of each query will be shown. </P>
<P>This command is very useful if you get the 'too many connections' error 
message and want to find out what's going on. <STRONG>MySQL</STRONG> reserves 
one extra connection for a client with the <CODE>Process_priv</CODE> privilege 
to ensure that you should always be able to login and check the system (assuming 
you are not giving this privilege to all your users). </P>
<P><A name=IDX972></A>
<H3><A href="file:///D:/work/mysql/manual-split/manual_toc.html#SHOW_GRANTS" 
name=SHOW_GRANTS>7.28.7 <CODE>SHOW GRANTS</CODE></A></H3>
<P><CODE>SHOW GRANTS FOR user</CODE> lists the grant commands that must be 
issued to duplicate the grants for a user. </P><PRE>mysql&gt; SHOW GRANTS FOR root@localhost;
+---------------------------------------------------------------------+
| Grants for root@localhost                                           |
+---------------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION |
+---------------------------------------------------------------------+
</PRE>
<H3><A 
href="file:///D:/work/mysql/manual-split/manual_toc.html#SHOW_CREATE_TABLE" 
name=SHOW_CREATE_TABLE>7.28.8 <CODE>SHOW CREATE TABLE</CODE></A></H3>
<P>Shows a <CODE>CREATE TABLE</CODE> statement that will create the given table: 
</P><PRE>mysql&gt; show create table t\G
*************************** 1. row ***************************
       Table: t
Create Table: CREATE TABLE t (
  id int(11) default NULL auto_increment,
  s char(60) default NULL,
  PRIMARY KEY (id)
) TYPE=MyISAM

</PRE>
<P><CODE>SHOW CREATE TABLE</CODE> will quote table and column names according to 
<CODE>SQL_QUOTE_SHOW_CREATE</CODE> option. section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#SET_OPTION">7.33 
<CODE>SET</CODE> Syntax</A>. </P>
<P><A name=IDX973></A><A name=IDX974></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#EXPLAIN" 
name=EXPLAIN>7.29 <CODE>EXPLAIN</CODE> Syntax (Get Information About a 
<CODE>SELECT</CODE>)</A></H2><PRE>    EXPLAIN tbl_name
or  EXPLAIN SELECT select_options
</PRE>
<P><CODE>EXPLAIN tbl_name</CODE> is a synonym for <CODE>DESCRIBE tbl_name</CODE> 
or <CODE>SHOW COLUMNS FROM tbl_name</CODE>. </P>
<P>When you precede a <CODE>SELECT</CODE> statement with the keyword 
<CODE>EXPLAIN</CODE>, <STRONG>MySQL</STRONG> explains how it would process the 
<CODE>SELECT</CODE>, providing information about how tables are joined and in 
which order. </P>
<P>With the help of <CODE>EXPLAIN</CODE>, you can see when you must add indexes 
to tables to get a faster <CODE>SELECT</CODE> that uses indexes to find the 
records. You can also see if the optimizer joins the tables in an optimal order. 
To force the optimizer to use a specific join order for a <CODE>SELECT</CODE> 
statement, add a <CODE>STRAIGHT_JOIN</CODE> clause. </P>
<P>For non-simple joins, <CODE>EXPLAIN</CODE> returns a row of information for 
each table used in the <CODE>SELECT</CODE> statement. The tables are listed in 
the order they would be read. <STRONG>MySQL</STRONG> resolves all joins using a 
single-sweep multi-join method. This means that <STRONG>MySQL</STRONG> reads a 
row from the first table, then finds a matching row in the second table, then in 
the third table and so on. When all tables are processed, it outputs the 
selected columns and backtracks through the table list until a table is found 
for which there are more matching rows. The next row is read from this table and 
the process continues with the next table. </P>
<P>Output from <CODE>EXPLAIN</CODE> includes the following columns: </P>
<DL compact>
  <DT><CODE>table</CODE> 
  <DD>The table to which the row of output refers. 
  <DT><CODE>type</CODE> 
  <DD>The join type. Information about the various types is given below. 
  <DT><CODE>possible_keys</CODE> 
  <DD>The <CODE>possible_keys</CODE> column indicates which indexes 
  <STRONG>MySQL</STRONG> could use to find the rows in this table. Note that 
  this column is totally independent of the order of the tables. That means that 
  some of the keys in possible_keys may not be usable in practice with the 
  generated table order. If this column is empty, there are no relevant indexes. 
  In this case, you may be able to improve the performance of your query by 
  examining the <CODE>WHERE</CODE> clause to see if it refers to some column or 
  columns that would be suitable for indexing. If so, create an appropriate 
  index and check the query with <CODE>EXPLAIN</CODE> again. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#ALTER_TABLE">7.8 
  <CODE>ALTER TABLE</CODE> Syntax</A>. To see what indexes a table has, use 
  <CODE>SHOW INDEX FROM tbl_name</CODE>. 
  <DT><CODE>key</CODE> 
  <DD>The <CODE>key</CODE> column indicates the key that <STRONG>MySQL</STRONG> 
  actually decided to use. The key is <CODE>NULL</CODE> if no index was chosen. 
  If <STRONG>MySQL</STRONG> chooses the wrong index, you can probably force 
  <STRONG>MySQL</STRONG> to use another index by using <CODE>myisamchk 
  --analyze</CODE>, See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Maintenance.html#myisamchk_syntax">16.1.1 
  <CODE>myisamchk</CODE> Invocation Syntax</A>, or by using <CODE>USE 
  INDEX/IGNORE INDEX</CODE>. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#JOIN">7.20 
  <CODE>JOIN</CODE> Syntax</A>. 
  <DT><CODE>key_len</CODE> 
  <DD>The <CODE>key_len</CODE> column indicates the length of the key that 
  <STRONG>MySQL</STRONG> decided to use. The length is <CODE>NULL</CODE> if the 
  <CODE>key</CODE> is <CODE>NULL</CODE>. Note that this tells us how many parts 
  of a multi-part key <STRONG>MySQL</STRONG> will actually use. 
  <DT><CODE>ref</CODE> 
  <DD>The <CODE>ref</CODE> column shows which columns or constants are used with 
  the <CODE>key</CODE> to select rows from the table. 
  <DT><CODE>rows</CODE> 
  <DD>The <CODE>rows</CODE> column indicates the number of rows 
  <STRONG>MySQL</STRONG> believes it must examine to execute the query. 
  <DT><CODE>Extra</CODE> 
  <DD>This column contains additional information of how <STRONG>MySQL</STRONG> 
  will resolve the query. Here is an explanation of the different text strings 
  that can be found in this column: 
  <DL compact>
    <DT><CODE>Distinct</CODE> 
    <DD><STRONG>MySQL</STRONG> will not continue searching for more rows for the 
    current row combination after it has found the first matching row. 
    <DT><CODE>Not exists</CODE> 
    <DD><STRONG>MySQL</STRONG> was able to do a <CODE>LEFT JOIN</CODE> 
    optimization on the query and will not examine more rows in this table for a 
    row combination after it finds one row that matches the <CODE>LEFT 
    JOIN</CODE> criteria. 
    <DT><CODE><CODE>range checked for each record (index map: #)</CODE></CODE> 
    <DD><STRONG>MySQL</STRONG> didn't find a real good index to use. It will, 
    instead, for each row combination in the preceding tables, do a check on 
    which index to use (if any), and use this index to retrieve the rows from 
    the table. This isn't very fast but is faster than having to do a join 
    without an index. 
    <DT><CODE>Using filesort</CODE> 
    <DD><STRONG>MySQL</STRONG> will need to do an extra pass to find out how to 
    retrieve the rows in sorted order. The sort is done by going through all 
    rows according to the <CODE>join type</CODE> and storing the sort key + 
    pointer to the row for all rows that match the <CODE>WHERE</CODE>. Then the 
    keys are sorted. Finally the rows are retrieved in sorted order. 
    <DT><CODE>Using index</CODE> 
    <DD>The column information is retrieved from the table using only 
    information in the index tree without having to do an additional seek to 
    read the actual row. This can be done when all the used columns for the 
    table are part of the same index. 
    <DT><CODE>Using temporary</CODE> 
    <DD>To resolve the query <STRONG>MySQL</STRONG> will need to create a 
    temporary table to hold the result. This typically happens if you do an 
    <CODE>ORDER BY</CODE> on a different column set than you did a <CODE>GROUP 
    BY</CODE> on. 
    <DT><CODE>Where used</CODE> 
    <DD>A <CODE>WHERE</CODE> clause will be used to restrict which rows will be 
    matched against the next table or sent to the client. If you don't have this 
    information and the table is of type <CODE>ALL</CODE> or <CODE>index</CODE>, 
    you may have something wrong in your query (if you don't intend to 
    fetch/examine all rows from the table). </DD></DL>If you want to get your 
  queries as fast as possible, you should look out for <CODE>Using 
  filesort</CODE> and <CODE>Using temporary</CODE>. </DD></DL>
<P>The different join types are listed below, ordered from best to worst type: 
</P>
<P><A name=IDX975></A><A name=IDX976></A>
<DL compact>
  <DT><CODE>system</CODE> 
  <DD>The table has only one row (= system table). This is a special case of the 
  <CODE>const</CODE> join type. <A name=IDX977></A><A name=IDX978></A>
  <DT><CODE>const</CODE> 
  <DD>The table has at most one matching row, which will be read at the start of 
  the query. Because there is only one row, values from the column in this row 
  can be regarded as constants by the rest of the optimizer. <CODE>const</CODE> 
  tables are very fast as they are read only once! 
  <DT><CODE>eq_ref</CODE> 
  <DD>One row will be read from this table for each combination of rows from the 
  previous tables. This is the best possible join type, other than the 
  <CODE>const</CODE> types. It is used when all parts of an index are used by 
  the join and the index is <CODE>UNIQUE</CODE> or a <CODE>PRIMARY KEY</CODE>. 
  <DT><CODE>ref</CODE> 
  <DD>All rows with matching index values will be read from this table for each 
  combination of rows from the previous tables. <CODE>ref</CODE> is used if the 
  join uses only a leftmost prefix of the key, or if the key is not 
  <CODE>UNIQUE</CODE> or a <CODE>PRIMARY KEY</CODE> (in other words, if the join 
  cannot select a single row based on the key value). If the key that is used 
  matches only a few rows, this join type is good. 
  <DT><CODE>range</CODE> 
  <DD>Only rows that are in a given range will be retrieved, using an index to 
  select the rows. The <CODE>key</CODE> column indicates which index is used. 
  The <CODE>key_len</CODE> contains the longest key part that was used. The 
  <CODE>ref</CODE> column will be NULL for this type. 
  <DT><CODE>index</CODE> 
  <DD>This is the same as <CODE>ALL</CODE>, except that only the index tree is 
  scanned. This is usually faster than <CODE>ALL</CODE>, as the index file is 
  usually smaller than the data file. 
  <DT><CODE>ALL</CODE> 
  <DD>A full table scan will be done for each combination of rows from the 
  previous tables. This is normally not good if the table is the first table not 
  marked <CODE>const</CODE>, and usually <STRONG>very</STRONG> bad in all other 
  cases. You normally can avoid <CODE>ALL</CODE> by adding more indexes, so that 
  the row can be retrieved based on constant values or column values from 
  earlier tables. </DD></DL>
<P>You can get a good indication of how good a join is by multiplying all values 
in the <CODE>rows</CODE> column of the <CODE>EXPLAIN</CODE> output. This should 
tell you roughly how many rows <STRONG>MySQL</STRONG> must examine to execute 
the query. This number is also used when you restrict queries with the 
<CODE>max_join_size</CODE> variable. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Performance.html#Server_parameters">13.2.4 
Tuning Server Parameters</A>. </P>
<P>The following example shows how a <CODE>JOIN</CODE> can be optimized 
progressively using the information provided by <CODE>EXPLAIN</CODE>. </P>
<P>Suppose you have the <CODE>SELECT</CODE> statement shown below, that you 
examine using <CODE>EXPLAIN</CODE>: </P><PRE>EXPLAIN SELECT tt.TicketNumber, tt.TimeIn,
            tt.ProjectReference, tt.EstimatedShipDate,
            tt.ActualShipDate, tt.ClientID,
            tt.ServiceCodes, tt.RepetitiveID,
            tt.CurrentProcess, tt.CurrentDPPerson,
            tt.RecordVolume, tt.DPPrinted, et.COUNTRY,
            et_1.COUNTRY, do.CUSTNAME
        FROM tt, et, et AS et_1, do
        WHERE tt.SubmitTime IS NULL
            AND tt.ActualPC = et.EMPLOYID
            AND tt.AssignedPC = et_1.EMPLOYID
            AND tt.ClientID = do.CUSTNMBR;
</PRE>
<P>For this example, assume that: </P>
<UL>
  <LI>The columns being compared have been declared as follows: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD><STRONG>Table</STRONG> </TD>
      <TD><STRONG>Column</STRONG> </TD>
      <TD><STRONG>Column type</STRONG> </TD>
    <TR>
      <TD><CODE>tt</CODE> </TD>
      <TD><CODE>ActualPC</CODE> </TD>
      <TD><CODE>CHAR(10)</CODE> </TD>
    <TR>
      <TD><CODE>tt</CODE> </TD>
      <TD><CODE>AssignedPC</CODE> </TD>
      <TD><CODE>CHAR(10)</CODE> </TD>
    <TR>
      <TD><CODE>tt</CODE> </TD>
      <TD><CODE>ClientID</CODE> </TD>
      <TD><CODE>CHAR(10)</CODE> </TD>
    <TR>
      <TD><CODE>et</CODE> </TD>
      <TD><CODE>EMPLOYID</CODE> </TD>
      <TD><CODE>CHAR(15)</CODE> </TD>
    <TR>
      <TD><CODE>do</CODE> </TD>
      <TD><CODE>CUSTNMBR</CODE> </TD>
      <TD><CODE>CHAR(15)</CODE> </TD></TR></TBODY></TABLE>
  <LI>The tables have the indexes shown below: 
  <TABLE width="100%" border=1>
    <TBODY>
    <TR>
      <TD><STRONG>Table</STRONG> </TD>
      <TD><STRONG>Index</STRONG> </TD>
    <TR>
      <TD><CODE>tt</CODE> </TD>
      <TD><CODE>ActualPC</CODE> </TD>
    <TR>
      <TD><CODE>tt</CODE> </TD>
      <TD><CODE>AssignedPC</CODE> </TD>
    <TR>
      <TD><CODE>tt</CODE> </TD>
      <TD><CODE>ClientID</CODE> </TD>
    <TR>
      <TD><CODE>et</CODE> </TD>
      <TD><CODE>EMPLOYID</CODE> (primary key) </TD>
    <TR>
      <TD><CODE>do</CODE> </TD>
      <TD><CODE>CUSTNMBR</CODE> (primary key) </TD></TR></TBODY></TABLE>
  <LI>The <CODE>tt.ActualPC</CODE> values aren't evenly distributed. </LI></UL>
<P>Initially, before any optimizations have been performed, the 
<CODE>EXPLAIN</CODE> statement produces the following information: </P><PRE>table type possible_keys                key  key_len ref  rows  Extra
et    ALL  PRIMARY                      NULL NULL    NULL 74
do    ALL  PRIMARY                      NULL NULL    NULL 2135
et_1  ALL  PRIMARY                      NULL NULL    NULL 74
tt    ALL  AssignedPC,ClientID,ActualPC NULL NULL    NULL 3872
      range checked for each record (key map: 35)
</PRE>
<P>Because <CODE>type</CODE> is <CODE>ALL</CODE> for each table, this output 
indicates that <STRONG>MySQL</STRONG> is doing a full join for all tables! This 
will take quite a long time, as the product of the number of rows in each table 
must be examined! For the case at hand, this is <CODE>74 * 2135 * 74 * 3872 = 
45,268,558,720</CODE> rows. If the tables were bigger, you can only imagine how 
long it would take. </P>
<P>One problem here is that <STRONG>MySQL</STRONG> can't (yet) use indexes on 
columns efficiently if they are declared differently. In this context, 
<CODE>VARCHAR</CODE> and <CODE>CHAR</CODE> are the same unless they are declared 
as different lengths. Because <CODE>tt.ActualPC</CODE> is declared as 
<CODE>CHAR(10)</CODE> and <CODE>et.EMPLOYID</CODE> is declared as 
<CODE>CHAR(15)</CODE>, there is a length mismatch. </P>
<P>To fix this disparity between column lengths, use <CODE>ALTER TABLE</CODE> to 
lengthen <CODE>ActualPC</CODE> from 10 characters to 15 characters: </P><PRE>mysql&gt; ALTER TABLE tt MODIFY ActualPC VARCHAR(15);
</PRE>
<P>Now <CODE>tt.ActualPC</CODE> and <CODE>et.EMPLOYID</CODE> are both 
<CODE>VARCHAR(15)</CODE>. Executing the <CODE>EXPLAIN</CODE> statement again 
produces this result: </P><PRE>table type   possible_keys   key     key_len ref         rows    Extra
tt    ALL    AssignedPC,ClientID,ActualPC NULL NULL NULL 3872    where used
do    ALL    PRIMARY         NULL    NULL    NULL        2135
      range checked for each record (key map: 1)
et_1  ALL    PRIMARY         NULL    NULL    NULL        74
      range checked for each record (key map: 1)
et    eq_ref PRIMARY         PRIMARY 15      tt.ActualPC 1
</PRE>
<P>This is not perfect, but is much better (the product of the <CODE>rows</CODE> 
values is now less by a factor of 74). This version is executed in a couple of 
seconds. </P>
<P>A second alteration can be made to eliminate the column length mismatches for 
the <CODE>tt.AssignedPC = et_1.EMPLOYID</CODE> and <CODE>tt.ClientID = 
do.CUSTNMBR</CODE> comparisons: </P><PRE>mysql&gt; ALTER TABLE tt MODIFY AssignedPC VARCHAR(15),
                      MODIFY ClientID   VARCHAR(15);
</PRE>
<P>Now <CODE>EXPLAIN</CODE> produces the output shown below: </P><PRE>table type   possible_keys   key     key_len ref            rows     Extra
et    ALL    PRIMARY         NULL    NULL    NULL           74
tt    ref    AssignedPC,ClientID,ActualPC ActualPC 15 et.EMPLOYID 52 where used
et_1  eq_ref PRIMARY         PRIMARY 15      tt.AssignedPC  1
do    eq_ref PRIMARY         PRIMARY 15      tt.ClientID    1
</PRE>
<P>This is almost as good as it can get. </P>
<P>The remaining problem is that, by default, <STRONG>MySQL</STRONG> assumes 
that values in the <CODE>tt.ActualPC</CODE> column are evenly distributed, and 
that isn't the case for the <CODE>tt</CODE> table. Fortunately, it is easy to 
tell <STRONG>MySQL</STRONG> about this: </P><PRE>shell&gt; myisamchk --analyze PATH_TO_MYSQL_DATABASE/tt
shell&gt; mysqladmin refresh
</PRE>
<P>Now the join is perfect, and <CODE>EXPLAIN</CODE> produces this result: </P><PRE>table type   possible_keys   key     key_len ref            rows    Extra
tt    ALL    AssignedPC,ClientID,ActualPC NULL NULL NULL    3872    where used
et    eq_ref PRIMARY         PRIMARY 15      tt.ActualPC    1
et_1  eq_ref PRIMARY         PRIMARY 15      tt.AssignedPC  1
do    eq_ref PRIMARY         PRIMARY 15      tt.ClientID    1
</PRE>
<P>Note that the <CODE>rows</CODE> column in the output from 
<CODE>EXPLAIN</CODE> is an educated guess from the <STRONG>MySQL</STRONG> join 
optimizer. To optimize a query, you should check if the numbers are even close 
to the truth. If not, you may get better performance by using 
<CODE>STRAIGHT_JOIN</CODE> in your <CODE>SELECT</CODE> statement and trying to 
list the tables in a different order in the <CODE>FROM</CODE> clause. </P>
<P><A name=IDX979></A><A name=IDX980></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#DESCRIBE" 
name=DESCRIBE>7.30 <CODE>DESCRIBE</CODE> Syntax (Get Information About 
Columns)</A></H2><PRE>{DESCRIBE | DESC} tbl_name {col_name | wild}
</PRE>
<P><CODE>DESCRIBE</CODE> provides information about a table's columns. 
<CODE>col_name</CODE> may be a column name or a string containing the SQL 
<SAMP>`%'</SAMP> and <SAMP>`_'</SAMP> wild-card characters. </P>
<P>If the column types are different than you expect them to be based on a 
<CODE>CREATE TABLE</CODE> statement, note that <STRONG>MySQL</STRONG> sometimes 
changes column types. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Silent_column_changes">7.7.1 
Silent Column Specification Changes</A>. </P>
<P><A name=IDX981></A><A name=IDX982></A>This statement is provided for Oracle 
compatibility. </P>
<P>The <CODE>SHOW</CODE> statement provides similar information. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#SHOW">7.28 
<CODE>SHOW</CODE> Syntax</A>. </P>
<P><A name=IDX983></A><A name=IDX984></A><A name=IDX985></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#COMMIT" 
name=COMMIT>7.31 <CODE>BEGIN/COMMIT/ROLLBACK</CODE> Syntax</A></H2>
<P>By default, <STRONG>MySQL</STRONG> runs in <CODE>autocommit</CODE> mode. This 
means that as soon as you execute an update, <STRONG>MySQL</STRONG> will store 
the update on disk. </P>
<P>If you are using transactions safe tables (like <CODE>BDB</CODE>, 
<CODE>InnoDB</CODE> or <CODE>GEMINI</CODE>), you can put <STRONG>MySQL</STRONG> 
into non-<CODE>autocommit</CODE> mode with the following command: </P><PRE>SET AUTOCOMMIT=0
</PRE>
<P>After this you must use <CODE>COMMIT</CODE> to store your changes to disk or 
<CODE>ROLLBACK</CODE> if you want to ignore the changes you have made since the 
beginning of your transaction. </P>
<P>If you want to switch from <CODE>AUTOCOMMIT</CODE> mode for one series of 
statements, you can use the <CODE>BEGIN</CODE> or <CODE>BEGIN WORK</CODE> 
statement: </P><PRE>BEGIN;
SELECT @A:=SUM(salary) FROM table1 WHERE type=1;
UPDATE table2 SET summmary=@A WHERE type=1;
COMMIT;
</PRE>
<P>Note that if you are using non-transaction-safe tables, the changes will be 
stored at once, independent of the status of the <CODE>autocommit</CODE> mode. 
</P>
<P>If you do a <CODE>ROLLBACK</CODE> when you have updated a non-transactional 
table you will get an error (<CODE>ER_WARNING_NOT_COMPLETE_ROLLBACK</CODE>) as a 
warning. All transactional safe tables will be restored but any 
non-transactional table will not change. </P>
<P>If you are using <CODE>BEGIN</CODE> or <CODE>SET AUTOCOMMIT=0</CODE>, you 
should use the <STRONG>MySQL</STRONG> binary log for backups instead of the 
older update log. Transactions are stored in the binary log in one chunk, upon 
<CODE>COMMIT</CODE>, to ensure that transactions which are rolled back are not 
stored. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Log_files.html#Binary_log">23.4 
The Binary Log</A>. </P>
<P>The following commands automatically end a transaction (as if you had done a 
<CODE>COMMIT</CODE> before executing the command): </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><CODE>ALTER TABLE</CODE> </TD>
    <TD><CODE>BEGIN</CODE> </TD>
    <TD><CODE>CREATE INDEX</CODE> </TD>
  <TR>
    <TD><CODE>DROP DATABASE</CODE> </TD>
    <TD><CODE>DROP TABLE</CODE> </TD>
    <TD><CODE>RENAME TABLE</CODE> </TD>
  <TR>
    <TD><CODE>TRUNCATE</CODE> </TD></TR></TBODY></TABLE>
<P>You can change the isolation level for transactions with <CODE>SET 
TRANSACTION ISOLATION LEVEL ...</CODE>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#SET_TRANSACTION">7.34 
<CODE>SET TRANSACTION</CODE> Syntax</A>. </P>
<P><A name=IDX986></A><A name=IDX987></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#LOCK_TABLES" 
name=LOCK_TABLES>7.32 <CODE>LOCK TABLES/UNLOCK TABLES</CODE> Syntax</A></H2><PRE>LOCK TABLES tbl_name [AS alias] {READ | [READ LOCAL] | [LOW_PRIORITY] WRITE}
            [, tbl_name {READ | [LOW_PRIORITY] WRITE} ...]
...
UNLOCK TABLES
</PRE>
<P><CODE>LOCK TABLES</CODE> locks tables for the current thread. <CODE>UNLOCK 
TABLES</CODE> releases any locks held by the current thread. All tables that are 
locked by the current thread are automatically unlocked when the thread issues 
another <CODE>LOCK TABLES</CODE>, or when the connection to the server is 
closed. </P>
<P>If a thread obtains a <CODE>READ</CODE> lock on a table, that thread (and all 
other threads) can only read from the table. If a thread obtains a 
<CODE>WRITE</CODE> lock on a table, then only the thread holding the lock can 
<CODE>READ</CODE> from or <CODE>WRITE</CODE> to the table. Other threads are 
blocked. </P>
<P>The difference between <CODE>READ LOCAL</CODE> and <CODE>READ</CODE> is that 
<CODE>READ LOCAL</CODE> allows non-conflicting <CODE>INSERT</CODE> statements to 
execute while the lock is held. This can't however be used if you are going to 
manipulate the database files outside <STRONG>MySQL</STRONG> while you hold the 
lock. </P>
<P>Each thread waits (without timing out) until it obtains all the locks it has 
requested. </P>
<P><CODE>WRITE</CODE> locks normally have higher priority than <CODE>READ</CODE> 
locks, to ensure that updates are processed as soon as possible. This means that 
if one thread obtains a <CODE>READ</CODE> lock and then another thread requests 
a <CODE>WRITE</CODE> lock, subsequent <CODE>READ</CODE> lock requests will wait 
until the <CODE>WRITE</CODE> thread has gotten the lock and released it. You can 
use <CODE>LOW_PRIORITY WRITE</CODE> locks to allow other threads to obtain 
<CODE>READ</CODE> locks while the thread is waiting for the <CODE>WRITE</CODE> 
lock. You should only use <CODE>LOW_PRIORITY WRITE</CODE> locks if you are sure 
that there will eventually be a time when no threads will have a 
<CODE>READ</CODE> lock. </P>
<P><CODE>LOCK TABLES</CODE> and <CODE>UNLOCK TABLES</CODE> both commits any 
active transactions. </P>
<P>When you use <CODE>LOCK TABLES</CODE>, you must lock all tables that you are 
going to use and you must use the same alias that you are going to use in your 
queries! If you are using a table multiple times in a query (with aliases), you 
must get a lock for each alias! This policy ensures that table locking is 
deadlock free and makes the locking code smaller, simpler and much faster. </P>
<P>Note that you should <STRONG>NOT</STRONG> lock any tables that you are using 
with <CODE>INSERT DELAYED</CODE>. This is because that in this case the 
<CODE>INSERT</CODE> is done by a separate thread. </P>
<P>Normally, you don't have to lock tables, as all single <CODE>UPDATE</CODE> 
statements are atomic; no other thread can interfere with any other currently 
executing SQL statement. There are a few cases when you would like to lock 
tables anyway: </P>
<UL>
  <LI>If you are going to run many operations on a bunch of tables, it's much 
  faster to lock the tables you are going to use. The downside is, of course, 
  that no other thread can update a <CODE>READ</CODE>-locked table and no other 
  thread can read a <CODE>WRITE</CODE>-locked table. 
  <LI>If you are using a table handler in <STRONG>MySQL</STRONG> that doesn't 
  support transactions, you must use <CODE>LOCK TABLES</CODE> if you want to 
  ensure that no other thread comes between a <CODE>SELECT</CODE> and an 
  <CODE>UPDATE</CODE>. The example shown below requires <CODE>LOCK TABLES</CODE> 
  in order to execute safely: <PRE>mysql&gt; LOCK TABLES trans READ, customer WRITE;
mysql&gt; select sum(value) from trans where customer_id= some_id;
mysql&gt; update customer set total_value=sum_from_previous_statement
           where customer_id=some_id;
mysql&gt; UNLOCK TABLES;
</PRE>Without <CODE>LOCK TABLES</CODE>, there is a chance that another thread 
  might insert a new row in the <CODE>trans</CODE> table between execution of 
  the <CODE>SELECT</CODE> and <CODE>UPDATE</CODE> statements. </LI></UL>
<P>By using incremental updates (<CODE>UPDATE customer SET 
value=value+new_value</CODE>) or the <CODE>LAST_INSERT_ID()</CODE> function, you 
can avoid using <CODE>LOCK TABLES</CODE> in many cases. </P>
<P>You can also solve some cases by using the user-level lock functions 
<CODE>GET_LOCK()</CODE> and <CODE>RELEASE_LOCK()</CODE>. These locks are saved 
in a hash table in the server and implemented with 
<CODE>pthread_mutex_lock()</CODE> and <CODE>pthread_mutex_unlock()</CODE> for 
high speed. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#Miscellaneous_functions">7.4.12 
Miscellaneous Functions</A>. </P>
<P>See section <A 
href="file:///D:/work/mysql/manual-split/manual_Performance.html#Internal_locking">13.2.9 
How MySQL Locks Tables</A>, for more information on locking policy. </P>
<P>You can also lock all tables in all databases with read locks with the 
<CODE>FLUSH TABLES WITH READ LOCK</CODE> command. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#FLUSH">7.26 
<CODE>FLUSH</CODE> Syntax</A>. This is very convenient way to get backups if you 
have a file system, like Veritas, that can take snapshots in time. </P>
<P><STRONG>NOTE</STRONG>: <CODE>LOCK TABLES</CODE> is not transaction-safe and 
will automatically commit any active transactions before attempting to lock the 
tables. </P>
<P><A name=IDX988></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#SET_OPTION" 
name=SET_OPTION>7.33 <CODE>SET</CODE> Syntax</A></H2><PRE>SET [OPTION] SQL_VALUE_OPTION= value, ...
</PRE>
<P><CODE>SET OPTION</CODE> sets various options that affect the operation of the 
server or your client. Any option you set remains in effect until the current 
session ends, or until you set the option to a different value. </P>
<DL compact>
  <DT><CODE>CHARACTER SET character_set_name | DEFAULT</CODE> 
  <DD>This maps all strings from and to the client with the given mapping. 
  Currently the only option for <CODE>character_set_name</CODE> is 
  <CODE>cp1251_koi8</CODE>, but you can easily add new mappings by editing the 
  <TT>`sql/convert.cc'</TT> file in the <STRONG>MySQL</STRONG> source 
  distribution. The default mapping can be restored by using a 
  <CODE>character_set_name</CODE> value of <CODE>DEFAULT</CODE>. Note that the 
  syntax for setting the <CODE>CHARACTER SET</CODE> option differs from the 
  syntax for setting the other options. 
  <DT><CODE>PASSWORD = PASSWORD('some password')</CODE> 
  <DD><A name=IDX989></A>Set the password for the current user. Any 
  non-anonymous user can change his own password! 
  <DT><CODE>PASSWORD FOR user = PASSWORD('some password')</CODE> 
  <DD>Set the password for a specific user on the current server host. Only a 
  user with access to the <CODE>mysql</CODE> database can do this. The user 
  should be given in <CODE>user@hostname</CODE> format, where <CODE>user</CODE> 
  and <CODE>hostname</CODE> are exactly as they are listed in the 
  <CODE>User</CODE> and <CODE>Host</CODE> columns of the <CODE>mysql.user</CODE> 
  table entry. For example, if you had an entry with <CODE>User</CODE> and 
  <CODE>Host</CODE> fields of <CODE>'bob'</CODE> and <CODE>'%.loc.gov'</CODE>, 
  you would write: <PRE>mysql&gt; SET PASSWORD FOR bob@"%.loc.gov" = PASSWORD("newpass");

or

mysql&gt; UPDATE mysql.user SET password=PASSWORD("newpass") where user="bob' and host="%.loc.gov";
</PRE>
  <DT><CODE>SQL_AUTO_IS_NULL = 0 | 1</CODE> 
  <DD>If set to <CODE>1</CODE> (default) then one can find the last inserted row 
  for a table with an auto_increment row with the following construct: 
  <CODE>WHERE auto_increment_column IS NULL</CODE>. This is used by some ODBC 
  programs like Access. 
  <DT><CODE>AUTOCOMMIT= 0 | 1</CODE> 
  <DD>If set to <CODE>1</CODE> all changes to a table will be done at once. To 
  start a multi-command transaction, you have to use the <CODE>BEGIN</CODE> 
  statement. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#COMMIT">7.31 
  <CODE>BEGIN/COMMIT/ROLLBACK</CODE> Syntax</A>. If set to <CODE>0</CODE> you 
  have to use <CODE>COMMIT</CODE> / <CODE>ROLLBACK</CODE> to accept/revoke that 
  transaction. See section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#COMMIT">7.31 
  <CODE>BEGIN/COMMIT/ROLLBACK</CODE> Syntax</A>. Note that when you change from 
  not <CODE>AUTOCOMMIT</CODE> mode to <CODE>AUTOCOMMIT</CODE> mode, 
  <STRONG>MySQL</STRONG> will do an automatic <CODE>COMMIT</CODE> on any open 
  transactions. 
  <DT><CODE>SQL_BIG_TABLES = 0 | 1</CODE> 
  <DD><A name=IDX990></A>If set to <CODE>1</CODE>, all temporary tables are 
  stored on disk rather than in memory. This will be a little slower, but you 
  will not get the error <CODE>The table tbl_name is full</CODE> for big 
  <CODE>SELECT</CODE> operations that require a large temporary table. The 
  default value for a new connection is <CODE>0</CODE> (that is, use in-memory 
  temporary tables). 
  <DT><CODE>SQL_BIG_SELECTS = 0 | 1</CODE> 
  <DD>If set to <CODE>0</CODE>, <STRONG>MySQL</STRONG> will abort if a 
  <CODE>SELECT</CODE> is attempted that probably will take a very long time. 
  This is useful when an inadvisable <CODE>WHERE</CODE> statement has been 
  issued. A big query is defined as a <CODE>SELECT</CODE> that probably will 
  have to examine more than <CODE>max_join_size</CODE> rows. The default value 
  for a new connection is <CODE>1</CODE> (which will allow all 
  <CODE>SELECT</CODE> statements). 
  <DT><CODE>SQL_BUFFER_RESULT = 0 | 1</CODE> 
  <DD><CODE>SQL_BUFFER_RESULT</CODE> will force the result from 
  <CODE>SELECT</CODE>'s to be put into a temporary table. This will help 
  <STRONG>MySQL</STRONG> free the table locks early and will help in cases where 
  it takes a long time to send the result set to the client. 
  <DT><CODE>SQL_LOW_PRIORITY_UPDATES = 0 | 1</CODE> 
  <DD>If set to <CODE>1</CODE>, all <CODE>INSERT</CODE>, <CODE>UPDATE</CODE>, 
  <CODE>DELETE</CODE>, and and <CODE>LOCK TABLE WRITE</CODE> statements wait 
  until there is no pending <CODE>SELECT</CODE> or <CODE>LOCK TABLE READ</CODE> 
  on the affected table. 
  <DT><CODE>SQL_MAX_JOIN_SIZE = value | DEFAULT</CODE> 
  <DD>Don't allow <CODE>SELECT</CODE>s that will probably need to examine more 
  than <CODE>value</CODE> row combinations. By setting this value, you can catch 
  <CODE>SELECT</CODE>s where keys are not used properly and that would probably 
  take a long time. Setting this to a value other than <CODE>DEFAULT</CODE> will 
  reset the <CODE>SQL_BIG_SELECTS</CODE> flag. If you set the 
  <CODE>SQL_BIG_SELECTS</CODE> flag again, the <CODE>SQL_MAX_JOIN_SIZE</CODE> 
  variable will be ignored. You can set a default value for this variable by 
  starting <CODE>mysqld</CODE> with <CODE>-O max_join_size=#</CODE>. 
  <DT><CODE>SQL_SAFE_MODE = 0 | 1</CODE> 
  <DD>If set to <CODE>1</CODE>, <STRONG>MySQL</STRONG> will abort if an 
  <CODE>UPDATE</CODE> or <CODE>DELETE</CODE> is attempted that doesn't use a key 
  or <CODE>LIMIT</CODE> in the <CODE>WHERE</CODE> clause. This makes it possible 
  to catch wrong updates when creating SQL commands by hand. 
  <DT><CODE>SQL_SELECT_LIMIT = value | DEFAULT</CODE> 
  <DD>The maximum number of records to return from <CODE>SELECT</CODE> 
  statements. If a <CODE>SELECT</CODE> has a <CODE>LIMIT</CODE> clause, the 
  <CODE>LIMIT</CODE> takes precedence over the value of 
  <CODE>SQL_SELECT_LIMIT</CODE>. The default value for a new connection is 
  ``unlimited.'' If you have changed the limit, the default value can be 
  restored by using a <CODE>SQL_SELECT_LIMIT</CODE> value of 
  <CODE>DEFAULT</CODE>. 
  <DT><CODE>SQL_LOG_OFF = 0 | 1</CODE> 
  <DD>If set to <CODE>1</CODE>, no logging will be done to the standard log for 
  this client, if the client has the <STRONG>process</STRONG> privilege. This 
  does not affect the update log! 
  <DT><CODE>SQL_LOG_UPDATE = 0 | 1</CODE> 
  <DD>If set to <CODE>0</CODE>, no logging will be done to the update log for 
  the client, if the client has the <STRONG>process</STRONG> privilege. This 
  does not affect the standard log! 
  <DT><CODE>SQL_QUOTE_SHOW_CREATE = 0 | 1</CODE> 
  <DD>If set to <CODE>1</CODE>, <CODE>SHOW CREATE TABLE</CODE> will quote table 
  and column names. This is <STRONG>on</STRONG> by default, for replication of 
  tables with fancy column names to work. section <A 
  href="file:///D:/work/mysql/manual-split/manual_Reference.html#SHOW_CREATE_TABLE">7.28.8 
  <CODE>SHOW CREATE TABLE</CODE></A>. 
  <DT><CODE>TIMESTAMP = timestamp_value | DEFAULT</CODE> 
  <DD>Set the time for this client. This is used to get the original timestamp 
  if you use the update log to restore rows. 
  <DT><CODE>LAST_INSERT_ID = #</CODE> 
  <DD>Set the value to be returned from <CODE>LAST_INSERT_ID()</CODE>. This is 
  stored in the update log when you use <CODE>LAST_INSERT_ID()</CODE> in a 
  command that updates a table. 
  <DT><CODE>INSERT_ID = #</CODE> 
  <DD>Set the value to be used by the following <CODE>INSERT</CODE> or 
  <CODE>ALTER TABLE</CODE> command when inserting an <CODE>AUTO_INCREMENT</CODE> 
  value. This is mainly used with the update log. </DD></DL>
<P><A name=IDX991></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#SET_TRANSACTION" 
name=SET_TRANSACTION>7.34 <CODE>SET TRANSACTION</CODE> Syntax</A></H2><PRE>SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL
[READ UNCOMMITTED |&nbsp;READ COMMITTED | REPEATABLE READ | SERIALIZABLE]
</PRE>
<P>Sets the transaction isolation level for the global, whole session or the 
next transaction. </P>
<P>The default behavior is to set the isolation level for the next (not started) 
transaction. </P>
<P>If you set the <CODE>GLOBAL</CODE> privilege it will affect all new created 
threads. You will need the <CODE>PROCESS</CODE> privilege to do do this. </P>
<P>Setting the <CODE>SESSION</CODE> privilege will affect the following and all 
future transactions. </P>
<P>You can set the default isolation level for <CODE>mysqld</CODE> with 
<CODE>--transaction-isolation=...</CODE>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Installing.html#Command-line_options">4.16.4 
mysqld Command-line Options</A>. </P>
<P><A name=IDX992></A><A name=IDX993></A><A name=IDX994></A><A 
name=IDX995></A><A name=IDX996></A></P>
<P><A name=IDX997></A><A name=IDX998></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#GRANT" 
name=GRANT>7.35 <CODE>GRANT</CODE> and <CODE>REVOKE</CODE> Syntax</A></H2><PRE>GRANT priv_type [(column_list)] [, priv_type [(column_list)] ...]
    ON {tbl_name | * | *.* | db_name.*}
    TO user_name [IDENTIFIED BY 'password']
        [, user_name [IDENTIFIED BY 'password'] ...]
    [WITH GRANT OPTION]

REVOKE priv_type [(column_list)] [, priv_type [(column_list)] ...]
    ON {tbl_name | * | *.* | db_name.*}
    FROM user_name [, user_name ...]
</PRE>
<P><CODE>GRANT</CODE> is implemented in <STRONG>MySQL</STRONG> Version 3.22.11 
or later. For earlier <STRONG>MySQL</STRONG> versions, the <CODE>GRANT</CODE> 
statement does nothing. </P>
<P>The <CODE>GRANT</CODE> and <CODE>REVOKE</CODE> commands allow system 
administrators to create users and grant and revoke rights to 
<STRONG>MySQL</STRONG> users at four privilege levels: </P>
<DL compact>
  <DT><STRONG>Global level</STRONG> 
  <DD>Global privileges apply to all databases on a given server. These 
  privileges are stored in the <CODE>mysql.user</CODE> table. 
  <DT><STRONG>Database level</STRONG> 
  <DD>Database privileges apply to all tables in a given database. These 
  privileges are stored in the <CODE>mysql.db</CODE> and <CODE>mysql.host</CODE> 
  tables. 
  <DT><STRONG>Table level</STRONG> 
  <DD>Table privileges apply to all columns in a given table. These privileges 
  are stored in the <CODE>mysql.tables_priv</CODE> table. 
  <DT><STRONG>Column level</STRONG> 
  <DD>Column privileges apply to single columns in a given table. These 
  privileges are stored in the <CODE>mysql.columns_priv</CODE> table. </DD></DL>
<P>If you give a grant for a users that doesn't exists, that user is created. 
For examples of how <CODE>GRANT</CODE> works, see section <A 
href="file:///D:/work/mysql/manual-split/manual_Privilege_system.html#Adding_users">6.14 
Adding New Users to MySQL</A>. </P>
<P>For the <CODE>GRANT</CODE> and <CODE>REVOKE</CODE> statements, 
<CODE>priv_type</CODE> may be specified as any of the following: </P><PRE>ALL PRIVILEGES      FILE                RELOAD
ALTER               INDEX               SELECT
CREATE              INSERT              SHUTDOWN
DELETE              PROCESS             UPDATE
DROP                REFERENCES          USAGE
</PRE>
<P><CODE>ALL</CODE> is a synonym for <CODE>ALL PRIVILEGES</CODE>. 
<CODE>REFERENCES</CODE> is not yet implemented. <CODE>USAGE</CODE> is currently 
a synonym for ``no privileges.'' It can be used when you want to create a user 
that has no privileges. </P>
<P>To revoke the <STRONG>grant</STRONG> privilege from a user, use a 
<CODE>priv_type</CODE> value of <CODE>GRANT OPTION</CODE>: </P><PRE>REVOKE GRANT OPTION ON ... FROM ...;
</PRE>
<P>The only <CODE>priv_type</CODE> values you can specify for a table are 
<CODE>SELECT</CODE>, <CODE>INSERT</CODE>, <CODE>UPDATE</CODE>, 
<CODE>DELETE</CODE>, <CODE>CREATE</CODE>, <CODE>DROP</CODE>, <CODE>GRANT</CODE>, 
<CODE>INDEX</CODE>, and <CODE>ALTER</CODE>. </P>
<P>The only <CODE>priv_type</CODE> values you can specify for a column (that is, 
when you use a <CODE>column_list</CODE> clause) are <CODE>SELECT</CODE>, 
<CODE>INSERT</CODE>, and <CODE>UPDATE</CODE>. </P>
<P>You can set global privileges by using <CODE>ON *.*</CODE> syntax. You can 
set database privileges by using <CODE>ON db_name.*</CODE> syntax. If you 
specify <CODE>ON *</CODE> and you have a current database, you will set the 
privileges for that database. (<STRONG>WARNING:</STRONG> If you specify <CODE>ON 
*</CODE> and you <EM>don't</EM> have a current database, you will affect the 
global privileges!) </P>
<P>In order to accommodate granting rights to users from arbitrary hosts, 
<STRONG>MySQL</STRONG> supports specifying the <CODE>user_name</CODE> value in 
the form <CODE>user@host</CODE>. If you want to specify a <CODE>user</CODE> 
string containing special characters (such as <SAMP>`-'</SAMP>), or a 
<CODE>host</CODE> string containing special characters or wild-card characters 
(such as <SAMP>`%'</SAMP>), you can quote the user or host name (for example, 
<CODE>'test-user'@'test-hostname'</CODE>). </P>
<P>You can specify wild cards in the hostname. For example, 
<CODE>user@"%.loc.gov"</CODE> applies to <CODE>user</CODE> for any host in the 
<CODE>loc.gov</CODE> domain, and <CODE>user@"144.155.166.%"</CODE> applies to 
<CODE>user</CODE> for any host in the <CODE>144.155.166</CODE> class C subnet. 
</P>
<P>The simple form <CODE>user</CODE> is a synonym for <CODE>user@"%"</CODE>. 
<STRONG>NOTE:</STRONG> If you allow anonymous users to connect to the 
<STRONG>MySQL</STRONG> server (which is the default), you should also add all 
local users as <CODE>user@localhost</CODE> because otherwise the anonymous user 
entry for the local host in the <CODE>mysql.user</CODE> table will be used when 
the user tries to log into the <STRONG>MySQL</STRONG> server from the local 
machine! Anonymous users are defined by inserting entries with 
<CODE>User=''</CODE> into the <CODE>mysql.user</CODE> table. You can verify if 
this applies to you by executing this query: </P><PRE>mysql&gt; SELECT Host,User FROM mysql.user WHERE User='';
</PRE>
<P>For the moment, <CODE>GRANT</CODE> only supports host, table, database, and 
column names up to 60 characters long. A user name can be up to 16 characters. 
</P>
<P>The privileges for a table or column are formed from the logical OR of the 
privileges at each of the four privilege levels. For example, if the 
<CODE>mysql.user</CODE> table specifies that a user has a global 
<STRONG>select</STRONG> privilege, this can't be denied by an entry at the 
database, table, or column level. </P>
<P>The privileges for a column can be calculated as follows: </P><PRE>global privileges
OR (database privileges AND host privileges)
OR table privileges
OR column privileges
</PRE>
<P>In most cases, you grant rights to a user at only one of the privilege 
levels, so life isn't normally as complicated as above. The details of the 
privilege-checking procedure are presented in section <A 
href="file:///D:/work/mysql/manual-split/manual_Privilege_system.html#Privilege_system">6 
The MySQL Access Privilege System</A>. </P>
<P>If you grant privileges for a user/hostname combination that does not exist 
in the <CODE>mysql.user</CODE> table, an entry is added and remains there until 
deleted with a <CODE>DELETE</CODE> command. In other words, <CODE>GRANT</CODE> 
may create <CODE>user</CODE> table entries, but <CODE>REVOKE</CODE> will not 
remove them; you must do that explicitly using <CODE>DELETE</CODE>. </P>
<P><A name=IDX999></A>In <STRONG>MySQL</STRONG> Version 3.22.12 or later, if a 
new user is created or if you have global grant privileges, the user's password 
will be set to the password specified by the <CODE>IDENTIFIED BY</CODE> clause, 
if one is given. If the user already had a password, it is replaced by the new 
one. </P>
<P><STRONG>WARNING:</STRONG> If you create a new user but do not specify an 
<CODE>IDENTIFIED BY</CODE> clause, the user has no password. This is insecure. 
</P>
<P>Passwords can also be set with the <CODE>SET PASSWORD</CODE> command. See 
section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#SET_OPTION">7.33 
<CODE>SET</CODE> Syntax</A>. </P>
<P>If you grant privileges for a database, an entry in the <CODE>mysql.db</CODE> 
table is created if needed. When all privileges for the database have been 
removed with <CODE>REVOKE</CODE>, this entry is deleted. </P>
<P>If a user doesn't have any privileges on a table, the table is not displayed 
when the user requests a list of tables (for example, with a <CODE>SHOW 
TABLES</CODE> statement). </P>
<P>The <CODE>WITH GRANT OPTION</CODE> clause gives the user the ability to give 
to other users any privileges the user has at the specified privilege level. You 
should be careful to whom you give the <STRONG>grant</STRONG> privilege, as two 
users with different privileges may be able to join privileges! </P>
<P>You cannot grant another user a privilege you don't have yourself; the 
<STRONG>grant</STRONG> privilege allows you to give away only those privileges 
you possess. </P>
<P>Be aware that when you grant a user the <STRONG>grant</STRONG> privilege at a 
particular privilege level, any privileges the user already possesses (or is 
given in the future!) at that level are also grantable by that user. Suppose you 
grant a user the <STRONG>insert</STRONG> privilege on a database. If you then 
grant the <STRONG>select</STRONG> privilege on the database and specify 
<CODE>WITH GRANT OPTION</CODE>, the user can give away not only the 
<STRONG>select</STRONG> privilege, but also <STRONG>insert</STRONG>. If you then 
grant the <STRONG>update</STRONG> privilege to the user on the database, the 
user can give away the <STRONG>insert</STRONG>, <STRONG>select</STRONG> and 
<STRONG>update</STRONG>. </P>
<P>You should not grant <STRONG>alter</STRONG> privileges to a normal user. If 
you do that, the user can try to subvert the privilege system by renaming 
tables! </P>
<P>Note that if you are using table or column privileges for even one user, the 
server examines table and column privileges for all users and this will slow 
down <STRONG>MySQL</STRONG> a bit. </P>
<P>When <CODE>mysqld</CODE> starts, all privileges are read into memory. 
Database, table, and column privileges take effect at once, and user-level 
privileges take effect the next time the user connects. Modifications to the 
grant tables that you perform using <CODE>GRANT</CODE> or <CODE>REVOKE</CODE> 
are noticed by the server immediately. If you modify the grant tables manually 
(using <CODE>INSERT</CODE>, <CODE>UPDATE</CODE>, etc.), you should execute a 
<CODE>FLUSH PRIVILEGES</CODE> statement or run <CODE>mysqladmin 
flush-privileges</CODE> to tell the server to reload the grant tables. See 
section <A 
href="file:///D:/work/mysql/manual-split/manual_Privilege_system.html#Privilege_changes">6.12 
When Privilege Changes Take Effect</A>. </P>
<P><A name=IDX1000></A>The biggest differences between the ANSI SQL and 
<STRONG>MySQL</STRONG> versions of <CODE>GRANT</CODE> are: </P>
<UL>
  <LI>In <STRONG>MySQL</STRONG> privileges are given for an username + hostname 
  combination and not only for an username. 
  <LI>ANSI SQL doesn't have global or database-level privileges, and ANSI SQL 
  doesn't support all privilege types that <STRONG>MySQL</STRONG> supports. 
  <STRONG>MySQL</STRONG> doesn't support the ANSI SQL <CODE>TRIGGER</CODE>, 
  <CODE>EXECUTE</CODE> or <CODE>UNDER</CODE> privileges. 
  <LI>ANSI SQL privileges are structured in a hierarchal manner. If you remove 
  an user, all privileges the user has granted are revoked. In 
  <STRONG>MySQL</STRONG> the granted privileges are not automatically revoked, 
  but you have to revoke these yourself if needed. 
  <LI>If you in <STRONG>MySQL</STRONG> have the <CODE>INSERT</CODE> grant on 
  only part of the columns in a table, you can execute <CODE>INSERT</CODE> 
  statements on the table; The columns for which you don't have the 
  <CODE>INSERT</CODE> privilege will set to their default values. ANSI SQL 
  requires you to have the <CODE>INSERT</CODE> privilege on all columns. 
  <LI>When you drop a table in ANSI SQL, all privileges for the table are 
  revoked. If you revoke a privilege in ANSI SQL, all privileges that were 
  granted based on this privilege are also revoked. In <STRONG>MySQL</STRONG>, 
  privileges can be dropped only with explicit <CODE>REVOKE</CODE> commands or 
  by manipulating the <STRONG>MySQL</STRONG> grant tables. </LI></UL>
<P><A name=IDX1001></A><A name=IDX1002></A><A name=IDX1003></A><A 
name=IDX1004></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#CREATE_INDEX" 
name=CREATE_INDEX>7.36 <CODE>CREATE INDEX</CODE> Syntax</A></H2><PRE>CREATE [UNIQUE|FULLTEXT] INDEX index_name ON tbl_name (col_name[(length)],... )
</PRE>
<P>The <CODE>CREATE INDEX</CODE> statement doesn't do anything in 
<STRONG>MySQL</STRONG> prior to Version 3.22. In Version 3.22 or later, 
<CODE>CREATE INDEX</CODE> is mapped to an <CODE>ALTER TABLE</CODE> statement to 
create indexes. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#ALTER_TABLE">7.8 
<CODE>ALTER TABLE</CODE> Syntax</A>. </P>
<P>Normally, you create all indexes on a table at the time the table itself is 
created with <CODE>CREATE TABLE</CODE>. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#CREATE_TABLE">7.7 
<CODE>CREATE TABLE</CODE> Syntax</A>. <CODE>CREATE INDEX</CODE> allows you to 
add indexes to existing tables. </P>
<P>A column list of the form <CODE>(col1,col2,...)</CODE> creates a 
multiple-column index. Index values are formed by concatenating the values of 
the given columns. </P>
<P>For <CODE>CHAR</CODE> and <CODE>VARCHAR</CODE> columns, indexes can be 
created that use only part of a column, using <CODE>col_name(length)</CODE> 
syntax. (On <CODE>BLOB</CODE> and <CODE>TEXT</CODE> columns the length is 
required). The statement shown below creates an index using the first 10 
characters of the <CODE>name</CODE> column: </P><PRE>mysql&gt; CREATE INDEX part_of_name ON customer (name(10));
</PRE>
<P>Because most names usually differ in the first 10 characters, this index 
should not be much slower than an index created from the entire 
<CODE>name</CODE> column. Also, using partial columns for indexes can make the 
index file much smaller, which could save a lot of disk space and might also 
speed up <CODE>INSERT</CODE> operations! </P>
<P>Note that you can only add an index on a column that can have 
<CODE>NULL</CODE> values or on a <CODE>BLOB</CODE>/<CODE>TEXT</CODE> column if 
you are using <STRONG>MySQL</STRONG> Version 3.23.2 or newer and are using the 
<CODE>MyISAM</CODE> table type. </P>
<P>For more information about how <STRONG>MySQL</STRONG> uses indexes, see 
section <A 
href="file:///D:/work/mysql/manual-split/manual_Performance.html#MySQL_indexes">13.4 
How MySQL Uses Indexes</A>. </P>
<P><CODE>FULLTEXT</CODE> indexes can index only <CODE>VARCHAR</CODE> and 
<CODE>TEXT</CODE> columns, and only in <CODE>MyISAM</CODE> tables. 
<CODE>FULLTEXT</CODE> indexes are available in <STRONG>MySQL</STRONG> Version 
3.23.23 and later. section <A 
href="file:///D:/work/mysql/manual-split/manual_Fulltext_Search.html#Fulltext_Search">12 
MySQL Full-text Search</A>. </P>
<P><A name=IDX1005></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#DROP_INDEX" 
name=DROP_INDEX>7.37 <CODE>DROP INDEX</CODE> Syntax</A></H2><PRE>DROP INDEX index_name ON tbl_name
</PRE>
<P><CODE>DROP INDEX</CODE> drops the index named <CODE>index_name</CODE> from 
the table <CODE>tbl_name</CODE>. <CODE>DROP INDEX</CODE> doesn't do anything in 
<STRONG>MySQL</STRONG> prior to Version 3.22. In Version 3.22 or later, 
<CODE>DROP INDEX</CODE> is mapped to an <CODE>ALTER TABLE</CODE> statement to 
drop the index. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Reference.html#ALTER_TABLE">7.8 
<CODE>ALTER TABLE</CODE> Syntax</A>. </P>
<P><A name=IDX1006></A><A name=IDX1007></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Comments" 
name=Comments>7.38 Comment Syntax</A></H2>
<P>The <STRONG>MySQL</STRONG> server supports the <CODE># to end of line</CODE>, 
<CODE>-- to end of line</CODE> and <CODE>/* in-line or multiple-line */</CODE> 
comment styles: </P><PRE>mysql&gt; select 1+1;     # This comment continues to the end of line
mysql&gt; select 1+1;     -- This comment continues to the end of line
mysql&gt; select 1 /* this is an in-line comment */ + 1;
mysql&gt; select 1+
/*
this is a
multiple-line comment
*/
1;
</PRE>
<P>Note that the <CODE>--</CODE> comment style requires you to have at least one 
space after the <CODE>--</CODE>! </P>
<P>Although the server understands the comment syntax just described, there are 
some limitations on the way that the <CODE>mysql</CODE> client parses <CODE>/* 
... */</CODE> comments: </P>
<UL>
  <LI>Single-quote and double-quote characters are taken to indicate the 
  beginning of a quoted string, even within a comment. If the quote is not 
  matched by a second quote within the comment, the parser doesn't realize the 
  comment has ended. If you are running <CODE>mysql</CODE> interactively, you 
  can tell that it has gotten confused like this because the prompt changes from 
  <CODE>mysql&gt;</CODE> to <CODE>'&gt;</CODE> or <CODE>"&gt;</CODE>. 
  <LI>A semicolon is taken to indicate the end of the current SQL statement and 
  anything following it to indicate the beginning of the next statement. 
</LI></UL>
<P>These limitations apply both when you run <CODE>mysql</CODE> interactively 
and when you put commands in a file and tell <CODE>mysql</CODE> to read its 
input from that file with <CODE>mysql &lt; some-file</CODE>. </P>
<P><STRONG>MySQL</STRONG> doesn't support the <SAMP>`--'</SAMP> ANSI SQL comment 
style. See section <A 
href="file:///D:/work/mysql/manual-split/manual_Compatibility.html#Missing_comments">5.4.7 
<SAMP>`--'</SAMP> as the Start of a Comment</A>. </P>
<P><A name=IDX1008></A><A name=IDX1009></A><A name=IDX1010></A><A 
name=IDX1011></A><A name=IDX1012></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#CREATE_FUNCTION" 
name=CREATE_FUNCTION>7.39 <CODE>CREATE FUNCTION/DROP FUNCTION</CODE> 
Syntax</A></H2><PRE>CREATE [AGGREGATE] FUNCTION function_name RETURNS {STRING|REAL|INTEGER}
       SONAME shared_library_name

DROP FUNCTION function_name
</PRE>
<P>A user-definable function (UDF) is a way to extend <STRONG>MySQL</STRONG> 
with a new function that works like native (built in) <STRONG>MySQL</STRONG> 
functions such as <CODE>ABS()</CODE> and <CODE>CONCAT()</CODE>. </P>
<P><CODE>AGGREGATE</CODE> is a new option for <STRONG>MySQL</STRONG> Version 
3.23. An <CODE>AGGREGATE</CODE> function works exactly like a native 
<STRONG>MySQL</STRONG> <CODE>GROUP</CODE> function like <CODE>SUM</CODE> or 
<CODE>COUNT()</CODE>. </P>
<P><CODE>CREATE FUNCTION</CODE> saves the function's name, type, and shared 
library name in the <CODE>mysql.func</CODE> system table. You must have the 
<STRONG>insert</STRONG> and <STRONG>delete</STRONG> privileges for the 
<CODE>mysql</CODE> database to create and drop functions. </P>
<P>All active functions are reloaded each time the server starts, unless you 
start <CODE>mysqld</CODE> with the <CODE>--skip-grant-tables</CODE> option. In 
this case, UDF initialization is skipped and UDFs are unavailable. (An active 
function is one that has been loaded with <CODE>CREATE FUNCTION</CODE> and not 
removed with <CODE>DROP FUNCTION</CODE>.) </P>
<P>For instructions on writing user-definable functions, see section <A 
href="file:///D:/work/mysql/manual-split/manual_Adding_functions.html#Adding_functions">17 
Adding New Functions to MySQL</A>. For the UDF mechanism to work, functions must 
be written in C or C++, your operating system must support dynamic loading and 
you must have compiled <CODE>mysqld</CODE> dynamically (not statically). </P>
<P><A name=IDX1013></A><A name=IDX1014></A>
<H2><A href="file:///D:/work/mysql/manual-split/manual_toc.html#Reserved_words" 
name=Reserved_words>7.40 Is MySQL Picky About Reserved Words?</A></H2>
<P>A common problem stems from trying to create a table with column names that 
use the names of datatypes or functions built into <STRONG>MySQL</STRONG>, such 
as <CODE>TIMESTAMP</CODE> or <CODE>GROUP</CODE>. You're allowed to do it (for 
example, <CODE>ABS</CODE> is an allowed column name), but whitespace is not 
allowed between a function name and the <SAMP>`('</SAMP> when using functions 
whose names are also column names. </P>
<P>The following words are explicitly reserved in <STRONG>MySQL</STRONG>. Most 
of them are forbidden by ANSI SQL92 as column and/or table names (for example, 
<CODE>group</CODE>). A few are reserved because <STRONG>MySQL</STRONG> needs 
them and is (currently) using a <CODE>yacc</CODE> parser: </P>
<TABLE width="100%" border=1>
  <TBODY>
  <TR>
    <TD><CODE>action</CODE> </TD>
    <TD><CODE>add</CODE> </TD>
    <TD><CODE>aggregate</CODE> </TD>
    <TD><CODE>all</CODE> </TD>
  <TR>
    <TD><CODE>alter</CODE> </TD>
    <TD><CODE>after</CODE> </TD>
    <TD><CODE>and</CODE> </TD>
    <TD><CODE>as</CODE> </TD>
  <TR>
    <TD><CODE>asc</CODE> </TD>
    <TD><CODE>avg</CODE> </TD>
    <TD><CODE>avg_row_length</CODE> </TD>
    <TD><CODE>auto_increment</CODE> </TD>
  <TR>
    <TD><CODE>between</CODE> </TD>
    <TD><CODE>bigint</CODE> </TD>
    <TD><CODE>bit</CODE> </TD>
    <TD><CODE>binary</CODE> </TD>
  <TR>
    <TD><CODE>blob</CODE> </TD>
    <TD><CODE>bool</CODE> </TD>
    <TD><CODE>both</CODE> </TD>
    <TD><CODE>by</CODE> </TD>
  <TR>
    <TD><CODE>cascade</CODE> </TD>
    <TD><CODE>case</CODE> </TD>
    <TD><CODE>char</CODE> </TD>
    <TD><CODE>character</CODE> </TD>
  <TR>
    <TD><CODE>change</CODE> </TD>
    <TD><CODE>check</CODE> </TD>
    <TD><CODE>checksum</CODE> </TD>
    <TD><CODE>column</CODE> </TD>
  <TR>
    <TD><CODE>columns</CODE> </TD>
    <TD><CODE>comment</CODE> </TD>
    <TD><CODE>constraint</CODE> </TD>
    <TD><CODE>create</CODE> </TD>
  <TR>
    <TD><CODE>cross</CODE> </TD>
    <TD><CODE>current_date</CODE> </TD>
    <TD><CODE>current_time</CODE> </TD>
    <TD><CODE>current_timestamp</CODE> </TD>
  <TR>
    <TD><CODE>data</CODE> </TD>
    <TD><CODE>database</CODE> </TD>
    <TD><CODE>databases</CODE> </TD>
    <TD><CODE>date</CODE> </TD>
  <TR>
    <TD><CODE>datetime</CODE> </TD>
    <TD><CODE>day</CODE> </TD>
    <TD><CODE>day_hour</CODE> </TD>
    <TD><CODE>day_minute</CODE> </TD>
  <TR>
    <TD><CODE>day_second</CODE> </TD>
    <TD><CODE>dayofmonth</CODE> </TD>
    <TD><CODE>dayofweek</CODE> </TD>
    <TD><CODE>dayofyear</CODE> </TD>
  <TR>
    <TD><CODE>dec</CODE> </TD>
    <TD><CODE>decimal</CODE> </TD>
    <TD><CODE>default</CODE> </TD>
    <TD><CODE>delayed</CODE> </TD>
  <TR>
    <TD><CODE>delay_key_write</CODE> </TD>
    <TD><CODE>delete</CODE> </TD>
    <TD><CODE>desc</CODE> </TD>
    <TD><CODE>describe</CODE> </TD>
  <TR>
    <TD><CODE>distinct</CODE> </TD>
    <TD><CODE>distinctrow</CODE> </TD>
    <TD><CODE>double</CODE> </TD>
    <TD><CODE>drop</CODE> </TD>
  <TR>
    <TD><CODE>end</CODE> </TD>
    <TD><CODE>else</CODE> </TD>
    <TD><CODE>escape</CODE> </TD>
    <TD><CODE>escaped</CODE> </TD>
  <TR>
    <TD><CODE>enclosed</CODE> </TD>
    <TD><CODE>enum</CODE> </TD>
    <TD><CODE>explain</CODE> </TD>
    <TD><CODE>exists</CODE> </TD>
  <TR>
    <TD><CODE>fields</CODE> </TD>
    <TD><CODE>file</CODE> </TD>
    <TD><CODE>first</CODE> </TD>
    <TD><CODE>float</CODE> </TD>
  <TR>
    <TD><CODE>float4</CODE> </TD>
    <TD><CODE>float8</CODE> </TD>
    <TD><CODE>flush</CODE> </TD>
    <TD><CODE>foreign</CODE> </TD>
  <TR>
    <TD><CODE>from</CODE> </TD>
    <TD><CODE>for</CODE> </TD>
    <TD><CODE>full</CODE> </TD>
    <TD><CODE>function</CODE> </TD>
  <TR>
    <TD><CODE>global</CODE> </TD>
    <TD><CODE>grant</CODE> </TD>
    <TD><CODE>grants</CODE> </TD>
    <TD><CODE>group</CODE> </TD>
  <TR>
    <TD><CODE>having</CODE> </TD>
    <TD><CODE>heap</CODE> </TD>
    <TD><CODE>high_priority</CODE> </TD>
    <TD><CODE>hour</CODE> </TD>
  <TR>
    <TD><CODE>hour_minute</CODE> </TD>
    <TD><CODE>hour_second</CODE> </TD>
    <TD><CODE>hosts</CODE> </TD>
    <TD><CODE>identified</CODE> </TD>
  <TR>
    <TD><CODE>ignore</CODE> </TD>
    <TD><CODE>in</CODE> </TD>
    <TD><CODE>index</CODE> </TD>
    <TD><CODE>infile</CODE> </TD>
  <TR>
    <TD><CODE>inner</CODE> </TD>
    <TD><CODE>insert</CODE> </TD>
    <TD><CODE>insert_id</CODE> </TD>
    <TD><CODE>int</CODE> </TD>
  <TR>
    <TD><CODE>integer</CODE> </TD>
    <TD><CODE>interval</CODE> </TD>
    <TD><CODE>int1</CODE> </TD>
    <TD><CODE>int2</CODE> </TD>
  <TR>
    <TD><CODE>int3</CODE> </TD>
    <TD><CODE>int4</CODE> </TD>
    <TD><CODE>int8</CODE> </TD>
    <TD><CODE>into</CODE> </TD>
  <TR>
    <TD><CODE>if</CODE> </TD>
    <TD><CODE>is</CODE> </TD>
    <TD><CODE>isam</CODE> </TD>
    <TD><CODE>join</CODE> </TD>
  <TR>
    <TD><CODE>key</CODE> </TD>
    <TD><CODE>keys</CODE> </TD>
    <TD><CODE>kill</CODE> </TD>
    <TD><CODE>last_insert_id</CODE> </TD>
  <TR>
    <TD><CODE>leading</CODE> </TD>
    <TD><CODE>left</CODE> </TD>
    <TD><CODE>length</CODE> </TD>
    <TD><CODE>like</CODE> </TD>
  <TR>
    <TD><CODE>lines</CODE> </TD>
    <TD><CODE>limit</CODE> </TD>
    <TD><CODE>load</CODE> </TD>
    <TD><CODE>local</CODE> </TD>
  <TR>
    <TD><CODE>lock</CODE> </TD>
    <TD><CODE>logs</CODE> </TD>
    <TD><CODE>long</CODE> </TD>
    <TD><CODE>longblob</CODE> </TD>
  <TR>
    <TD><CODE>longtext</CODE> </TD>
    <TD><CODE>low_priority</CODE> </TD>
    <TD><CODE>max</CODE> </TD>
    <TD><CODE>max_rows</CODE> </TD>
  <TR>
    <TD><CODE>match</CODE> </TD>
    <TD><CODE>mediumblob</CODE> </TD>
    <TD><CODE>mediumtext</CODE> </TD>
    <TD><CODE>mediumint</CODE> </TD>
  <TR>
    <TD><CODE>middleint</CODE> </TD>
    <TD><CODE>min_rows</CODE> </TD>
    <TD><CODE>minute</CODE> </TD>
    <TD><CODE>minute_second</CODE> </TD>
  <TR>
    <TD><CODE>modify</CODE> </TD>
    <TD><CODE>month</CODE> </TD>
    <TD><CODE>monthname</CODE> </TD>
    <TD><CODE>myisam</CODE> </TD>
  <TR>
    <TD><CODE>natural</CODE> </TD>
    <TD><CODE>numeric</CODE> </TD>
    <TD><CODE>no</CODE> </TD>
    <TD><CODE>not</CODE> </TD>
  <TR>
    <TD><CODE>null</CODE> </TD>
    <TD><CODE>on</CODE> </TD>
    <TD><CODE>optimize</CODE> </TD>
    <TD><CODE>option</CODE> </TD>
  <TR>
    <TD><CODE>optionally</CODE> </TD>
    <TD><CODE>or</CODE> </TD>
    <TD><CODE>order</CODE> </TD>
    <TD><CODE>outer</CODE> </TD>
  <TR>
    <TD><CODE>outfile</CODE> </TD>
    <TD><CODE>pack_keys</CODE> </TD>
    <TD><CODE>partial</CODE> </TD>
    <TD><CODE>password</CODE> </TD>
  <TR>
    <TD><CODE>precision</CODE> </TD>
    <TD><CODE>primary</CODE> </TD>
    <TD><CODE>procedure</CODE> </TD>
    <TD><CODE>process</CODE> </TD>
  <TR>
    <TD><CODE>processlist</CODE> </TD>
    <TD><CODE>privileges</CODE> </TD>
    <TD><CODE>read</CODE> </TD>
    <TD><CODE>real</CODE> </TD>
  <TR>
    <TD><CODE>references</CODE> </TD>
    <TD><CODE>reload</CODE> </TD>
    <TD><CODE>regexp</CODE> </TD>
    <TD><CODE>rename</CODE> </TD>
  <TR>
    <TD><CODE>replace</CODE> </TD>
    <TD><CODE>restrict</CODE> </TD>
    <TD><CODE>returns</CODE> </TD>
    <TD><CODE>revoke</CODE> </TD>
  <TR>
    <TD><CODE>rlike</CODE> </TD>
    <TD><CODE>row</CODE> </TD>
    <TD><CODE>rows</CODE> </TD>
    <TD><CODE>second</CODE> </TD>
  <TR>
    <TD><CODE>select</CODE> </TD>
    <TD><CODE>set</CODE> </TD>
    <TD><CODE>show</CODE> </TD>
    <TD><CODE>shutdown</CODE> </TD>
  <TR>
    <TD><CODE>smallint</CODE> </TD>
    <TD><CODE>soname</CODE> </TD>
    <TD><CODE>sql_big_tables</CODE> </TD>
    <TD><CODE>sql_big_selects</CODE> </TD>
  <TR>
    <TD><CODE>sql_low_priority_updates</CODE> </TD>
    <TD><CODE>sql_log_off</CODE> </TD>
    <TD><CODE>sql_log_update</CODE> </TD>
    <TD><CODE>sql_select_limit</CODE> </TD>
  <TR>
    <TD><CODE>sql_small_result</CODE> </TD>
    <TD><CODE>sql_big_result</CODE> </TD>
    <TD><CODE>sql_warnings</CODE> </TD>
    <TD><CODE>straight_join</CODE> </TD>
  <TR>
    <TD><CODE>starting</CODE> </TD>
    <TD><CODE>status</CODE> </TD>
    <TD><CODE>string</CODE> </TD>
    <TD><CODE>table</CODE> </TD>
  <TR>
    <TD><CODE>tables</CODE> </TD>
    <TD><CODE>temporary</CODE> </TD>
    <TD><CODE>terminated</CODE> </TD>
    <TD><CODE>text</CODE> </TD>
  <TR>
    <TD><CODE>then</CODE> </TD>
    <TD><CODE>time</CODE> </TD>
    <TD><CODE>timestamp</CODE> </TD>
    <TD><CODE>tinyblob</CODE> </TD>
  <TR>
    <TD><CODE>tinytext</CODE> </TD>
    <TD><CODE>tinyint</CODE> </TD>
    <TD><CODE>trailing</CODE> </TD>
    <TD><CODE>to</CODE> </TD>
  <TR>
    <TD><CODE>type</CODE> </TD>
    <TD><CODE>use</CODE> </TD>
    <TD><CODE>using</CODE> </TD>
    <TD><CODE>unique</CODE> </TD>
  <TR>
    <TD><CODE>unlock</CODE> </TD>
    <TD><CODE>unsigned</CODE> </TD>
    <TD><CODE>update</CODE> </TD>
    <TD><CODE>usage</CODE> </TD>
  <TR>
    <TD><CODE>values</CODE> </TD>
    <TD><CODE>varchar</CODE> </TD>
    <TD><CODE>variables</CODE> </TD>
    <TD><CODE>varying</CODE> </TD>
  <TR>
    <TD><CODE>varbinary</CODE> </TD>
    <TD><CODE>with</CODE> </TD>
    <TD><CODE>write</CODE> </TD>
    <TD><CODE>when</CODE> </TD>
  <TR>
    <TD><CODE>where</CODE> </TD>
    <TD><CODE>year</CODE> </TD>
    <TD><CODE>year_month</CODE> </TD>
    <TD><CODE>zerofill</CODE> </TD></TR></TBODY></TABLE>
<P>The following symbols (from the table above) are disallowed by ANSI SQL but 
allowed by <STRONG>MySQL</STRONG> as column/table names. This is because some of 
these names are very natural names and a lot of people have already used them. 
</P>
<UL>
  <LI><CODE>ACTION</CODE> 
  <LI><CODE>BIT</CODE> 
  <LI><CODE>DATE</CODE> 
  <LI><CODE>ENUM</CODE> 
  <LI><CODE>NO</CODE> 
  <LI><CODE>TEXT</CODE> 
  <LI><CODE>TIME</CODE> 
  <LI><CODE>TIMESTAMP</CODE> </LI></UL>
<P><A name=IDX1015></A><A name=IDX1016></A><A name=IDX1017></A><A 
name=IDX1018></A><A name=IDX1019></A><A name=IDX1020></A><A name=IDX1021></A><A 
name=IDX1022></A><A name=IDX1023></A><A name=IDX1024></A><A name=IDX1025></A>
<P>
<HR>

<P>Go to the <A 
href="file:///D:/work/mysql/manual-split/manual_Introduction.html">first</A>, <A 
href="file:///D:/work/mysql/manual-split/manual_Privilege_system.html">previous</A>, 
<A href="file:///D:/work/mysql/manual-split/manual_Table_types.html">next</A>, 
<A href="file:///D:/work/mysql/manual-split/manual_Concept_Index.html">last</A> 
section, <A href="file:///D:/work/mysql/manual-split/manual_toc.html">table of 
contents</A>. </P></BODY></HTML>
