## manager.vm
## Brad Matlack 3-2004
## XGen table manager template
##############################################################
#set( $tablename = $bean.getTableName() )
#set( $classname = $bean.getName() )
#set( $csvColumns   = $bean.getSqlColumnsAsCSV() )
#set( $csvPlaceHolders = $bean.getSqlPlaceHoldersAsCSV() )
#set( $pkField = $bean.getPrimaryKey() )
#set( $tkField = $bean.getTransactionKey() )
#set( $tkType = $tkField.getTypeName() )	    
#set( $pkType = $pkField.getTypeName() )	  
##############################################################
/*
 * ${classname}Manager.java
 * Generated by XGen using $template
 * $now
 */
package $packageName;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;

import ${pkg.getName()}.*;
import ${pkg.getName()}.table.*;

/**
 * Object level persistence manager. Customize this class as needed.
 *
 * @author $bean.Author
 */
public class ${classname}Manager {
#set($references = $bean.getReferences())
#set($collections = $bean.getCollections())
	
	/**
	 * Store references and collections before storing the object.
	 */
	public static void store(Connection conn, $classname obj) 
	throws SQLException { 
#foreach( $ref in $references )
		/* store reference */
		$ref.getClassname() $ref.getName() = obj.get$ref.getCapName()();
  		${ref.getClassname()}Table.store(conn, $ref.getName());
#end
#foreach( $kol in $collections )
#set( $klass = $kol.getClassname() )
		/* store collection */
		$kol.getTypename() collection = obj.get$kol.getCapName()();
		Iterator it = collection.iterator();
		while( it.hasNext() ){
	    	$klass object = ($klass)it.next();
			${klass}Table.store(conn, object);
		}
#end	 
		/* store object */
		${classname}Table.store(conn, obj);
	 }
	 
	/**
	 * Delete references and collections before deleting the object.
	 */
	public static void delete(Connection conn, $classname obj)
	throws SQLException {
		/* delete object */
		${classname}Table.delete(conn, obj);	
#foreach( $ref in $references )
		/* delete reference */
		$ref.getClassname() $ref.getName() = obj.get$ref.getCapName()();
  		${ref.getClassname()}Table.delete(conn, $ref.getName());
#end
#foreach( $kol in $collections )
#set( $klass = $kol.getClassname() )
		/* delete collection */
		$kol.getTypename() collection = obj.get$kol.getCapName()();
		Iterator it = collection.iterator();
		while( it.hasNext() ){
	    	$klass object = ($klass)it.next();
			${klass}Table.delete(conn, object);
		}
#end	 	  
		obj = null;
	}
	
	/**
	 * Load object by primary key, then load references and collections
	 */
	public static $classname loadByKey(Connection conn, $pkType id)
	throws SQLException {
	    /* load object */
		$classname obj = ${classname}Table.loadByKey(conn, id);	
#foreach( $ref in $references )
#set( $field = $bean.getFieldByName($ref.getKey()) )
		/* load reference */
		$field.getTypeName() $field.getName() = obj.$field.getAttributeGetter()();
  		$ref.getClassname() $ref.getName() = ${ref.getClassname()}Table.loadByKey(conn, $field.getName());
  		obj.$ref.getAttributeSetter()($ref.getName());
#end
#if( $bean.hasCollections() )
		String where = "";
#end
#foreach( $kol in $collections )
#set( $field = $bean.getFieldByName($kol.getKey()) )
		/* load collection */
		where = "WHERE $field.getColumn().getName() = " + obj.$pkField.getAttributeGetter()();
		Collection collection = ${kol.getClassname()}Table.loadByWhere(conn, where);
		obj.$kol.getAttributeSetter()( new $kol.getTypename()(collection) );
#end	 
		return obj;
	}
	
	/**
	 * Load objects by where, then iterate and load references and collections
	 */
	public static Collection loadByWhere(Connection conn, String where)
	throws SQLException {
		Vector list = new Vector();
	    /* load collection */
		Collection col = ${classname}Table.loadByWhere(conn, where);	
		Iterator it = col.iterator();
		while( it.hasNext() ){
			$classname obj = ($classname)it.next();
			list.addElement(obj);
#foreach( $ref in $references )
#set( $field = $bean.getFieldByName($ref.getKey()) )
			/* load reference */
			$field.getTypeName() $field.getName() = obj.$field.getAttributeGetter()();
  			$ref.getClassname() $ref.getName() = ${ref.getClassname()}Table.loadByKey(conn, $field.getName());
  			obj.$ref.getAttributeSetter()($ref.getName());
#end
#if( $bean.hasCollections() )
			String whereClause = "";
#end
#foreach( $kol in $collections )
#set( $field = $bean.getFieldByName($kol.getKey()) )
			/* load collection */
			whereClause = "WHERE $field.getColumn().getName() = " + obj.$pkField.getAttributeGetter()();
			Collection collection = ${kol.getClassname()}Table.loadByWhere(conn, whereClause);
			obj.$kol.getAttributeSetter()( new $kol.getTypename()(collection) );
#end	 
		}
		return list;
	}
	
}
