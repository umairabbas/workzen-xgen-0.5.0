## table.vm
## Brad Matlack 3-2004
## XGen table manager template
##############################################################
#set( $fields = $bean.getFields() )	  
#set( $tablename = $bean.getTableName() )
#set( $classname = $bean.getName() )
#set( $csvColumns   = $bean.getSqlColumnsAsCSV() )
#set( $csvPlaceHolders = $bean.getSqlPlaceHoldersAsCSV() )
#set( $pkField = $bean.getPrimaryKey() )
#set( $tkField = $bean.getTransactionKey() )
#set( $tkType = $tkField.getTypeName() )	    
#set( $pkType = $pkField.getTypeName() )
##############################################################
/*
 * ${classname}Table.java
 * Generated by XGen using $template
 * $now
 */
package $packageName;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.math.BigDecimal;
import java.util.*;
import java.io.*;

import workzen.xgen.util.SqlUtil;

#if( $bean.hasImports() )
import $bean.getImports();
#end
import ${pkg.getName()}.*;

/**
 * $classname table peer
 * @author $bean.Author
 */
public class ${classname}Table {

  protected static boolean handleConcurrency = $bean.handleConcurrency();
  protected static boolean handleAutoIncrement = $bean.handleAutoIncrement();
  protected static String tableName = "$tablename";
  protected static String[] columnNames = new String[] { $bean.getQuotedSqlColumns() };
  
  public static String[] getColumnNames(){
  	return columnNames;
  }
  
  public static String getTableName(){
    return tableName;
  }
      
  /** 
   * Store the record. Performs a sql update or insert.
   * The bean's primary key field will be set upon insert.
   */
  public static void store(Connection conn, $classname bean) throws SQLException{
#if( $pkField.isPrimitive() )     
    if( bean.$pkField.getAttributeGetter()() == 0 ){
#else
    if( bean.$pkField.getAttributeGetter()() == null || bean.$pkField.getAttributeGetter()().$pkField.getPrimitiveFunction() == 0 ){
#end
	  setPrimaryKey(conn, bean);
      insert(conn, bean);
    }else{
      handleConcurrency(conn, bean);
      update(conn, bean);
    }
  }
  
  /** 
   * Set the primary key field using the MAX value of the (numeric) column.
   * If the primary key is already set (in a new bean its 0) return
   */
  protected static void setPrimaryKey(Connection conn, $classname bean) throws SQLException{
    String sql = "SELECT MAX( $pkField.getColumn().getName() ) FROM $tablename";
    Statement s = conn.createStatement();
    ResultSet rs = s.executeQuery( sql );
    rs.next();
#if( $pkField.isPrimitive() )         
    $pkType id = rs.$pkField.getResultGetter()(1) + 1;
#else
    $pkType id = new $pkField.getType().getName()( rs.$pkField.getResultGetter()(1) + 1); 
#end    	    
    rs.close();
    s.close();
	bean.$pkField.getAttributeSetter()(id);
   }
 
  /**
   * Query the database to make sure transaction control numbers match.
   * If not equal, throw an Exception, else increment the bean's tcn.
   */  
  protected static void handleConcurrency(Connection conn, $classname bean) throws SQLException{
    if( handleConcurrency == true ){
#if( ! $bean.handleConcurrency() )
      /* 
#end     
      String sql = "SELECT tcn FROM $tablename WHERE $pkField.getColumn().getName() = ?";
      PreparedStatement pstmt = conn.prepareStatement(sql);
#if( $pkField.isPrimitive() )     
	  pstmt.$pkField.getResultSetter()(1, bean.$pkField.getAttributeGetter()());
#else
      pstmt.$pkField.getResultSetter()(1, bean.$pkField.getAttributeGetter()().$pkField.getPrimitiveFunction());
#end 
      ResultSet rs = pstmt.executeQuery();
      rs.next();
#if( $pkField.isPrimitive() )           
      $tkType tcnum = rs.$tkField.getResultGetter()(1);
#else
      $tkType tcnum = new $tkField.getType().getName()( rs.$tkField.getResultGetter()(1) ); 
#end       
      rs.close();
      pstmt.close();
    
      $tkType num = bean.$tkField.getAttributeGetter()();
      if( tcnum != num )
        throw new SQLException("Transaction control numbers do not match:" + tcnum + "<=>" + num );
        
      // increment the transaction control number
#if( $pkField.isPrimitive() )         
      bean.$tkField.getAttributeSetter()( num + 1);
#else
      bean.$tkField.getAttributeSetter()( new $tkType(num.$tkField.getPrimitiveFunction() + 1 ) ); 
#end             
#if( ! $bean.handleConcurrency() )
      */  
#end      
    }     
  }
  
  
   /** 
    * Insert a new record 
    */
  public static void insert(Connection conn, $classname bean) throws SQLException {
    String sql = "INSERT INTO $tablename ( $csvColumns ) VALUES ( $csvPlaceHolders )";
    PreparedStatement pstmt = conn.prepareStatement(sql);
#set ($i=0)
#foreach( $field in $fields )		
#set ($type = $field.getType())
#set ($typename = $type.getName())
#set ($i = $i + 1)
#if( $field.isPrimitive() )
    pstmt.$field.getResultSetter()( $i, bean.$field.getAttributeGetter()() );
#else
    if( bean.$field.getAttributeGetter()() == null ){
	    pstmt.setNull($i, $type.getSqlType());
    }else{
#if( $typename.equals("Date") || $typename.equals("Time") || $typename.equals("Timestamp") )
        pstmt.set$typename ( $i, new java.sql.$typename ( bean.$field.getAttributeGetter()().getTime() ) );
#elseif( $typename.equals("String") )
        pstmt.setString ( $i, bean.$field.getAttributeGetter()() );
#elseif( $typename.equals("Integer") )
        pstmt.setInt ( $i, bean.$field.getAttributeGetter()().$field.getPrimitiveFunction() );
#elseif( $typename.equals("Blob") )
        pstmt.setBinaryStream( $i, new ByteArrayInputStream( bean.$field.getAttributeGetter()() ), bean.$field.getAttributeGetter()().length );
#elseif( $typename.equals("Clob") )
        pstmt.setCharacterStream( $i, new CharArrayReader( bean.$field.getAttributeGetter()() ), bean.$field.getAttributeGetter()().length );
#elseif( $typename.equals("BigDecimal") )
        pstmt.set$typename ( $i, bean.$field.getAttributeGetter()() );
#else
        pstmt.set$typename ( $i, bean.$field.getAttributeGetter()().$field.getPrimitiveFunction() );
#end
    }
#end
#end
    pstmt.executeUpdate();
    pstmt.close();
  }
  

  /** 
    * Update an existing record 
    * (including the primary key)
    */
  public static void update(Connection conn, $classname bean) throws SQLException{
    String sql = "UPDATE $tablename SET " +
#set ( $tsize = $fields.size())
#set ( $count = 0)
#foreach( $field in $fields )
#set ( $count = $count + 1)
#if ($count < $tsize)
####### INCLUDE PRIMARY KEY IN UPDATE ??? #####
#######if( $primaryKey.equals( $field.getCol() ) ) ## do nothing #else	 "$field.getCol() = ?," + #end
             "$field.getColumn().getName() = ?," +
#else
             "$field.getColumn().getName() = ? " +	
#end
#end    
             "WHERE $pkField.getColumn().getName() = ?";
    PreparedStatement pstmt = conn.prepareStatement(sql);         
#set ($i=0)
#foreach( $field in $fields )		
#set ($type = $field.getType().getName() )
#set ($i = $i + 1)
#if( $type.equals("Date") || $type.equals("Time") || $type.equals("Timestamp") )
    pstmt.set$type ( $i, new java.sql.$type ( bean.$field.getAttributeGetter()().getTime() ) );
#elseif( $type.equals("String") )
    pstmt.setString ( $i, bean.$field.getAttributeGetter()() );
#elseif( $field.isPrimitive() )
    pstmt.$field.getResultSetter()( $i, bean.$field.getAttributeGetter()() );
#elseif( $type.equals("Integer") )
    pstmt.setInt ( $i, bean.$field.getAttributeGetter()().$field.getPrimitiveFunction() );
#elseif( $type.equals("Blob") )
    pstmt.setBinaryStream( $i, new ByteArrayInputStream( bean.$field.getAttributeGetter()() ), bean.$field.getAttributeGetter()().length );
#elseif( $type.equals("Clob") )
    pstmt.setCharacterStream( $i, new CharArrayReader( bean.$field.getAttributeGetter()() ), bean.$field.getAttributeGetter()().length );
#elseif( $type.equals("BigDecimal") )
    pstmt.set$type ( $i, bean.$field.getAttributeGetter()() );
#else
    pstmt.set$type ( $i, bean.$field.getAttributeGetter()().$field.getPrimitiveFunction() );
#end
#end
#set($i = $i + 1)
#if( $pkField.isPrimitive() )
    pstmt.$pkField.getResultSetter()( $i, bean.$pkField.getAttributeGetter()() );
#else
    pstmt.$pkField.getResultSetter()( $i, bean.$pkField.getAttributeGetter()().$pkField.getPrimitiveFunction() );    
#end
    pstmt.executeUpdate();
    pstmt.close();
  }

  /** 
   * Delete an existing record using a prepared statement
   */
  public static void delete(Connection conn, $classname bean) throws SQLException{
    String sql = "DELETE FROM $tablename WHERE $pkField.getColumn().getName() = ?";
    PreparedStatement pstmt = conn.prepareStatement(sql);
#if( $pkField.isPrimitive() )
    pstmt.$pkField.getResultSetter()( 1, bean.$pkField.getAttributeGetter()() );
#else
    pstmt.$pkField.getResultSetter()( 1, bean.$pkField.getAttributeGetter()().$pkField.getPrimitiveFunction() );    
#end
    pstmt.executeUpdate();
    pstmt.close();
  }
  
  /** 
   * Delete by where clause 
   */
  public static void deleteByWhere(Connection conn, String where) throws SQLException{
    String sql = "DELETE FROM $tablename " + where;
    Statement stmt = conn.createStatement();
    stmt.executeUpdate( sql );
    stmt.close();
  }
  
   /** 
    * Load the record by primary key
    */
  public static void deleteByKey(Connection conn, $pkType id) 
    throws SQLException{
    String sql = "DELETE FROM $tablename where $pkField.getColumn().getName() = ? ";
    PreparedStatement pstmt = conn.prepareStatement(sql);
#if( $pkField.isPrimitive() )
    pstmt.$pkField.getResultSetter()( 1, id );
#else
    pstmt.$pkField.getResultSetter()( 1, id.$pkField.getPrimitiveFunction() );        
#end
	pstmt.executeUpdate();
    pstmt.close();
  }
  
  /**
   * Count the number of rows
   */
  public static int countRows(Connection conn) throws SQLException{
    String sql = "SELECT COUNT(*) FROM $tablename";
    Statement stmt = conn.createStatement();
    ResultSet rs = stmt.executeQuery(sql);
    rs.next();
    int count = rs.getInt(1);
    rs.close();
    stmt.close();
    return count;
  }
  
  /** 
   * Load all records
   */
  public static List loadAll(Connection conn) 
    throws SQLException{
    String sql = "SELECT * FROM $tablename";
    PreparedStatement pstmt = conn.prepareStatement(sql);    
	ResultSet rs = pstmt.executeQuery();
    List list = new ArrayList();
    while(rs.next()){
      $classname bean = getInstance(rs);
      list.add(bean);
    }
    rs.close();
    pstmt.close();
    return list;
  }

  /** 
   * Load the record by primary key
   */
  public static $classname loadByKey(Connection conn, $pkType id) 
    throws SQLException{
    String sql = "SELECT $csvColumns FROM $tablename where $pkField.getColumn().getName() = ? ";
    PreparedStatement pstmt = conn.prepareStatement(sql);
#if( $pkField.isPrimitive() )
    pstmt.$pkField.getResultSetter()( 1, id );
#else
    pstmt.$pkField.getResultSetter()( 1, id.$pkField.getPrimitiveFunction() );        
#end
	$classname bean = null;
    ResultSet rs = pstmt.executeQuery();
    if( rs.next() ){
    	bean = getInstance(rs);
    }
    rs.close();
    pstmt.close();
    return bean;
  }

  /** 
   * Load a list of records according to the where clause 
   */
  public static List loadByWhere(Connection conn, String where) throws SQLException{
    String sql = "SELECT $csvColumns FROM $tablename " + where;
    Statement stmt = conn.createStatement();
    ResultSet rs = stmt.executeQuery( sql );
    List list = new ArrayList();
    while(rs.next()){
      $classname bean = getInstance(rs);
      list.add(bean);
    }
    rs.close();
    stmt.close();
    return list;
  }
  
  /**
   * Load a range of records using a scrollable resultset and absolute cursor
   */
  public static List loadRange(Connection conn, String where, int startRow, int rowCount)
  throws SQLException {  
    String sql = "SELECT $csvColumns FROM $tablename " + where;
    Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
    ResultSet rs = stmt.executeQuery( sql );   
        
    startRow = startRow -1;
    if( startRow <= 0 ){
    	rs.beforeFirst();   
    }else{
       rs.absolute(startRow);
    }
    //rs.setFetchSize(rowCount); // reliable?
    
    List list = new ArrayList();    
    int count = 0;
    while( rs.next() && (count < rowCount) ){
      count++;
      $classname bean = getInstance(rs);
      list.add(bean);
    }
    rs.close();
    stmt.close();
    return list;
  }
  
   /** 
   * Load a list from a sql select statement. This is useful 
   * for selecting rows using a foreign key in an intersection table.
   */
  public static List loadFromSql(Connection conn, String sql) 
    throws SQLException{
    Statement stmt = conn.createStatement();
    ResultSet rs = stmt.executeQuery( sql );
    List list = new ArrayList();
    while(rs.next()){
      $classname bean = getInstance(rs);
      list.add(bean);
    }
    rs.close();
    stmt.close();
    return list;
  }
  
  /** 
   * Load a collection, according to the where clause.
   * Returns a map of records accessible by a unique column value. 
   */
  public static Map loadMap(Connection conn, String where, String colname) 
    throws SQLException{
    String sql = "SELECT $csvColumns FROM $tablename " + where;
    HashMap map = new HashMap();
    Statement stmt = conn.createStatement();
    ResultSet rs = stmt.executeQuery( sql );
    while(rs.next()){
      $classname bean = getInstance(rs);
      int col = rs.findColumn(colname);
      String key = rs.getString(col);
      map.put(key, bean);
    }
    rs.close();
    stmt.close();
    return map;
  }
  
  /** 
   * Instantiate an object from the result set 
   * If null fields are present in the table, catch the NullPointerException
   */
  private static $classname getInstance(ResultSet rs) throws SQLException {
    $classname bean = new $classname();
#foreach( $field in $fields ) 
#set ($typename = $field.getType().getName() )
#set ($colname = $field.getColumn().getName() )
#if( $field.isPrimitive() )
    try{ 
    	bean.$field.getAttributeSetter()( rs.$field.getResultGetter()("$colname") ); 
    }catch(NullPointerException e){
    }
#elseif( $typename.equals("Date") || $typename.equals("Time") || $typename.equals("Timestamp") )
    try{ 
    	bean.$field.getAttributeSetter()( rs.get$field.getTypeName()("$colname") ); 
    }catch(NullPointerException e){
    }
#elseif( $typename.equals("Blob") )
    try{ 
    	bean.$field.getAttributeSetter()( SqlUtil.readBytes(rs.getBlob("$colname")) ); 
    }catch(NullPointerException e){
    }    
#elseif( $typename.equals("Clob") )
    try{ 
    	bean.$field.getAttributeSetter()( SqlUtil.readChars(rs.getClob("$colname")) ); 
    }catch(NullPointerException e){
    }        
#else
    try{ 
    	bean.$field.getAttributeSetter()( new $typename(rs.$field.getResultGetter()("$colname")) ); 
    }catch(NullPointerException e){
    }
#end
#end
	return bean;
  }

}




