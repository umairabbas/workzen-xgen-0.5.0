## bean.vm
## Brad Matlack 3-2002
## XGen persistent bean template
##############################################################
#set( $pkg = $model )
#set( $tablename = $bean.getTableName() )
#set( $classname = $strings.concat([$classname, "Bean"]) )
#set( $csvColumns   = $bean.getSqlColumnsAsCSV() )
#set( $csvPlaceHolders = $bean.getSqlPlaceHoldersAsCSV() )
#set( $pkField = $bean.getPrimaryKey() )
#set( $tkField = $bean.getTransactionKey() )
#set( $tkType = $tkField.getTypeName() )	    
#set( $pkType = $pkField.getTypeName() )	  
##############################################################
/*
 * ${classname}.java
 * Generated by XGen using $template
 * $now
 */
package $pkg.getName();

import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.math.BigDecimal;
import java.util.*;
import java.io.*;

import workzen.xgen.util.DateUtil;
import workzen.xgen.util.SqlUtil;

#if( $bean.hasImports() )
import $bean.getImports();
#end

/**
 * $bean.Description
 * @author $bean.Author
 */
#if( $bean.hasSuperclass() )
public class $classname extends $bean.getSuperclass(){
#else
public class $classname {
#end

  /* class attributes */
  transient protected boolean handleConcurrency = $bean.handleConcurrency();
  transient protected boolean handleAutoIncrement = $bean.handleAutoIncrement();
  transient protected boolean recordExists = false;
  
  /* attributes */
#foreach( $field in $fields )
#set( $typename = $field.getTypeName() )
#if( $typename.equals("Date") || $typename.equals("Time") || $typename.equals("Timestamp") )	
  protected Date $field.Name = new Date();
#elseif( $typename.equals("Blob") )
  protected byte[] $field.Name = new byte[1];
#elseif( $typename.equals("Clob") )
  protected char[] $field.Name = new char[1];
#elseif( $typename.equals("String") )
  protected $typename $field.getName() = new String();
#elseif( $field.isPrimitive() )
  protected $typename $field.getName();  
#elseif( $typename.equals("Boolean") )
  protected $typename $field.getName() = new $typename(false);
#else
  protected $typename $field.getName() = new $typename("0");  
#end
#end

#foreach( $field in $fields )
  /* setters and getters for $field.Name */
#set ($typename = $field.getType().getName() )
#if( $typename.equals("Date") || $typename.equals("Time") || $typename.equals("Timestamp") )
  public void $field.getAttributeSetter() ( String value ){ this.$field.getName() = DateUtil.getDate(value); }
  public void $field.getAttributeSetter() ( long value ){ this.$field.getName() = new Date(value); }
  public void $field.getAttributeSetter() ( java.util.Date value ){ this.$field.getName() = value; }
  public java.util.Date $field.getAttributeGetter() ( ){ return $field.getName(); }
#elseif( $typename.equals("String") )
  public void $field.getAttributeSetter() ( String value ) { this.$field.getName() = value; }
  public $typename $field.getAttributeGetter() ( ){ return $field.getName(); }	
#elseif( $typename.equals("Blob") )
  public void $field.getAttributeSetter() ( String value ) { this.$field.getName() = value.getBytes(); }
  public void $field.getAttributeSetter() ( $field.getPrimitiveType() value ){ this.$field.getName() = value; }
  public void $field.getAttributeSetter() ( java.sql.Blob blob ) throws SQLException { this.$field.getName() = SqlUtil.readBytes(blob); } 
  public void set$field.getCapName() ( File file ) throws SQLException { this.$field.getName() = SqlUtil.readBytes(file); }
  public byte[] $field.getAttributeGetter()(){ return $field.Name; }
#elseif( $typename.equals("Clob") )
  public void $field.getAttributeSetter() ( String value ) { this.$field.getName() = value.toCharArray(); }
  public void $field.getAttributeSetter() ( $field.getPrimitiveType() value ){ this.$field.getName() = value; }
  public void $field.getAttributeSetter() ( java.sql.Clob clob ) throws SQLException {this.$field.getName() = SqlUtil.readChars(clob); }
  public void $field.getAttributeSetter()( File file ) throws SQLException { this.$field.getName() = SqlUtil.readChars(file); }
  public char[] $field.getAttributeGetter() (){ return $field.Name; }
#elseif( $field.isPrimitive() )
#set($primitive = $field.getPrimitiveType())
  public void $field.getAttributeSetter()( String value ) { this.$field.getName() = new $typename(value).$field.getPrimitiveFunction(); }
  public void $field.getAttributeSetter()( $primitive value ) { this.$field.getName() = value; }
  public $primitive $field.getAttributeGetter()( ){ return $field.getName(); }  
#else
  public void $field.getAttributeSetter()( String value ) { this.$field.getName() = new $typename (value); }
  public void $field.getAttributeSetter()( $typename value ) { this.$field.getName() = value; }
  public void $field.getAttributeSetter()( $field.getPrimitiveType() value ){ this.$field.getName() = new $typename (value); }
  public $typename $field.getAttributeGetter()( ){ return $field.getName(); }
#end	
  
#end
  
  /** 
   * Store the record. Performs a sql update or insert.
   * The bean's primary key field will be set upon insert.
   */
  public void store(Connection conn) throws SQLException{
#if( $pkField.isPrimitive() )     
    if( $pkField.getAttributeGetter()() != 0 ){
#else
    if( $pkField.getAttributeGetter()().$pkField.getPrimitiveFunction() != 0 ){
#end
	  handleConcurrency(conn);
      update(conn);
    }else{
      setPrimaryKey(conn);
      insert(conn);
    }
  }
  
  /** 
   * Set the primary key field using the MAX value of the column 
   * If the primary key is a string, check for existence and return
   * If the primary key is already set (in a new bean its 0) return
   */
  private void setPrimaryKey(Connection conn) throws SQLException{
#if( $pkField.isPrimitive() )     
    if( $pkField.getAttributeGetter()() != 0 ){
#else
    if( $pkField.getAttributeGetter()().$pkField.getPrimitiveFunction() != 0 ){
#end  
    	return;
    }
    String sql = "SELECT MAX( $pkField.getColumn().getName() ) FROM $tablename";
    Statement s = conn.createStatement();
    ResultSet rs = s.executeQuery( sql );
    rs.next();
#if( $pkField.isPrimitive() )         
    $pkType id = rs.$pkField.getResultGetter()(1) + 1;
#else
    $pkType id = new $pkField.getType().getName()( rs.$pkField.getResultGetter()(1) ); 
#end    	    
    rs.close();
    s.close();
	$pkField.getAttributeSetter()(id);
   }
 
  /**
   * Query the database to make sure transaction control numbers match.
   * If not equal, throw an Exception, else increment the bean's tcn.
   */  
  private void handleConcurrency(Connection conn) throws SQLException{
    if( handleConcurrency == true ){
#if( ! $bean.handleConcurrency() ) /* 
#end     
      String sql = "SELECT tcn FROM $tablename WHERE $pkField.getColumn().getName() = ?";
      PreparedStatement pstmt = conn.prepareStatement(sql);
#if( $pkField.isPrimitive() )     
	  pstmt.$pkField.getResultSetter()(1, $pkField.getAttributeGetter()());
#else
      pstmt.$pkField.getResultSetter()(1, $pkField.getAttributeGetter()().$pkField.getPrimitiveFunction());
#end 
      ResultSet rs = pstmt.executeQuery();
      rs.next();
#if( $tkField.isPrimitive() )           
      $tkType tcnum = rs.$tkField.getResultGetter()(1);
#else
      $tkType tcnum = new $tkField.getType().getName()( rs.$tkField.getResultGetter()(1) ); 
#end       
      rs.close();
      pstmt.close();
    
      $tkType num = $tkField.getAttributeGetter()();
      if( tcnum != num )
        throw new SQLException("Transaction control numbers do not match:" + tcnum + "<=>" + num );
        
      // increment the transaction control number
#if( $tkField.isPrimitive() )         
      $tkField.getAttributeSetter()( num + 1);
#else
      $tkField.getAttributeSetter()( new $tkType(num.$tkField.getPrimitiveFunction() + 1 ) ); 
#end             
#if( ! $bean.handleConcurrency() ) */  
#end      
    }     
  }

  /** 
   * Insert a new record 
   */
  public void insert(Connection conn) throws SQLException {
    String sql = "INSERT INTO $tablename ( $csvColumns ) VALUES ( $csvPlaceHolders )";
    PreparedStatement pstmt = conn.prepareStatement(sql);
#set ($i=0)
#foreach( $field in $fields )		
#set ($type = $field.getType())
#set ($typename = $type.getName())
#set ($i = $i + 1)
#if( $typename.equals("Date") || $typename.equals("Time") || $typename.equals("Timestamp") )
    pstmt.set$typename ( $i, new java.sql.$typename ( $field.getAttributeGetter()().getTime() ) );
#elseif( $typename.equals("String") )
    pstmt.setString ( $i, $field.getAttributeGetter()() );
#elseif( $field.isPrimitive() )
    pstmt.$field.getResultSetter()( $i, $field.getAttributeGetter()() );
#elseif( $typename.equals("Integer") )
    pstmt.setInt ( $i, $field.getAttributeGetter()().$field.getPrimitiveFunction() );
#elseif( $typename.equals("Blob") )
    pstmt.setBinaryStream( $i, new ByteArrayInputStream( $field.getAttributeGetter()() ), $field.getAttributeGetter()().length );
#elseif( $typename.equals("Clob") )
    pstmt.setCharacterStream( $i, new CharArrayReader( $field.getAttributeGetter()() ), $field.getAttributeGetter()().length );
#elseif( $typename.equals("BigDecimal") )
    pstmt.set$typename ( $i, $field.getAttributeGetter()() );
#else
    pstmt.set$typename ( $i, $field.getAttributeGetter()().$field.getPrimitiveFunction() );
#end
#end
    pstmt.executeUpdate();
    pstmt.close();
  }

  /** 
   * Update an existing record 
   * (including the primary key)
   */
  public void update(Connection conn) throws SQLException{
    String sql = "UPDATE $tablename SET " +
#set ( $tsize = $fields.size())
#set ( $count = 0)
#foreach( $field in $fields )
#set ( $count = $count + 1)
#if ($count < $tsize)
####### INCLUDE PRIMARY KEY IN UPDATE ??? #####
#######if( $primaryKey.equals( $field.getCol() ) ) ## do nothing #else	 "$field.getCol() = ?," + #end
             "$field.getColumn().getName() = ?," +
#else
             "$field.getColumn().getName() = ? " +	
#end
#end    
             "WHERE $pkField.getColumn().getName() = ?";
    PreparedStatement pstmt = conn.prepareStatement(sql);         
#set ($i=0)
#foreach( $field in $fields )		
#set ($type = $field.getType().getName() )
#set ($i = $i + 1)
#if( $type.equals("Date") || $type.equals("Time") || $type.equals("Timestamp") )
    pstmt.set$type ( $i, new java.sql.$type ( $field.getAttributeGetter()().getTime() ) );
#elseif( $type.equals("String") )
    pstmt.setString ( $i, $field.getAttributeGetter()() );
#elseif( $field.isPrimitive() )
    pstmt.$field.getResultSetter()( $i, $field.getAttributeGetter()() );
#elseif( $type.equals("Integer") )
    pstmt.setInt ( $i, $field.getAttributeGetter()().$field.getPrimitiveFunction() );
#elseif( $type.equals("Blob") )
    pstmt.setBinaryStream( $i, new ByteArrayInputStream( $field.getAttributeGetter()() ), $field.getAttributeGetter()().length );
#elseif( $type.equals("Clob") )
    pstmt.setCharacterStream( $i, new CharArrayReader( $field.getAttributeGetter()() ), $field.getAttributeGetter()().length );
#elseif( $type.equals("BigDecimal") )
    pstmt.set$type ( $i, $field.getAttributeGetter()() );
#else
    pstmt.set$type ( $i, $field.getAttributeGetter()().$field.getPrimitiveFunction() );
#end
#end
#set($i = $i + 1)
#if( $pkField.isPrimitive() )
    pstmt.$pkField.getResultSetter()( $i, $pkField.getAttributeGetter()() );
#else
    pstmt.$pkField.getResultSetter()( $i, $pkField.getAttributeGetter()().$pkField.getPrimitiveFunction() );    
#end
    pstmt.executeUpdate();
    pstmt.close();
  }
  
  
  /** 
   * Delete an existing record 
   */
  public void delete(Connection conn, String where) throws SQLException{
    Statement stmt = conn.createStatement();
    String sql = "DELETE FROM $tablename " + where;
    stmt.execute(sql);
    stmt.close();
  }

  /** 
   * Delete an existing record using a prepared statement
   */
  public void delete(Connection conn) throws SQLException{
    String sql = "DELETE FROM $tablename WHERE $pkField.getColumn().getName() = ?";
    PreparedStatement pstmt = conn.prepareStatement(sql);
#if( $pkField.isPrimitive() )
    pstmt.$pkField.getResultSetter()( 1, $pkField.getAttributeGetter()() );
#else
    pstmt.$pkField.getResultSetter()( 1, $pkField.getAttributeGetter()().$pkField.getPrimitiveFunction() );    
#end
    pstmt.executeUpdate();
    pstmt.close();
  }
 
  /** 
   * Initialize this object from a Map hash. 
   */
  public void init(java.util.Map map){
    java.util.Iterator it = map.keySet().iterator();
      
    while( it.hasNext() ){
      String key = (String)it.next();
      String value = (String)map.get(key);
      if(false){
        // just a placeholder for template construction
      }
#foreach( $field in $fields )
      else if( key.equals("$field.getName()") ) {
        $field.getAttributeSetter()( value ); 
      }
#end
    }
  }

  /** 
   * Initialize this object from a Servlet Request parameter Map, 
   * using only the first elements of the String[] values.
   */
  public void initFromParameterMap(java.util.Map map){
    java.util.Iterator it = map.keySet().iterator();

    while( it.hasNext() ){
      String key = (String)it.next();
      String[] values = (String[])map.get(key);
      if(false){
        // just a placeholder for template construction
      }
#foreach( $field in $fields )
      else if( key.equals("$field.getName()") ) {
      $field.getAttributeSetter()( values[0] ); 
      }
#end
    }
  }

  /** 
   * Load map according to the where clause.
   * Returns a map of records accessible by a column value. (ie: foreign key)
   */
  public Map loadMap(Connection conn, String where, String colname) 
    throws SQLException{
  
    HashMap map = new HashMap();
    Statement s = conn.createStatement();
    String sql = "SELECT $csvColumns FROM $tablename " + where;
    ResultSet rs = s.executeQuery( sql );
    while(rs.next()){
      $classname bean = new $classname();
      bean.initialize(rs);
      int col = rs.findColumn(colname);
      String key = rs.getString(col);
      map.put(key, bean);
    }
    rs.close();
    s.close();
    return map;
  }

  /** 
   * Load records according to the where clause 
   */
  public Vector loadWhere(Connection conn, String where) throws SQLException{
    Vector beans = new Vector();
    Statement s = conn.createStatement();
    String sql = "SELECT $csvColumns FROM $tablename " + where;
    ResultSet rs = s.executeQuery( sql );
    while(rs.next()){
      $classname bean = new $classname();
      bean.initialize(rs);
      beans.addElement(bean);
    }
    rs.close();
    s.close();
    return beans;
  }

  /**
   * Load a range of records using a scrollable resultset and absolute cursor
   */
  public Vector loadRange(Connection conn, String where, int startRow, int rowCount)
  throws SQLException {
    Vector beans = new Vector();
   
    Statement s = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                                       ResultSet.CONCUR_UPDATABLE);
    
    String sql = "SELECT $csvColumns FROM $tablename " + where;

    ResultSet rs = s.executeQuery( sql );
    
    startRow = startRow - 1;
    if( startRow <= 0 ){
    	rs.beforeFirst();   
    }else{
       rs.absolute(startRow);
    }
    //rs.setFetchSize(rowCount); // reliable?
        
    int count = 0;
    while( rs.next() && (count < rowCount) ){
      count++;
      $classname bean = new $classname();
      bean.initialize(rs);
      beans.addElement(bean);
    }
    rs.close();
    s.close();
    return beans;
  }
 
  /** 
   * Initialize the object from a result set 
   * If null fields are present in the table, catch the NullPointerException
   */
  private void initialize(ResultSet rs) throws SQLException {
#foreach( $field in $fields ) 
#set ($typename = $field.getType().getName() )
#set ($colname = $field.getColumn().getName() )
#if( $field.isPrimitive() )
    try{ 
    	$field.getAttributeSetter()( rs.$field.getResultGetter()("$colname") ); 
    }catch(NullPointerException e){
    }
#elseif( $typename.equals("Date") || $typename.equals("Time") || $typename.equals("Timestamp") )
    try{ 
    	$field.getAttributeSetter()( new Date(rs.$field.getResultGetter()("$colname")) ); 
    }catch(NullPointerException e){
    }
#elseif( $typename.equals("Blob") )
    try{ 
    	$field.getAttributeSetter()( SqlUtil.readBytes(rs.getBlob("$colname")) ); 
    }catch(NullPointerException e){
    }    
#elseif( $typename.equals("Clob") )
    try{ 
    	$field.getAttributeSetter()( SqlUtil.readChars(rs.getClob("$colname")) ); 
    }catch(NullPointerException e){
    }        
#else
    try{ 
    	$field.getAttributeSetter()( new $typename(rs.$field.getResultGetter()("$colname")) ); 
    }catch(NullPointerException e){
    }
#end
#end
  }
  
  
  /** 
   * to String 
   */
  public String toString(){
    return getDataMap().toString();
  }

  /** 
   * Get the object as a map of key-value pairs
   */
  public HashMap getDataMap(){
    HashMap map = new HashMap();
#foreach( $field in $fields )
#set($typename = $field.getTypename() )
#if( ($typename.equals("Blob"))||($typename.equals("Clob")) )
    map.put("$field.getName()", new String( $field.getAttributeGetter()() ) );
#elseif ($field.isPrimitive())
    map.put("$field.getName()", "" + $field.getAttributeGetter()() );
#else
    map.put("$field.getName()", $field.getAttributeGetter()() );
#end
#end
    return map;
  }
 
}




